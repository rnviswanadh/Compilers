
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.8'

_lr_method = 'LALR'

_lr_signature = 'E83309CA83FE1D054D05F7C296A8B734'
    
_lr_action_items = {'DOUBLEEQ':([32,33,34,35,38,39,40,42,50,60,82,83,106,107,109,117,118,119,120,121,122,123,124,125,127,128,129,130,132,133,135,136,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,174,176,177,182,184,194,197,200,220,222,],[-92,-95,-87,-94,-82,84,-93,-81,84,-89,84,84,-58,-62,84,84,84,84,84,84,84,84,84,84,84,84,-82,84,84,84,84,84,-57,-65,-66,-70,-73,-74,-53,-68,84,-69,-63,-52,84,-64,-55,-54,-67,84,84,-75,84,-56,-82,84,-91,-78,-77,84,84,-90,-76,84,]),'DIVIDE':([32,33,34,35,38,39,40,42,50,60,82,83,106,107,109,117,118,119,120,121,122,123,124,125,127,128,129,130,132,133,135,136,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,174,176,177,182,184,194,197,200,220,222,],[-92,-95,-87,-94,-82,98,-93,-81,98,-89,98,98,-58,-62,98,98,98,98,98,98,98,98,98,98,98,98,-82,98,98,98,98,98,-57,98,98,98,98,98,98,98,98,98,98,98,98,98,-55,-54,98,98,98,98,98,-56,-82,98,-91,-78,-77,98,98,-90,-76,98,]),'RETURN':([0,4,5,12,13,16,23,24,44,46,48,53,56,77,78,79,81,92,137,166,180,188,219,223,224,225,227,232,233,235,236,237,238,242,246,249,252,253,255,256,],[3,-13,-15,-14,3,-17,-4,-16,-9,-12,-18,-7,-8,3,-10,-11,-79,-19,3,-101,-3,-100,-135,-135,-135,3,-20,-106,-109,-105,-102,-128,-130,-132,-134,-131,3,-115,-110,-116,]),'UNDEFINED':([3,14,36,37,41,43,47,61,62,65,66,67,68,69,70,71,72,73,74,75,76,80,81,84,85,86,87,88,89,90,91,93,94,95,96,97,98,99,100,101,102,103,104,105,114,116,168,172,179,185,205,206,213,214,216,],[33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,-112,33,33,33,33,33,]),'MODEQ':([22,55,],[61,61,]),'STRNEQUAL':([32,33,34,35,38,39,40,42,50,60,82,83,106,107,109,117,118,119,120,121,122,123,124,125,127,128,129,130,132,133,135,136,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,174,176,177,182,184,194,197,200,220,222,],[-92,-95,-87,-94,-82,86,-93,-81,86,-89,86,86,-58,-62,86,86,86,86,86,86,86,86,86,86,86,86,-82,86,86,86,86,86,-57,-65,-66,-70,-73,-74,-53,-68,86,-69,-63,-52,86,-64,-55,-54,-67,86,86,-75,86,-56,-82,86,-91,-78,-77,86,86,-90,-76,86,]),'NUMBER':([3,14,36,37,41,43,47,61,62,65,66,67,68,69,70,71,72,73,74,75,76,80,81,84,85,86,87,88,89,90,91,93,94,95,96,97,98,99,100,101,102,103,104,105,114,116,168,172,179,185,205,206,213,214,216,],[32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,-112,32,32,32,32,32,]),'WHILE':([0,4,5,12,13,16,23,24,44,46,48,53,56,77,78,79,81,92,137,166,180,188,219,223,224,225,227,232,233,235,236,237,238,242,246,249,252,253,255,256,],[2,-13,-15,-14,2,-17,-4,-16,-9,-12,-18,-7,-8,2,-10,-11,-79,-19,2,-101,-3,-100,-135,-135,-135,2,-20,-106,-109,-105,-102,-128,-130,-132,-134,-131,2,-115,-110,-116,]),'RIGHTPAREN':([4,5,12,13,16,24,32,33,34,35,38,40,42,44,46,48,49,53,54,56,60,63,64,72,78,79,82,83,92,106,107,113,117,118,119,120,121,123,124,125,126,127,128,130,132,133,135,136,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,166,167,177,179,180,182,183,184,188,190,191,192,193,194,200,201,204,211,217,219,220,223,224,226,227,228,231,232,233,235,236,237,238,242,244,245,246,247,249,251,253,255,256,],[-13,-15,-14,-6,-17,-16,-92,-95,-87,-94,-82,-93,-81,-9,-12,-18,-5,-7,113,-8,-89,-36,-35,-99,-10,-11,-83,139,-19,-58,-62,-44,-43,-33,-42,-39,-32,-41,-34,-37,178,-97,-40,-30,-38,-31,181,182,184,-57,-65,-66,-70,-73,-74,-53,-68,-59,-69,-63,-52,-61,-64,-55,-54,-67,-71,-60,-75,-72,-56,-101,-127,-91,-99,-3,-78,-80,-77,-100,210,-124,-126,212,-22,-90,-98,220,-127,-127,-135,-76,-135,-135,-125,-20,-21,240,-106,-109,-105,-102,-128,-130,-132,-114,-123,-134,250,-131,-122,-115,-110,-116,]),'LSHIFT':([32,33,34,35,38,39,40,42,50,60,82,83,106,107,109,117,118,119,120,121,122,123,124,125,127,128,129,130,132,133,135,136,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,174,176,177,182,184,194,197,200,220,222,],[-92,-95,-87,-94,-82,87,-93,-81,87,-89,87,87,-58,-62,87,87,87,87,87,87,87,87,87,87,87,87,-82,87,87,87,87,87,-57,87,87,87,-73,-74,-53,87,87,87,87,-52,87,87,-55,-54,87,87,87,-75,87,-56,-82,87,-91,-78,-77,87,87,-90,-76,87,]),'RSHIFT':([32,33,34,35,38,39,40,42,50,60,82,83,106,107,109,117,118,119,120,121,122,123,124,125,127,128,129,130,132,133,135,136,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,174,176,177,182,184,194,197,200,220,222,],[-92,-95,-87,-94,-82,88,-93,-81,88,-89,88,88,-58,-62,88,88,88,88,88,88,88,88,88,88,88,88,-82,88,88,88,88,88,-57,88,88,88,-73,-74,-53,88,88,88,88,-52,88,88,-55,-54,88,88,88,-75,88,-56,-82,88,-91,-78,-77,88,88,-90,-76,88,]),'INTOEQ':([22,55,],[62,62,]),'MINUS':([32,33,34,35,38,39,40,42,50,60,82,83,106,107,109,117,118,119,120,121,122,123,124,125,127,128,129,130,132,133,135,136,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,174,176,177,182,184,194,197,200,220,222,],[-92,-95,-87,-94,-82,89,-93,-81,89,-89,89,89,-58,-62,89,89,89,89,89,89,89,89,89,89,89,89,-82,89,89,89,89,89,-57,89,89,89,89,89,-53,89,89,89,89,-52,89,89,-55,-54,89,89,89,89,89,-56,-82,89,-91,-78,-77,89,89,-90,-76,89,]),'DOT':([17,],[52,]),'GTE':([32,33,34,35,38,39,40,42,50,60,82,83,106,107,109,117,118,119,120,121,122,123,124,125,127,128,129,130,132,133,135,136,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,174,176,177,182,184,194,197,200,220,222,],[-92,-95,-87,-94,-82,90,-93,-81,90,-89,90,90,-58,-62,90,90,90,90,90,90,90,90,90,90,90,90,-82,90,90,90,90,90,-57,90,90,90,-73,-74,-53,-68,90,90,-63,-52,90,-64,-55,-54,-67,90,90,-75,90,-56,-82,90,-91,-78,-77,90,90,-90,-76,90,]),'BINAND':([32,33,34,35,38,39,40,42,50,60,82,83,106,107,109,117,118,119,120,121,122,123,124,125,127,128,129,130,132,133,135,136,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,174,176,177,182,184,194,197,200,220,222,],[-92,-95,-87,-94,-82,91,-93,-81,91,-89,91,91,-58,-62,91,91,91,91,91,91,91,91,91,91,91,91,-82,91,91,91,91,91,-57,-65,-66,-70,-73,-74,-53,-68,-59,-69,-63,-52,91,-64,-55,-54,-67,91,91,-75,91,-56,-82,91,-91,-78,-77,91,91,-90,-76,91,]),'INCR':([22,55,],[64,64,]),'XOREQ':([22,55,],[65,65,]),'LSHIFTEQ':([22,55,],[71,71,]),'SEMICOLON':([6,8,11,18,20,25,26,27,32,33,34,35,38,39,40,42,57,58,59,60,63,64,82,106,107,109,113,117,118,119,120,121,123,124,125,128,129,130,131,132,133,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,164,165,169,170,171,174,175,176,177,178,182,184,200,207,212,215,218,220,221,222,234,242,243,245,],[44,46,48,53,56,78,79,-85,-92,-95,-87,-94,-82,92,-93,-81,-26,-23,-25,-89,-36,-35,-83,-58,-62,-88,-44,-43,-33,-42,-39,-32,-41,-34,-37,-40,-82,-30,-84,-38,-31,-57,-65,-66,-70,-73,-74,-53,-68,-59,-69,-63,-52,-61,-64,-55,-54,-67,-71,-60,-75,-72,-56,-117,185,-118,-120,-24,-25,-29,-82,-86,-28,-91,-96,-78,-77,-90,-119,227,-47,-27,-76,-113,-121,241,-132,246,248,]),'BINXOR':([32,33,34,35,38,39,40,42,50,60,82,83,106,107,109,117,118,119,120,121,122,123,124,125,127,128,129,130,132,133,135,136,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,174,176,177,182,184,194,197,200,220,222,],[-92,-95,-87,-94,-82,96,-93,-81,96,-89,96,96,-58,-62,96,96,96,96,96,96,96,96,96,96,96,96,-82,96,96,96,96,96,-57,-65,-66,-70,-73,-74,-53,-68,-59,-69,-63,-52,-61,-64,-55,-54,-67,96,96,-75,96,-56,-82,96,-91,-78,-77,96,96,-90,-76,96,]),'LTE':([32,33,34,35,38,39,40,42,50,60,82,83,106,107,109,117,118,119,120,121,122,123,124,125,127,128,129,130,132,133,135,136,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,174,176,177,182,184,194,197,200,220,222,],[-92,-95,-87,-94,-82,100,-93,-81,100,-89,100,100,-58,-62,100,100,100,100,100,100,100,100,100,100,100,100,-82,100,100,100,100,100,-57,100,100,100,-73,-74,-53,-68,100,100,-63,-52,100,-64,-55,-54,-67,100,100,-75,100,-56,-82,100,-91,-78,-77,100,100,-90,-76,100,]),'STREQUAL':([32,33,34,35,38,39,40,42,50,60,82,83,106,107,109,117,118,119,120,121,122,123,124,125,127,128,129,130,132,133,135,136,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,174,176,177,182,184,194,197,200,220,222,],[-92,-95,-87,-94,-82,93,-93,-81,93,-89,93,93,-58,-62,93,93,93,93,93,93,93,93,93,93,93,93,-82,93,93,93,93,93,-57,-65,-66,-70,-73,-74,-53,-68,93,-69,-63,-52,93,-64,-55,-54,-67,93,93,-75,93,-56,-82,93,-91,-78,-77,93,93,-90,-76,93,]),'URSHIFTEQ':([22,55,],[66,66,]),'MINUSEQ':([22,55,],[67,67,]),'LT':([32,33,34,35,38,39,40,42,50,60,82,83,106,107,109,117,118,119,120,121,122,123,124,125,127,128,129,130,132,133,135,136,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,174,176,177,182,184,194,197,200,220,222,],[-92,-95,-87,-94,-82,94,-93,-81,94,-89,94,94,-58,-62,94,94,94,94,94,94,94,94,94,94,94,94,-82,94,94,94,94,94,-57,94,94,94,-73,-74,-53,-68,94,94,-63,-52,94,-64,-55,-54,-67,94,94,-75,94,-56,-82,94,-91,-78,-77,94,94,-90,-76,94,]),'CONTINUE':([0,4,5,12,13,16,23,24,44,46,48,53,56,77,78,79,81,92,137,166,180,188,219,223,224,225,227,232,233,235,236,237,238,242,246,249,252,253,255,256,],[26,-13,-15,-14,26,-17,-4,-16,-9,-12,-18,-7,-8,26,-10,-11,-79,-19,26,-101,-3,-100,-135,-135,-135,26,-20,-106,-109,-105,-102,-128,-130,-132,-134,-131,26,-115,-110,-116,]),'PLUS':([32,33,34,35,38,39,40,42,50,60,82,83,106,107,109,117,118,119,120,121,122,123,124,125,127,128,129,130,132,133,135,136,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,174,176,177,182,184,194,197,200,220,222,],[-92,-95,-87,-94,-82,95,-93,-81,95,-89,95,95,-58,-62,95,95,95,95,95,95,95,95,95,95,95,95,-82,95,95,95,95,95,-57,95,95,95,95,95,-53,95,95,95,95,-52,95,95,-55,-54,95,95,95,95,95,-56,-82,95,-91,-78,-77,95,95,-90,-76,95,]),'DECR':([22,55,],[63,63,]),'LEFTBRACKET':([22,38,116,129,172,174,177,206,214,216,],[68,68,172,68,172,68,68,172,172,172,]),'BINOR':([32,33,34,35,38,39,40,42,50,60,82,83,106,107,109,117,118,119,120,121,122,123,124,125,127,128,129,130,132,133,135,136,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,174,176,177,182,184,194,197,200,220,222,],[-92,-95,-87,-94,-82,102,-93,-81,102,-89,102,102,-58,-62,102,102,102,102,102,102,102,102,102,102,102,102,-82,102,102,102,102,102,-57,-65,-66,-70,-73,-74,-53,-68,-59,-69,-63,-52,-61,-64,-55,-54,-67,102,-60,-75,102,-56,-82,102,-91,-78,-77,102,102,-90,-76,102,]),'COMMA':([32,33,34,35,38,40,42,59,60,63,64,82,106,107,113,117,118,119,120,121,123,124,125,127,128,130,132,133,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,165,170,174,176,177,182,184,192,194,195,197,200,215,220,],[-92,-95,-87,-94,-82,-93,-81,115,-89,-36,-35,-83,-58,-62,-44,-43,-33,-42,-39,-32,-41,-34,-37,179,-40,-30,-38,-31,-57,-65,-66,-70,-73,-74,-53,-68,-59,-69,-63,-52,-61,-64,-55,-54,-67,-71,-60,-75,-72,-56,187,115,-82,199,-91,-78,-77,211,213,214,216,-90,-47,-76,]),'OREQ':([22,55,],[69,69,]),'DIVEQ':([22,55,],[70,70,]),'$end':([1,4,5,10,12,13,16,24,28,44,46,48,49,53,56,78,79,92,166,180,188,219,223,224,227,232,233,235,236,237,238,242,246,249,253,255,256,],[-2,-13,-15,0,-14,-6,-17,-16,-1,-9,-12,-18,-5,-7,-8,-10,-11,-19,-101,-3,-100,-135,-135,-135,-20,-106,-109,-105,-102,-128,-130,-132,-134,-131,-115,-110,-116,]),'FUNCTION':([0,4,5,12,13,16,23,24,44,46,48,53,56,77,78,79,81,92,116,137,166,180,188,219,223,224,225,227,232,233,235,236,237,238,242,246,249,252,253,255,256,],[15,-13,-15,-14,15,-17,-4,-16,-9,-12,-18,-7,-8,15,-10,-11,-79,-19,173,15,-101,-3,-100,-135,-135,-135,15,-20,-106,-109,-105,-102,-128,-130,-132,-134,-131,15,-115,-110,-116,]),'RIGHTBRACKET':([32,33,34,35,38,40,42,60,82,106,107,122,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,177,182,184,195,196,197,200,215,220,229,230,],[-92,-95,-87,-94,-82,-93,-81,-89,-83,-58,-62,177,-57,-65,-66,-70,-73,-74,-53,-68,-59,-69,-63,-52,-61,-64,-55,-54,-67,-71,-60,-75,-72,-56,-91,-78,-77,-49,215,-51,-90,-47,-76,-48,-50,]),'GT':([32,33,34,35,38,39,40,42,50,60,82,83,106,107,109,117,118,119,120,121,122,123,124,125,127,128,129,130,132,133,135,136,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,174,176,177,182,184,194,197,200,220,222,],[-92,-95,-87,-94,-82,97,-93,-81,97,-89,97,97,-58,-62,97,97,97,97,97,97,97,97,97,97,97,97,-82,97,97,97,97,97,-57,97,97,97,-73,-74,-53,-68,97,97,-63,-52,97,-64,-55,-54,-67,97,97,-75,97,-56,-82,97,-91,-78,-77,97,97,-90,-76,97,]),'CONSOLE':([0,4,5,12,13,16,23,24,44,46,48,53,56,77,78,79,81,92,137,166,180,188,219,223,224,225,227,232,233,235,236,237,238,242,246,249,252,253,255,256,],[17,-13,-15,-14,17,-17,-4,-16,-9,-12,-18,-7,-8,17,-10,-11,-79,-19,17,-101,-3,-100,-135,-135,-135,17,-20,-106,-109,-105,-102,-128,-130,-132,-134,-131,17,-115,-110,-116,]),'STRING':([3,14,36,37,41,43,47,61,62,65,66,67,68,69,70,71,72,73,74,75,76,80,81,84,85,86,87,88,89,90,91,93,94,95,96,97,98,99,100,101,102,103,104,105,114,116,168,172,179,185,205,206,213,214,216,],[35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,-112,35,35,35,35,35,]),'FOR':([0,4,5,12,13,16,23,24,44,46,48,53,56,77,78,79,81,92,137,166,180,188,219,223,224,225,227,232,233,235,236,237,238,242,246,249,252,253,255,256,],[7,-13,-15,-14,7,-17,-4,-16,-9,-12,-18,-7,-8,7,-10,-11,-79,-19,7,-101,-3,-100,-135,-135,-135,7,-20,-106,-109,-105,-102,-128,-130,-132,-134,-131,7,-115,-110,-116,]),'LOG':([52,],[112,]),'INTO':([32,33,34,35,38,39,40,42,50,60,82,83,106,107,109,117,118,119,120,121,122,123,124,125,127,128,129,130,132,133,135,136,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,174,176,177,182,184,194,197,200,220,222,],[-92,-95,-87,-94,-82,99,-93,-81,99,-89,99,99,-58,-62,99,99,99,99,99,99,99,99,99,99,99,99,-82,99,99,99,99,99,-57,99,99,99,99,99,99,99,99,99,99,99,99,99,-55,-54,99,99,99,99,99,-56,-82,99,-91,-78,-77,99,99,-90,-76,99,]),'NOTEQUAL':([32,33,34,35,38,39,40,42,50,60,82,83,106,107,109,117,118,119,120,121,122,123,124,125,127,128,129,130,132,133,135,136,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,174,176,177,182,184,194,197,200,220,222,],[-92,-95,-87,-94,-82,85,-93,-81,85,-89,85,85,-58,-62,85,85,85,85,85,85,85,85,85,85,85,85,-82,85,85,85,85,85,-57,-65,-66,-70,-73,-74,-53,-68,85,-69,-63,-52,85,-64,-55,-54,-67,85,85,-75,85,-56,-82,85,-91,-78,-77,85,85,-90,-76,85,]),'LEFTPAREN':([0,2,3,4,5,7,12,13,14,16,19,22,23,24,29,30,31,36,37,41,43,44,45,46,47,48,51,53,56,61,62,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,108,111,112,114,116,129,137,166,168,172,173,174,179,180,185,187,188,198,205,206,213,214,216,219,223,224,225,227,232,233,235,236,237,238,241,242,246,248,249,252,253,255,256,],[19,-135,37,-13,-15,-111,-14,19,37,-17,19,72,-4,-16,80,-107,81,37,37,37,37,-9,108,-12,37,-18,-129,-7,-8,37,37,37,37,37,37,37,37,37,37,37,37,37,37,19,-10,-11,37,37,37,37,37,37,37,37,37,37,-19,37,37,37,37,37,37,37,37,37,37,37,37,37,19,167,168,37,37,72,19,-101,37,37,-133,72,37,-3,-112,19,-100,217,37,37,37,37,37,-135,-135,-135,19,-20,-106,-109,-105,-102,-128,-130,19,-132,-134,19,-131,19,-115,-110,-116,]),'RIGHTBRACE':([4,5,12,13,16,24,44,46,48,49,53,56,78,79,92,134,166,180,188,219,223,224,227,232,233,235,236,237,238,239,242,246,249,253,254,255,256,],[-13,-15,-14,-6,-17,-16,-9,-12,-18,-5,-7,-8,-10,-11,-19,180,-101,-3,-100,-135,-135,-135,-20,-106,-109,-105,-102,-128,-130,242,-132,-134,-131,-115,256,-110,-116,]),'ELSE':([166,180,],[189,-3,]),'ANDEQ':([22,55,],[73,73,]),'URSHIFT':([32,33,34,35,38,39,40,42,50,60,82,83,106,107,109,117,118,119,120,121,122,123,124,125,127,128,129,130,132,133,135,136,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,174,176,177,182,184,194,197,200,220,222,],[-92,-95,-87,-94,-82,103,-93,-81,103,-89,103,103,-58,-62,103,103,103,103,103,103,103,103,103,103,103,103,-82,103,103,103,103,103,-57,103,103,103,-73,-74,-53,103,103,103,103,-52,103,103,-55,-54,103,103,103,-75,103,-56,-82,103,-91,-78,-77,103,103,-90,-76,103,]),'EVAL':([3,14,36,37,41,43,47,61,62,65,66,67,68,69,70,71,72,73,74,75,76,80,81,84,85,86,87,88,89,90,91,93,94,95,96,97,98,99,100,101,102,103,104,105,114,116,168,172,179,185,205,206,213,214,216,],[31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,-112,31,31,31,31,31,]),'VAR':([0,4,5,12,13,16,23,24,44,46,48,53,56,77,78,79,81,92,108,137,166,180,188,219,223,224,225,227,232,233,235,236,237,238,242,246,249,252,253,255,256,],[21,-13,-15,-14,21,-17,-4,-16,-9,-12,-18,-7,-8,21,-10,-11,-79,-19,163,21,-101,-3,-100,-135,-135,-135,21,-20,-106,-109,-105,-102,-128,-130,-132,-134,-131,21,-115,-110,-116,]),'EQ':([9,22,55,59,60,177,186,200,],[47,74,114,116,-89,-91,206,-90,]),'ID':([0,3,4,5,12,13,14,15,16,19,21,23,24,36,37,41,43,44,46,47,48,53,56,61,62,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,108,114,115,116,137,163,166,167,168,172,179,180,185,187,188,199,205,206,211,213,214,216,217,219,223,224,225,227,232,233,235,236,237,238,241,242,246,248,249,252,253,255,256,],[22,38,-13,-15,-14,22,38,51,-17,55,59,-4,-16,38,38,38,38,-9,-12,38,-18,-7,-8,38,38,38,38,38,38,38,38,38,38,38,129,38,38,22,-10,-11,38,38,38,38,38,38,38,38,38,38,-19,38,38,38,38,38,38,38,38,38,38,38,38,38,55,38,170,174,22,186,-101,192,38,38,38,-3,-112,55,-100,186,38,38,192,38,38,38,192,-135,-135,-135,22,-20,-106,-109,-105,-102,-128,-130,55,-132,-134,55,-131,22,-115,-110,-116,]),'IF':([0,4,5,12,13,16,23,24,44,46,48,53,56,77,78,79,81,92,137,166,180,188,219,223,224,225,227,232,233,235,236,237,238,242,246,249,252,253,255,256,],[14,-13,-15,-14,14,-17,-4,-16,-9,-12,-18,-7,-8,14,-10,-11,-79,-19,14,-101,-3,-100,-135,-135,-135,14,-20,-106,-109,-105,-102,-128,-130,-132,-134,-131,14,-115,-110,-116,]),'AND':([32,33,34,35,38,39,40,42,50,60,82,83,106,107,109,117,118,119,120,121,122,123,124,125,127,128,129,130,132,133,135,136,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,174,176,177,182,184,194,197,200,220,222,],[-92,-95,-87,-94,-82,101,-93,-81,101,-89,101,101,-58,-62,101,101,101,101,101,101,101,101,101,101,101,101,-82,101,101,101,101,101,-57,-65,-66,-70,-73,-74,-53,-68,-59,-69,-63,-52,-61,-64,-55,-54,-67,-71,-60,-75,101,-56,-82,101,-91,-78,-77,101,101,-90,-76,101,]),'RSHIFTEQ':([22,55,],[75,75,]),'LEFTBRACE':([0,32,33,34,35,38,40,42,50,60,81,82,106,107,110,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,177,181,182,184,189,200,202,203,208,209,210,220,240,250,],[23,-92,-95,-87,-94,-82,-93,-81,-103,-89,23,-83,-58,-62,23,-57,-65,-66,-70,-73,-74,-53,-68,-59,-69,-63,-52,-61,-64,-55,-54,-67,-71,-60,-75,-72,-56,-91,-135,-78,-77,-135,-90,23,-108,23,-104,225,-76,225,252,]),'PLUSEQ':([22,55,],[76,76,]),'BREAK':([0,4,5,12,13,16,23,24,44,46,48,53,56,77,78,79,81,92,137,166,180,188,219,223,224,225,227,232,233,235,236,237,238,242,246,249,252,253,255,256,],[25,-13,-15,-14,25,-17,-4,-16,-9,-12,-18,-7,-8,25,-10,-11,-79,-19,25,-101,-3,-100,-135,-135,-135,25,-20,-106,-109,-105,-102,-128,-130,-132,-134,-131,25,-115,-110,-116,]),'BOOLEAN':([3,14,36,37,41,43,47,61,62,65,66,67,68,69,70,71,72,73,74,75,76,80,81,84,85,86,87,88,89,90,91,93,94,95,96,97,98,99,100,101,102,103,104,105,114,116,168,172,179,185,205,206,213,214,216,],[40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,-112,40,40,40,40,40,]),'TYPEOF':([3,14,36,37,41,43,47,61,62,65,66,67,68,69,70,71,72,73,74,75,76,80,81,84,85,86,87,88,89,90,91,93,94,95,96,97,98,99,100,101,102,103,104,105,114,116,168,172,179,185,205,206,213,214,216,],[36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,-112,36,36,36,36,36,]),'NOT':([3,14,36,37,41,43,47,61,62,65,66,67,68,69,70,71,72,73,74,75,76,80,81,84,85,86,87,88,89,90,91,93,94,95,96,97,98,99,100,101,102,103,104,105,114,116,168,172,179,185,205,206,213,214,216,],[41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,-112,41,41,41,41,41,]),'BINNOT':([3,14,36,37,41,43,47,61,62,65,66,67,68,69,70,71,72,73,74,75,76,80,81,84,85,86,87,88,89,90,91,93,94,95,96,97,98,99,100,101,102,103,104,105,114,116,168,172,179,185,205,206,213,214,216,],[43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,-112,43,43,43,43,43,]),'OR':([32,33,34,35,38,39,40,42,50,60,82,83,106,107,109,117,118,119,120,121,122,123,124,125,127,128,129,130,132,133,135,136,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,174,176,177,182,184,194,197,200,220,222,],[-92,-95,-87,-94,-82,104,-93,-81,104,-89,104,104,-58,-62,104,104,104,104,104,104,104,104,104,104,104,104,-82,104,104,104,104,104,-57,-65,-66,-70,-73,-74,-53,-68,-59,-69,-63,-52,-61,-64,-55,-54,-67,-71,-60,-75,-72,-56,-82,104,-91,-78,-77,104,104,-90,-76,104,]),'MOD':([32,33,34,35,38,39,40,42,50,60,82,83,106,107,109,117,118,119,120,121,122,123,124,125,127,128,129,130,132,133,135,136,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,174,176,177,182,184,194,197,200,220,222,],[-92,-95,-87,-94,-82,105,-93,-81,105,-89,105,105,-58,-62,105,105,105,105,105,105,105,105,105,105,105,105,-82,105,105,105,105,105,-57,105,105,105,105,105,105,105,105,105,105,105,105,105,-55,-54,105,105,105,105,105,-56,-82,105,-91,-78,-77,105,105,-90,-76,105,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'funcscopedefnormal':([51,],[111,]),'whileblockstart':([2,],[29,]),'statements':([0,13,77,137,225,252,],[1,49,134,183,239,254,]),'reference':([22,38,129,174,177,],[60,60,60,60,200,]),'elseblock':([189,],[208,]),'printList':([168,213,],[193,228,]),'increment':([241,248,],[244,251,]),'array':([116,172,206,214,216,],[171,195,171,195,195,]),'funblock':([210,240,],[224,243,]),'if':([0,13,77,137,225,252,],[4,4,4,4,4,4,]),'whileloop':([0,13,77,137,225,252,],[5,5,5,5,5,5,]),'evalendmarker':([183,],[204,]),'funcstmt':([0,13,77,137,225,252,],[8,8,8,8,8,8,]),'funcarghead':([167,217,],[190,231,]),'reassignmentarray':([0,13,77,137,225,252,],[11,11,11,11,11,11,]),'start':([0,],[10,]),'arrayCall':([0,3,13,14,36,37,41,43,47,61,62,65,66,67,68,69,70,71,72,73,74,75,76,77,80,81,84,85,86,87,88,89,90,91,93,94,95,96,97,98,99,100,101,102,103,104,105,114,116,137,168,172,179,205,206,213,214,216,225,252,],[9,34,9,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,9,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,9,34,34,34,34,34,34,34,34,9,9,]),'ifelse':([0,13,77,137,225,252,],[12,12,12,12,12,12,]),'statement':([0,13,77,137,225,252,],[13,13,13,13,13,13,]),'forexpr_marker':([185,],[205,]),'forcheck_marker':([221,],[234,]),'increment_marker':([244,],[247,]),'argList':([72,179,],[126,201,]),'arrayList':([172,214,216,],[196,229,230,]),'empty':([2,181,189,219,223,224,],[30,203,209,233,235,238,]),'for_expr':([205,],[221,]),'forloop':([0,13,77,137,225,252,],[16,16,16,16,16,16,]),'endfuncdecl':([246,],[249,]),'ifblockend':([166,],[188,]),'endblock_marker':([253,],[255,]),'assignment':([0,13,77,108,137,225,252,],[18,18,18,161,18,18,18,]),'initialization':([108,],[162,]),'declarationList':([21,115,],[58,169,]),'scope_marker':([7,],[45,]),'funcscopedef':([173,],[198,]),'forblock':([250,],[253,]),'declaration':([0,13,77,137,225,252,],[20,20,20,20,20,20,]),'blockmarker':([23,],[77,]),'endfunc':([224,],[237,]),'elseblockend':([223,],[236,]),'assignlist':([21,163,199,],[57,57,218,]),'whileblockend':([219,],[232,]),'funcdecl':([0,13,77,137,225,252,],[24,24,24,24,24,24,]),'reinitialization':([108,187,],[164,207,]),'reassignment':([0,13,19,77,108,137,187,225,241,248,252,],[6,6,54,6,165,6,165,6,245,245,6,]),'exprcheck':([181,],[202,]),'functioncall':([0,13,74,77,116,137,225,252,],[27,27,131,27,175,27,27,27,]),'evalmarker':([81,],[137,]),'ifelseblock':([50,],[110,]),'expression':([3,14,36,37,41,43,47,61,62,65,66,67,68,69,70,71,72,73,74,75,76,80,81,84,85,86,87,88,89,90,91,93,94,95,96,97,98,99,100,101,102,103,104,105,114,116,168,172,179,205,206,213,214,216,],[39,50,82,83,106,107,109,117,118,119,120,121,122,123,124,125,127,128,130,132,133,135,136,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,130,176,194,197,127,222,176,194,197,197,]),'funcargList':([167,211,217,],[191,226,191,]),'block':([0,81,110,202,208,],[28,138,166,219,223,]),'basicTypes':([3,14,36,37,41,43,47,61,62,65,66,67,68,69,70,71,72,73,74,75,76,80,81,84,85,86,87,88,89,90,91,93,94,95,96,97,98,99,100,101,102,103,104,105,114,116,168,172,179,205,206,213,214,216,],[42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> start","S'",1,None,None,None),
  ('start -> block','start',1,'p_start','Parser.py',153),
  ('start -> statements','start',1,'p_start','Parser.py',154),
  ('block -> LEFTBRACE blockmarker statements RIGHTBRACE','block',4,'p_block','Parser.py',158),
  ('blockmarker -> <empty>','blockmarker',0,'p_blockmarker','Parser.py',163),
  ('statements -> statement statements','statements',2,'p_statements','Parser.py',167),
  ('statements -> statement','statements',1,'p_statements','Parser.py',168),
  ('statement -> assignment SEMICOLON','statement',2,'p_statement_semicolon','Parser.py',172),
  ('statement -> declaration SEMICOLON','statement',2,'p_statement_semicolon','Parser.py',173),
  ('statement -> reassignment SEMICOLON','statement',2,'p_statement_semicolon','Parser.py',174),
  ('statement -> BREAK SEMICOLON','statement',2,'p_statement_semicolon','Parser.py',175),
  ('statement -> CONTINUE SEMICOLON','statement',2,'p_statement_semicolon','Parser.py',176),
  ('statement -> funcstmt SEMICOLON','statement',2,'p_statement_semicolon','Parser.py',177),
  ('statement -> if','statement',1,'p_statement_semicolon','Parser.py',178),
  ('statement -> ifelse','statement',1,'p_statement_semicolon','Parser.py',179),
  ('statement -> whileloop','statement',1,'p_statement_semicolon','Parser.py',180),
  ('statement -> funcdecl','statement',1,'p_statement_semicolon','Parser.py',181),
  ('statement -> forloop','statement',1,'p_statement_semicolon','Parser.py',182),
  ('statement -> reassignmentarray SEMICOLON','statement',2,'p_statement_semicolon','Parser.py',183),
  ('statement -> RETURN expression SEMICOLON','statement',3,'p_return_expression','Parser.py',187),
  ('statement -> CONSOLE DOT LOG LEFTPAREN printList RIGHTPAREN SEMICOLON','statement',7,'p_statement_print','Parser.py',192),
  ('printList -> expression COMMA printList','printList',3,'p_printList','Parser.py',197),
  ('printList -> expression','printList',1,'p_printList_base','Parser.py',204),
  ('declaration -> VAR declarationList','declaration',2,'p_declaration','Parser.py',217),
  ('declarationList -> ID COMMA declarationList','declarationList',3,'p_declarationList','Parser.py',228),
  ('declarationList -> ID','declarationList',1,'p_declarationList_base','Parser.py',233),
  ('assignment -> VAR assignlist','assignment',2,'p_assignment','Parser.py',244),
  ('assignlist -> ID EQ expression COMMA assignlist','assignlist',5,'p_assignlist','Parser.py',258),
  ('assignlist -> ID EQ expression','assignlist',3,'p_assignlist_base','Parser.py',267),
  ('assignlist -> ID EQ array','assignlist',3,'p_assignlist_array','Parser.py',276),
  ('reassignment -> ID EQ expression','reassignment',3,'p_reassignment_arith','Parser.py',307),
  ('reassignment -> ID PLUSEQ expression','reassignment',3,'p_reassignment_arith','Parser.py',308),
  ('reassignment -> ID MINUSEQ expression','reassignment',3,'p_reassignment_arith','Parser.py',309),
  ('reassignment -> ID INTOEQ expression','reassignment',3,'p_reassignment_arith','Parser.py',310),
  ('reassignment -> ID DIVEQ expression','reassignment',3,'p_reassignment_arith','Parser.py',311),
  ('reassignment -> ID INCR','reassignment',2,'p_reassignment_incr','Parser.py',348),
  ('reassignment -> ID DECR','reassignment',2,'p_reassignment_incr','Parser.py',349),
  ('reassignment -> ID LSHIFTEQ expression','reassignment',3,'p_reassignment_shift','Parser.py',374),
  ('reassignment -> ID RSHIFTEQ expression','reassignment',3,'p_reassignment_shift','Parser.py',375),
  ('reassignment -> ID URSHIFTEQ expression','reassignment',3,'p_reassignment_shift','Parser.py',376),
  ('reassignment -> ID ANDEQ expression','reassignment',3,'p_reassignment_shift','Parser.py',377),
  ('reassignment -> ID OREQ expression','reassignment',3,'p_reassignment_shift','Parser.py',378),
  ('reassignment -> ID XOREQ expression','reassignment',3,'p_reassignment_shift','Parser.py',379),
  ('reassignment -> ID MODEQ expression','reassignment',3,'p_reassignment_shift','Parser.py',380),
  ('reassignment -> LEFTPAREN reassignment RIGHTPAREN','reassignment',3,'p_reassignment_shift','Parser.py',381),
  ('casemarker -> <empty>','casemarker',0,'p_casemarker','Parser.py',406),
  ('endcasemarker -> <empty>','endcasemarker',0,'p_endcasemarker','Parser.py',410),
  ('array -> LEFTBRACKET arrayList RIGHTBRACKET','array',3,'p_array','Parser.py',416),
  ('arrayList -> array COMMA arrayList','arrayList',3,'p_arrayList_array','Parser.py',424),
  ('arrayList -> array','arrayList',1,'p_arrayList_base_array','Parser.py',435),
  ('arrayList -> expression COMMA arrayList','arrayList',3,'p_arrayList_exp','Parser.py',446),
  ('arrayList -> expression','arrayList',1,'p_arrayList_base_exp','Parser.py',461),
  ('expression -> expression PLUS expression','expression',3,'p_expression_op','Parser.py',493),
  ('expression -> expression MINUS expression','expression',3,'p_expression_op','Parser.py',494),
  ('expression -> expression INTO expression','expression',3,'p_expression_op','Parser.py',495),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression_op','Parser.py',496),
  ('expression -> expression MOD expression','expression',3,'p_expression_op','Parser.py',497),
  ('expression -> LEFTPAREN expression RIGHTPAREN','expression',3,'p_groupExp','Parser.py',512),
  ('expression -> NOT expression','expression',2,'p_expression_not','Parser.py',520),
  ('expression -> expression BINAND expression','expression',3,'p_expression_binop','Parser.py',536),
  ('expression -> expression BINOR expression','expression',3,'p_expression_binop','Parser.py',537),
  ('expression -> expression BINXOR expression','expression',3,'p_expression_binop','Parser.py',538),
  ('expression -> BINNOT expression','expression',2,'p_expression_binop','Parser.py',539),
  ('expression -> expression LT expression','expression',3,'p_expression_relop','Parser.py',544),
  ('expression -> expression GT expression','expression',3,'p_expression_relop','Parser.py',545),
  ('expression -> expression DOUBLEEQ expression','expression',3,'p_expression_relop','Parser.py',546),
  ('expression -> expression NOTEQUAL expression','expression',3,'p_expression_relop','Parser.py',547),
  ('expression -> expression LTE expression','expression',3,'p_expression_relop','Parser.py',548),
  ('expression -> expression GTE expression','expression',3,'p_expression_relop','Parser.py',549),
  ('expression -> expression STREQUAL expression','expression',3,'p_expression_strop','Parser.py',619),
  ('expression -> expression STRNEQUAL expression','expression',3,'p_expression_strop','Parser.py',620),
  ('expression -> expression AND expression','expression',3,'p_expression_and_or','Parser.py',627),
  ('expression -> expression OR expression','expression',3,'p_expression_and_or','Parser.py',628),
  ('expression -> expression LSHIFT expression','expression',3,'p_expression_shift','Parser.py',646),
  ('expression -> expression RSHIFT expression','expression',3,'p_expression_shift','Parser.py',647),
  ('expression -> expression URSHIFT expression','expression',3,'p_expression_shift','Parser.py',648),
  ('expression -> EVAL LEFTPAREN evalmarker statements evalendmarker RIGHTPAREN','expression',6,'p_expression_eval_undefined','Parser.py',654),
  ('expression -> EVAL LEFTPAREN block RIGHTPAREN','expression',4,'p_expression_eval_undefined','Parser.py',655),
  ('expression -> EVAL LEFTPAREN expression RIGHTPAREN','expression',4,'p_expression_eval_expression','Parser.py',662),
  ('evalmarker -> <empty>','evalmarker',0,'p_evalmarker','Parser.py',672),
  ('evalendmarker -> <empty>','evalendmarker',0,'p_evalendmarker','Parser.py',676),
  ('expression -> basicTypes','expression',1,'p_expression_basic','Parser.py',683),
  ('expression -> ID','expression',1,'p_expression_id','Parser.py',695),
  ('expression -> TYPEOF expression','expression',2,'p_expression_type','Parser.py',713),
  ('funcstmt -> ID EQ functioncall','funcstmt',3,'p_expression_functioncall_id','Parser.py',720),
  ('funcstmt -> functioncall','funcstmt',1,'p_expression_functioncall','Parser.py',744),
  ('funcstmt -> VAR ID EQ functioncall','funcstmt',4,'p_expression_functioncall_varid','Parser.py',750),
  ('expression -> arrayCall','expression',1,'p_expression_arraycall','Parser.py',769),
  ('reassignmentarray -> arrayCall EQ expression','reassignmentarray',3,'p_reassignment_array','Parser.py',781),
  ('arrayCall -> ID reference','arrayCall',2,'p_arrayCall','Parser.py',787),
  ('reference -> LEFTBRACKET expression RIGHTBRACKET reference','reference',4,'p_reference','Parser.py',826),
  ('reference -> LEFTBRACKET expression RIGHTBRACKET','reference',3,'p_reference_base','Parser.py',837),
  ('basicTypes -> NUMBER','basicTypes',1,'p_basicTypes_number','Parser.py',857),
  ('basicTypes -> BOOLEAN','basicTypes',1,'p_basicTypes_boolean','Parser.py',863),
  ('basicTypes -> STRING','basicTypes',1,'p_basicTypes_string','Parser.py',873),
  ('basicTypes -> UNDEFINED','basicTypes',1,'p_basicTypes_undefined','Parser.py',882),
  ('functioncall -> ID LEFTPAREN argList RIGHTPAREN','functioncall',4,'p_functioncall','Parser.py',893),
  ('argList -> expression','argList',1,'p_argList_expr','Parser.py',906),
  ('argList -> expression COMMA argList','argList',3,'p_argList','Parser.py',910),
  ('argList -> <empty>','argList',0,'p_argList_base','Parser.py',914),
  ('if -> IF expression ifelseblock block ifblockend','if',5,'p_if','Parser.py',924),
  ('ifblockend -> <empty>','ifblockend',0,'p_ifblockend_marker','Parser.py',927),
  ('ifelse -> IF expression ifelseblock block ELSE elseblock block elseblockend','ifelse',8,'p_ifelse','Parser.py',935),
  ('ifelseblock -> <empty>','ifelseblock',0,'p_ifelseblock_marker','Parser.py',939),
  ('elseblock -> empty','elseblock',1,'p_elseblock_marker','Parser.py',953),
  ('elseblockend -> empty','elseblockend',1,'p_elseblockend_marker','Parser.py',958),
  ('whileloop -> WHILE whileblockstart LEFTPAREN expression RIGHTPAREN exprcheck block whileblockend','whileloop',8,'p_whileloop','Parser.py',975),
  ('whileblockstart -> empty','whileblockstart',1,'p_whileblockstart','Parser.py',979),
  ('exprcheck -> empty','exprcheck',1,'p_exprcheck','Parser.py',986),
  ('whileblockend -> empty','whileblockend',1,'p_whileblockend','Parser.py',992),
  ('forloop -> FOR scope_marker LEFTPAREN initialization SEMICOLON forexpr_marker for_expr forcheck_marker SEMICOLON increment increment_marker RIGHTPAREN forblock endblock_marker','forloop',14,'p_forloop','Parser.py',997),
  ('scope_marker -> <empty>','scope_marker',0,'p_scope_marker','Parser.py',1000),
  ('forexpr_marker -> <empty>','forexpr_marker',0,'p_forexpr_marker','Parser.py',1004),
  ('forcheck_marker -> <empty>','forcheck_marker',0,'p_forcheck_marker','Parser.py',1014),
  ('increment_marker -> <empty>','increment_marker',0,'p_increment_marker','Parser.py',1022),
  ('endblock_marker -> <empty>','endblock_marker',0,'p_endblock_marker','Parser.py',1027),
  ('forblock -> LEFTBRACE statements RIGHTBRACE','forblock',3,'p_forblock','Parser.py',1033),
  ('initialization -> assignment','initialization',1,'p_initialization','Parser.py',1037),
  ('initialization -> reinitialization','initialization',1,'p_initialization','Parser.py',1038),
  ('reinitialization -> reassignment COMMA reinitialization','reinitialization',3,'p_reinitialization','Parser.py',1041),
  ('reinitialization -> reassignment','reinitialization',1,'p_reinitialization','Parser.py',1042),
  ('for_expr -> expression','for_expr',1,'p_for_expr','Parser.py',1045),
  ('increment -> reassignment SEMICOLON increment','increment',3,'p_increment','Parser.py',1051),
  ('increment -> reassignment','increment',1,'p_increment','Parser.py',1052),
  ('funcarghead -> funcargList','funcarghead',1,'p_funcarghead','Parser.py',1061),
  ('funcargList -> ID COMMA funcargList','funcargList',3,'p_funcargList','Parser.py',1074),
  ('funcargList -> ID','funcargList',1,'p_funcargList_base','Parser.py',1079),
  ('funcargList -> <empty>','funcargList',0,'p_funcargList_empty','Parser.py',1083),
  ('funcdecl -> FUNCTION ID funcscopedefnormal LEFTPAREN funcarghead RIGHTPAREN funblock endfunc','funcdecl',8,'p_funcdecl_normal','Parser.py',1089),
  ('funcscopedefnormal -> <empty>','funcscopedefnormal',0,'p_funcscopedefnormal','Parser.py',1093),
  ('endfunc -> empty','endfunc',1,'p_endfunc','Parser.py',1109),
  ('funcdecl -> VAR ID EQ FUNCTION funcscopedef LEFTPAREN funcarghead RIGHTPAREN funblock SEMICOLON endfuncdecl','funcdecl',11,'p_funcdecl_vardecl','Parser.py',1116),
  ('funblock -> LEFTBRACE statements RIGHTBRACE','funblock',3,'p_funblock','Parser.py',1120),
  ('funcscopedef -> <empty>','funcscopedef',0,'p_funcscopedef','Parser.py',1125),
  ('endfuncdecl -> <empty>','endfuncdecl',0,'p_endfuncdecl','Parser.py',1138),
  ('empty -> <empty>','empty',0,'p_empty','Parser.py',1154),
]
