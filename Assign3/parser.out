Created by PLY version 3.8 (http://www.dabeaz.com/ply)

Unused terminals:

    VOID
    WITH
    IMPORT
    DEBUGGER
    EXTENDS
    THIS
    DELETE
    LCOMMENT
    SETPROP
    COLON
    GETP
    CASE
    TRY
    DEFAULT
    NEW
    SWITCH
    CATCH
    SETP
    INSTANCEOF
    GETPROP
    CONDOP
    DO
    CONST
    EXPORT
    CLASS
    REGEX
    YIELD
    FINALLY
    IN
    BCOMMENT
    ALERT
    SUPER
    THROW

Grammar

Rule 0     S' -> start
Rule 1     start -> block
Rule 2     start -> statements
Rule 3     block -> LEFTBRACE statements RIGHTBRACE
Rule 4     block -> LEFTBRACE RIGHTBRACE
Rule 5     statements -> statement statements
Rule 6     statements -> statement
Rule 7     statement -> assignment SEMICOLON
Rule 8     statement -> reassignment SEMICOLON
Rule 9     statement -> BREAK SEMICOLON
Rule 10    statement -> CONTINUE SEMICOLON
Rule 11    statement -> RETURN expression SEMICOLON
Rule 12    statement -> expression SEMICOLON
Rule 13    statement -> CONSOLE DOT LOG LEFTPAREN expression RIGHTPAREN SEMICOLON
Rule 14    statement -> functioncall SEMICOLON
Rule 15    statement -> if
Rule 16    statement -> ifelse
Rule 17    statement -> whileloop
Rule 18    statement -> forloop
Rule 19    statement -> funcdecl
Rule 20    assignment -> VAR assignlist
Rule 21    assignment -> LEFTPAREN assignment RIGHTPAREN
Rule 22    assignlist -> ID EQ expression COMMA assignlist
Rule 23    assignlist -> ID COMMA assignlist
Rule 24    assignlist -> arraydecl COMMA assignlist
Rule 25    assignlist -> ID EQ expression
Rule 26    assignlist -> ID
Rule 27    assignlist -> arraydecl
Rule 28    reassignment -> ID EQ expression
Rule 29    reassignment -> ID PLUSEQ expression
Rule 30    reassignment -> ID MINUSEQ expression
Rule 31    reassignment -> ID INTOEQ expression
Rule 32    reassignment -> ID DIVEQ expression
Rule 33    reassignment -> ID INCR
Rule 34    reassignment -> ID DECR
Rule 35    reassignment -> ID LSHIFTEQ expression
Rule 36    reassignment -> ID RSHIFTEQ expression
Rule 37    reassignment -> ID URSHIFTEQ expression
Rule 38    reassignment -> ID ANDEQ expression
Rule 39    reassignment -> ID OREQ expression
Rule 40    reassignment -> ID XOREQ expression
Rule 41    reassignment -> ID MODEQ expression
Rule 42    reassignment -> arraydecl
Rule 43    reassignment -> LEFTPAREN reassignment RIGHTPAREN
Rule 44    arraydecl -> ID EQ LEFTBRACKET arrayList RIGHTBRACKET
Rule 45    arrayList -> expression COMMA arrayList
Rule 46    arrayList -> arraydecl COMMA arrayList
Rule 47    arrayList -> arraydecl
Rule 48    arrayList -> expression
Rule 49    arrayList -> <empty>
Rule 50    expression -> EVAL LEFTPAREN statements RIGHTPAREN
Rule 51    expression -> EVAL LEFTPAREN block RIGHTPAREN
Rule 52    expression -> expression PLUS expression
Rule 53    expression -> expression MINUS expression
Rule 54    expression -> expression INTO expression
Rule 55    expression -> expression DIVIDE expression
Rule 56    expression -> expression MOD expression
Rule 57    expression -> expression EXPO expression
Rule 58    expression -> LEFTPAREN expression RIGHTPAREN
Rule 59    expression -> NOT expression
Rule 60    expression -> expression BINAND expression
Rule 61    expression -> expression BINOR expression
Rule 62    expression -> expression BINXOR expression
Rule 63    expression -> BINNOT expression
Rule 64    expression -> expression LT expression
Rule 65    expression -> expression GT expression
Rule 66    expression -> expression DOUBLEEQ expression
Rule 67    expression -> expression NOTEQUAL expression
Rule 68    expression -> expression LTE expression
Rule 69    expression -> expression GTE expression
Rule 70    expression -> expression STREQUAL expression
Rule 71    expression -> expression STRNEQUAL expression
Rule 72    expression -> expression AND expression
Rule 73    expression -> expression OR expression
Rule 74    expression -> expression LSHIFT expression
Rule 75    expression -> expression RSHIFT expression
Rule 76    expression -> expression URSHIFT expression
Rule 77    expression -> basicTypes
Rule 78    expression -> functioncall
Rule 79    expression -> arrayCall
Rule 80    expression -> TYPEOF expression
Rule 81    arrayCall -> ID LEFTBRACKET expression RIGHTBRACKET
Rule 82    basicTypes -> NUMBER
Rule 83    basicTypes -> STRING
Rule 84    basicTypes -> ID
Rule 85    basicTypes -> UNDEFINED
Rule 86    functioncall -> ID LEFTPAREN argList RIGHTPAREN
Rule 87    argList -> expression
Rule 88    argList -> expression COMMA argList
Rule 89    argList -> <empty>
Rule 90    if -> IF expression cblock
Rule 91    ifelse -> IF expression cblock ELSE cblock
Rule 92    ifelse -> IF expression cblock ELSE if
Rule 93    ifelse -> IF expression cblock ELSE ifelse
Rule 94    cblock -> block
Rule 95    cblock -> statement
Rule 96    whileloop -> WHILE LEFTPAREN expression RIGHTPAREN cblock
Rule 97    forloop -> FOR LEFTPAREN initialization SEMICOLON expression SEMICOLON increment RIGHTPAREN cblock
Rule 98    initialization -> assignment SEMICOLON initialization
Rule 99    initialization -> reassignment SEMICOLON initialization
Rule 100   initialization -> assignment
Rule 101   initialization -> reassignment
Rule 102   increment -> reassignment SEMICOLON increment
Rule 103   increment -> reassignment
Rule 104   funcdecl -> FUNCTION ID LEFTPAREN argList RIGHTPAREN cblock
Rule 105   funcdecl -> VAR ID EQ FUNCTION LEFTPAREN argList RIGHTPAREN cblock SEMICOLON
Rule 106   statement -> assignment
Rule 107   statement -> reassignment
Rule 108   statement -> BREAK
Rule 109   statement -> CONTINUE
Rule 110   statement -> expression
Rule 111   statement -> CONSOLE DOT LOG LEFTPAREN expression RIGHTPAREN
Rule 112   statement -> functioncall

Terminals, with rules where they appear

ALERT                : 
AND                  : 72
ANDEQ                : 38
BCOMMENT             : 
BINAND               : 60
BINNOT               : 63
BINOR                : 61
BINXOR               : 62
BREAK                : 9 108
CASE                 : 
CATCH                : 
CLASS                : 
COLON                : 
COMMA                : 22 23 24 45 46 88
CONDOP               : 
CONSOLE              : 13 111
CONST                : 
CONTINUE             : 10 109
DEBUGGER             : 
DECR                 : 34
DEFAULT              : 
DELETE               : 
DIVEQ                : 32
DIVIDE               : 55
DO                   : 
DOT                  : 13 111
DOUBLEEQ             : 66
ELSE                 : 91 92 93
EQ                   : 22 25 28 44 105
EVAL                 : 50 51
EXPO                 : 57
EXPORT               : 
EXTENDS              : 
FINALLY              : 
FOR                  : 97
FUNCTION             : 104 105
GETP                 : 
GETPROP              : 
GT                   : 65
GTE                  : 69
ID                   : 22 23 25 26 28 29 30 31 32 33 34 35 36 37 38 39 40 41 44 81 84 86 104 105
IF                   : 90 91 92 93
IMPORT               : 
IN                   : 
INCR                 : 33
INSTANCEOF           : 
INTO                 : 54
INTOEQ               : 31
LCOMMENT             : 
LEFTBRACE            : 3 4
LEFTBRACKET          : 44 81
LEFTPAREN            : 13 21 43 50 51 58 86 96 97 104 105 111
LOG                  : 13 111
LSHIFT               : 74
LSHIFTEQ             : 35
LT                   : 64
LTE                  : 68
MINUS                : 53
MINUSEQ              : 30
MOD                  : 56
MODEQ                : 41
NEW                  : 
NOT                  : 59
NOTEQUAL             : 67
NUMBER               : 82
OR                   : 73
OREQ                 : 39
PLUS                 : 52
PLUSEQ               : 29
REGEX                : 
RETURN               : 11
RIGHTBRACE           : 3 4
RIGHTBRACKET         : 44 81
RIGHTPAREN           : 13 21 43 50 51 58 86 96 97 104 105 111
RSHIFT               : 75
RSHIFTEQ             : 36
SEMICOLON            : 7 8 9 10 11 12 13 14 97 97 98 99 102 105
SETP                 : 
SETPROP              : 
STREQUAL             : 70
STRING               : 83
STRNEQUAL            : 71
SUPER                : 
SWITCH               : 
THIS                 : 
THROW                : 
TRY                  : 
TYPEOF               : 80
UNDEFINED            : 85
URSHIFT              : 76
URSHIFTEQ            : 37
VAR                  : 20 105
VOID                 : 
WHILE                : 96
WITH                 : 
XOREQ                : 40
YIELD                : 
error                : 

Nonterminals, with rules where they appear

argList              : 86 88 104 105
arrayCall            : 79
arrayList            : 44 45 46
arraydecl            : 24 27 42 46 47
assignlist           : 20 22 23 24
assignment           : 7 21 98 100 106
basicTypes           : 77
block                : 1 51 94
cblock               : 90 91 91 92 93 96 97 104 105
expression           : 11 12 13 22 25 28 29 30 31 32 35 36 37 38 39 40 41 45 48 52 52 53 53 54 54 55 55 56 56 57 57 58 59 60 60 61 61 62 62 63 64 64 65 65 66 66 67 67 68 68 69 69 70 70 71 71 72 72 73 73 74 74 75 75 76 76 80 81 87 88 90 91 92 93 96 97 110 111
forloop              : 18
funcdecl             : 19
functioncall         : 14 78 112
if                   : 15 92
ifelse               : 16 93
increment            : 97 102
initialization       : 97 98 99
reassignment         : 8 43 99 101 102 103 107
start                : 0
statement            : 5 6 95
statements           : 2 3 5 50
whileloop            : 17

Parsing method: LALR

state 0

    (0) S' -> . start
    (1) start -> . block
    (2) start -> . statements
    (3) block -> . LEFTBRACE statements RIGHTBRACE
    (4) block -> . LEFTBRACE RIGHTBRACE
    (5) statements -> . statement statements
    (6) statements -> . statement
    (7) statement -> . assignment SEMICOLON
    (8) statement -> . reassignment SEMICOLON
    (9) statement -> . BREAK SEMICOLON
    (10) statement -> . CONTINUE SEMICOLON
    (11) statement -> . RETURN expression SEMICOLON
    (12) statement -> . expression SEMICOLON
    (13) statement -> . CONSOLE DOT LOG LEFTPAREN expression RIGHTPAREN SEMICOLON
    (14) statement -> . functioncall SEMICOLON
    (15) statement -> . if
    (16) statement -> . ifelse
    (17) statement -> . whileloop
    (18) statement -> . forloop
    (19) statement -> . funcdecl
    (106) statement -> . assignment
    (107) statement -> . reassignment
    (108) statement -> . BREAK
    (109) statement -> . CONTINUE
    (110) statement -> . expression
    (111) statement -> . CONSOLE DOT LOG LEFTPAREN expression RIGHTPAREN
    (112) statement -> . functioncall
    (20) assignment -> . VAR assignlist
    (21) assignment -> . LEFTPAREN assignment RIGHTPAREN
    (28) reassignment -> . ID EQ expression
    (29) reassignment -> . ID PLUSEQ expression
    (30) reassignment -> . ID MINUSEQ expression
    (31) reassignment -> . ID INTOEQ expression
    (32) reassignment -> . ID DIVEQ expression
    (33) reassignment -> . ID INCR
    (34) reassignment -> . ID DECR
    (35) reassignment -> . ID LSHIFTEQ expression
    (36) reassignment -> . ID RSHIFTEQ expression
    (37) reassignment -> . ID URSHIFTEQ expression
    (38) reassignment -> . ID ANDEQ expression
    (39) reassignment -> . ID OREQ expression
    (40) reassignment -> . ID XOREQ expression
    (41) reassignment -> . ID MODEQ expression
    (42) reassignment -> . arraydecl
    (43) reassignment -> . LEFTPAREN reassignment RIGHTPAREN
    (50) expression -> . EVAL LEFTPAREN statements RIGHTPAREN
    (51) expression -> . EVAL LEFTPAREN block RIGHTPAREN
    (52) expression -> . expression PLUS expression
    (53) expression -> . expression MINUS expression
    (54) expression -> . expression INTO expression
    (55) expression -> . expression DIVIDE expression
    (56) expression -> . expression MOD expression
    (57) expression -> . expression EXPO expression
    (58) expression -> . LEFTPAREN expression RIGHTPAREN
    (59) expression -> . NOT expression
    (60) expression -> . expression BINAND expression
    (61) expression -> . expression BINOR expression
    (62) expression -> . expression BINXOR expression
    (63) expression -> . BINNOT expression
    (64) expression -> . expression LT expression
    (65) expression -> . expression GT expression
    (66) expression -> . expression DOUBLEEQ expression
    (67) expression -> . expression NOTEQUAL expression
    (68) expression -> . expression LTE expression
    (69) expression -> . expression GTE expression
    (70) expression -> . expression STREQUAL expression
    (71) expression -> . expression STRNEQUAL expression
    (72) expression -> . expression AND expression
    (73) expression -> . expression OR expression
    (74) expression -> . expression LSHIFT expression
    (75) expression -> . expression RSHIFT expression
    (76) expression -> . expression URSHIFT expression
    (77) expression -> . basicTypes
    (78) expression -> . functioncall
    (79) expression -> . arrayCall
    (80) expression -> . TYPEOF expression
    (86) functioncall -> . ID LEFTPAREN argList RIGHTPAREN
    (90) if -> . IF expression cblock
    (91) ifelse -> . IF expression cblock ELSE cblock
    (92) ifelse -> . IF expression cblock ELSE if
    (93) ifelse -> . IF expression cblock ELSE ifelse
    (96) whileloop -> . WHILE LEFTPAREN expression RIGHTPAREN cblock
    (97) forloop -> . FOR LEFTPAREN initialization SEMICOLON expression SEMICOLON increment RIGHTPAREN cblock
    (104) funcdecl -> . FUNCTION ID LEFTPAREN argList RIGHTPAREN cblock
    (105) funcdecl -> . VAR ID EQ FUNCTION LEFTPAREN argList RIGHTPAREN cblock SEMICOLON
    (44) arraydecl -> . ID EQ LEFTBRACKET arrayList RIGHTBRACKET
    (82) basicTypes -> . NUMBER
    (83) basicTypes -> . STRING
    (84) basicTypes -> . ID
    (85) basicTypes -> . UNDEFINED
    (81) arrayCall -> . ID LEFTBRACKET expression RIGHTBRACKET

    LEFTBRACE       shift and go to state 24
    BREAK           shift and go to state 27
    CONTINUE        shift and go to state 28
    RETURN          shift and go to state 5
    CONSOLE         shift and go to state 17
    VAR             shift and go to state 22
    LEFTPAREN       shift and go to state 19
    ID              shift and go to state 23
    EVAL            shift and go to state 20
    NOT             shift and go to state 32
    BINNOT          shift and go to state 25
    TYPEOF          shift and go to state 15
    IF              shift and go to state 3
    WHILE           shift and go to state 4
    FOR             shift and go to state 9
    FUNCTION        shift and go to state 31
    NUMBER          shift and go to state 2
    STRING          shift and go to state 14
    UNDEFINED       shift and go to state 21

    statements                     shift and go to state 1
    if                             shift and go to state 6
    whileloop                      shift and go to state 7
    start                          shift and go to state 11
    arrayCall                      shift and go to state 10
    ifelse                         shift and go to state 12
    statement                      shift and go to state 13
    arraydecl                      shift and go to state 30
    forloop                        shift and go to state 16
    assignment                     shift and go to state 18
    funcdecl                       shift and go to state 26
    reassignment                   shift and go to state 8
    functioncall                   shift and go to state 29
    expression                     shift and go to state 34
    block                          shift and go to state 35
    basicTypes                     shift and go to state 33

state 1

    (2) start -> statements .

    $end            reduce using rule 2 (start -> statements .)


state 2

    (82) basicTypes -> NUMBER .

    PLUS            reduce using rule 82 (basicTypes -> NUMBER .)
    MINUS           reduce using rule 82 (basicTypes -> NUMBER .)
    INTO            reduce using rule 82 (basicTypes -> NUMBER .)
    DIVIDE          reduce using rule 82 (basicTypes -> NUMBER .)
    MOD             reduce using rule 82 (basicTypes -> NUMBER .)
    EXPO            reduce using rule 82 (basicTypes -> NUMBER .)
    BINAND          reduce using rule 82 (basicTypes -> NUMBER .)
    BINOR           reduce using rule 82 (basicTypes -> NUMBER .)
    BINXOR          reduce using rule 82 (basicTypes -> NUMBER .)
    LT              reduce using rule 82 (basicTypes -> NUMBER .)
    GT              reduce using rule 82 (basicTypes -> NUMBER .)
    DOUBLEEQ        reduce using rule 82 (basicTypes -> NUMBER .)
    NOTEQUAL        reduce using rule 82 (basicTypes -> NUMBER .)
    LTE             reduce using rule 82 (basicTypes -> NUMBER .)
    GTE             reduce using rule 82 (basicTypes -> NUMBER .)
    STREQUAL        reduce using rule 82 (basicTypes -> NUMBER .)
    STRNEQUAL       reduce using rule 82 (basicTypes -> NUMBER .)
    AND             reduce using rule 82 (basicTypes -> NUMBER .)
    OR              reduce using rule 82 (basicTypes -> NUMBER .)
    LSHIFT          reduce using rule 82 (basicTypes -> NUMBER .)
    RSHIFT          reduce using rule 82 (basicTypes -> NUMBER .)
    URSHIFT         reduce using rule 82 (basicTypes -> NUMBER .)
    SEMICOLON       reduce using rule 82 (basicTypes -> NUMBER .)
    BREAK           reduce using rule 82 (basicTypes -> NUMBER .)
    CONTINUE        reduce using rule 82 (basicTypes -> NUMBER .)
    RETURN          reduce using rule 82 (basicTypes -> NUMBER .)
    CONSOLE         reduce using rule 82 (basicTypes -> NUMBER .)
    VAR             reduce using rule 82 (basicTypes -> NUMBER .)
    LEFTPAREN       reduce using rule 82 (basicTypes -> NUMBER .)
    ID              reduce using rule 82 (basicTypes -> NUMBER .)
    EVAL            reduce using rule 82 (basicTypes -> NUMBER .)
    NOT             reduce using rule 82 (basicTypes -> NUMBER .)
    BINNOT          reduce using rule 82 (basicTypes -> NUMBER .)
    TYPEOF          reduce using rule 82 (basicTypes -> NUMBER .)
    IF              reduce using rule 82 (basicTypes -> NUMBER .)
    WHILE           reduce using rule 82 (basicTypes -> NUMBER .)
    FOR             reduce using rule 82 (basicTypes -> NUMBER .)
    FUNCTION        reduce using rule 82 (basicTypes -> NUMBER .)
    NUMBER          reduce using rule 82 (basicTypes -> NUMBER .)
    STRING          reduce using rule 82 (basicTypes -> NUMBER .)
    UNDEFINED       reduce using rule 82 (basicTypes -> NUMBER .)
    $end            reduce using rule 82 (basicTypes -> NUMBER .)
    RIGHTBRACE      reduce using rule 82 (basicTypes -> NUMBER .)
    RIGHTPAREN      reduce using rule 82 (basicTypes -> NUMBER .)
    ELSE            reduce using rule 82 (basicTypes -> NUMBER .)
    LEFTBRACE       reduce using rule 82 (basicTypes -> NUMBER .)
    RIGHTBRACKET    reduce using rule 82 (basicTypes -> NUMBER .)
    COMMA           reduce using rule 82 (basicTypes -> NUMBER .)


state 3

    (90) if -> IF . expression cblock
    (91) ifelse -> IF . expression cblock ELSE cblock
    (92) ifelse -> IF . expression cblock ELSE if
    (93) ifelse -> IF . expression cblock ELSE ifelse
    (50) expression -> . EVAL LEFTPAREN statements RIGHTPAREN
    (51) expression -> . EVAL LEFTPAREN block RIGHTPAREN
    (52) expression -> . expression PLUS expression
    (53) expression -> . expression MINUS expression
    (54) expression -> . expression INTO expression
    (55) expression -> . expression DIVIDE expression
    (56) expression -> . expression MOD expression
    (57) expression -> . expression EXPO expression
    (58) expression -> . LEFTPAREN expression RIGHTPAREN
    (59) expression -> . NOT expression
    (60) expression -> . expression BINAND expression
    (61) expression -> . expression BINOR expression
    (62) expression -> . expression BINXOR expression
    (63) expression -> . BINNOT expression
    (64) expression -> . expression LT expression
    (65) expression -> . expression GT expression
    (66) expression -> . expression DOUBLEEQ expression
    (67) expression -> . expression NOTEQUAL expression
    (68) expression -> . expression LTE expression
    (69) expression -> . expression GTE expression
    (70) expression -> . expression STREQUAL expression
    (71) expression -> . expression STRNEQUAL expression
    (72) expression -> . expression AND expression
    (73) expression -> . expression OR expression
    (74) expression -> . expression LSHIFT expression
    (75) expression -> . expression RSHIFT expression
    (76) expression -> . expression URSHIFT expression
    (77) expression -> . basicTypes
    (78) expression -> . functioncall
    (79) expression -> . arrayCall
    (80) expression -> . TYPEOF expression
    (82) basicTypes -> . NUMBER
    (83) basicTypes -> . STRING
    (84) basicTypes -> . ID
    (85) basicTypes -> . UNDEFINED
    (86) functioncall -> . ID LEFTPAREN argList RIGHTPAREN
    (81) arrayCall -> . ID LEFTBRACKET expression RIGHTBRACKET

    EVAL            shift and go to state 20
    LEFTPAREN       shift and go to state 36
    NOT             shift and go to state 32
    BINNOT          shift and go to state 25
    TYPEOF          shift and go to state 15
    NUMBER          shift and go to state 2
    STRING          shift and go to state 14
    ID              shift and go to state 37
    UNDEFINED       shift and go to state 21

    expression                     shift and go to state 39
    arrayCall                      shift and go to state 10
    functioncall                   shift and go to state 38
    basicTypes                     shift and go to state 33

state 4

    (96) whileloop -> WHILE . LEFTPAREN expression RIGHTPAREN cblock

    LEFTPAREN       shift and go to state 40


state 5

    (11) statement -> RETURN . expression SEMICOLON
    (50) expression -> . EVAL LEFTPAREN statements RIGHTPAREN
    (51) expression -> . EVAL LEFTPAREN block RIGHTPAREN
    (52) expression -> . expression PLUS expression
    (53) expression -> . expression MINUS expression
    (54) expression -> . expression INTO expression
    (55) expression -> . expression DIVIDE expression
    (56) expression -> . expression MOD expression
    (57) expression -> . expression EXPO expression
    (58) expression -> . LEFTPAREN expression RIGHTPAREN
    (59) expression -> . NOT expression
    (60) expression -> . expression BINAND expression
    (61) expression -> . expression BINOR expression
    (62) expression -> . expression BINXOR expression
    (63) expression -> . BINNOT expression
    (64) expression -> . expression LT expression
    (65) expression -> . expression GT expression
    (66) expression -> . expression DOUBLEEQ expression
    (67) expression -> . expression NOTEQUAL expression
    (68) expression -> . expression LTE expression
    (69) expression -> . expression GTE expression
    (70) expression -> . expression STREQUAL expression
    (71) expression -> . expression STRNEQUAL expression
    (72) expression -> . expression AND expression
    (73) expression -> . expression OR expression
    (74) expression -> . expression LSHIFT expression
    (75) expression -> . expression RSHIFT expression
    (76) expression -> . expression URSHIFT expression
    (77) expression -> . basicTypes
    (78) expression -> . functioncall
    (79) expression -> . arrayCall
    (80) expression -> . TYPEOF expression
    (82) basicTypes -> . NUMBER
    (83) basicTypes -> . STRING
    (84) basicTypes -> . ID
    (85) basicTypes -> . UNDEFINED
    (86) functioncall -> . ID LEFTPAREN argList RIGHTPAREN
    (81) arrayCall -> . ID LEFTBRACKET expression RIGHTBRACKET

    EVAL            shift and go to state 20
    LEFTPAREN       shift and go to state 36
    NOT             shift and go to state 32
    BINNOT          shift and go to state 25
    TYPEOF          shift and go to state 15
    NUMBER          shift and go to state 2
    STRING          shift and go to state 14
    ID              shift and go to state 37
    UNDEFINED       shift and go to state 21

    arrayCall                      shift and go to state 10
    functioncall                   shift and go to state 38
    expression                     shift and go to state 41
    basicTypes                     shift and go to state 33

state 6

    (15) statement -> if .

    ELSE            reduce using rule 15 (statement -> if .)
    BREAK           reduce using rule 15 (statement -> if .)
    CONTINUE        reduce using rule 15 (statement -> if .)
    RETURN          reduce using rule 15 (statement -> if .)
    CONSOLE         reduce using rule 15 (statement -> if .)
    VAR             reduce using rule 15 (statement -> if .)
    LEFTPAREN       reduce using rule 15 (statement -> if .)
    ID              reduce using rule 15 (statement -> if .)
    EVAL            reduce using rule 15 (statement -> if .)
    NOT             reduce using rule 15 (statement -> if .)
    BINNOT          reduce using rule 15 (statement -> if .)
    TYPEOF          reduce using rule 15 (statement -> if .)
    IF              reduce using rule 15 (statement -> if .)
    WHILE           reduce using rule 15 (statement -> if .)
    FOR             reduce using rule 15 (statement -> if .)
    FUNCTION        reduce using rule 15 (statement -> if .)
    NUMBER          reduce using rule 15 (statement -> if .)
    STRING          reduce using rule 15 (statement -> if .)
    UNDEFINED       reduce using rule 15 (statement -> if .)
    $end            reduce using rule 15 (statement -> if .)
    RIGHTBRACE      reduce using rule 15 (statement -> if .)
    RIGHTPAREN      reduce using rule 15 (statement -> if .)
    SEMICOLON       reduce using rule 15 (statement -> if .)


state 7

    (17) statement -> whileloop .

    ELSE            reduce using rule 17 (statement -> whileloop .)
    BREAK           reduce using rule 17 (statement -> whileloop .)
    CONTINUE        reduce using rule 17 (statement -> whileloop .)
    RETURN          reduce using rule 17 (statement -> whileloop .)
    CONSOLE         reduce using rule 17 (statement -> whileloop .)
    VAR             reduce using rule 17 (statement -> whileloop .)
    LEFTPAREN       reduce using rule 17 (statement -> whileloop .)
    ID              reduce using rule 17 (statement -> whileloop .)
    EVAL            reduce using rule 17 (statement -> whileloop .)
    NOT             reduce using rule 17 (statement -> whileloop .)
    BINNOT          reduce using rule 17 (statement -> whileloop .)
    TYPEOF          reduce using rule 17 (statement -> whileloop .)
    IF              reduce using rule 17 (statement -> whileloop .)
    WHILE           reduce using rule 17 (statement -> whileloop .)
    FOR             reduce using rule 17 (statement -> whileloop .)
    FUNCTION        reduce using rule 17 (statement -> whileloop .)
    NUMBER          reduce using rule 17 (statement -> whileloop .)
    STRING          reduce using rule 17 (statement -> whileloop .)
    UNDEFINED       reduce using rule 17 (statement -> whileloop .)
    $end            reduce using rule 17 (statement -> whileloop .)
    RIGHTBRACE      reduce using rule 17 (statement -> whileloop .)
    RIGHTPAREN      reduce using rule 17 (statement -> whileloop .)
    SEMICOLON       reduce using rule 17 (statement -> whileloop .)


state 8

    (8) statement -> reassignment . SEMICOLON
    (107) statement -> reassignment .

  ! shift/reduce conflict for SEMICOLON resolved as shift
    SEMICOLON       shift and go to state 42
    ELSE            reduce using rule 107 (statement -> reassignment .)
    BREAK           reduce using rule 107 (statement -> reassignment .)
    CONTINUE        reduce using rule 107 (statement -> reassignment .)
    RETURN          reduce using rule 107 (statement -> reassignment .)
    CONSOLE         reduce using rule 107 (statement -> reassignment .)
    VAR             reduce using rule 107 (statement -> reassignment .)
    LEFTPAREN       reduce using rule 107 (statement -> reassignment .)
    ID              reduce using rule 107 (statement -> reassignment .)
    EVAL            reduce using rule 107 (statement -> reassignment .)
    NOT             reduce using rule 107 (statement -> reassignment .)
    BINNOT          reduce using rule 107 (statement -> reassignment .)
    TYPEOF          reduce using rule 107 (statement -> reassignment .)
    IF              reduce using rule 107 (statement -> reassignment .)
    WHILE           reduce using rule 107 (statement -> reassignment .)
    FOR             reduce using rule 107 (statement -> reassignment .)
    FUNCTION        reduce using rule 107 (statement -> reassignment .)
    NUMBER          reduce using rule 107 (statement -> reassignment .)
    STRING          reduce using rule 107 (statement -> reassignment .)
    UNDEFINED       reduce using rule 107 (statement -> reassignment .)
    $end            reduce using rule 107 (statement -> reassignment .)
    RIGHTBRACE      reduce using rule 107 (statement -> reassignment .)
    RIGHTPAREN      reduce using rule 107 (statement -> reassignment .)

  ! SEMICOLON       [ reduce using rule 107 (statement -> reassignment .) ]


state 9

    (97) forloop -> FOR . LEFTPAREN initialization SEMICOLON expression SEMICOLON increment RIGHTPAREN cblock

    LEFTPAREN       shift and go to state 43


state 10

    (79) expression -> arrayCall .

    PLUS            reduce using rule 79 (expression -> arrayCall .)
    MINUS           reduce using rule 79 (expression -> arrayCall .)
    INTO            reduce using rule 79 (expression -> arrayCall .)
    DIVIDE          reduce using rule 79 (expression -> arrayCall .)
    MOD             reduce using rule 79 (expression -> arrayCall .)
    EXPO            reduce using rule 79 (expression -> arrayCall .)
    BINAND          reduce using rule 79 (expression -> arrayCall .)
    BINOR           reduce using rule 79 (expression -> arrayCall .)
    BINXOR          reduce using rule 79 (expression -> arrayCall .)
    LT              reduce using rule 79 (expression -> arrayCall .)
    GT              reduce using rule 79 (expression -> arrayCall .)
    DOUBLEEQ        reduce using rule 79 (expression -> arrayCall .)
    NOTEQUAL        reduce using rule 79 (expression -> arrayCall .)
    LTE             reduce using rule 79 (expression -> arrayCall .)
    GTE             reduce using rule 79 (expression -> arrayCall .)
    STREQUAL        reduce using rule 79 (expression -> arrayCall .)
    STRNEQUAL       reduce using rule 79 (expression -> arrayCall .)
    AND             reduce using rule 79 (expression -> arrayCall .)
    OR              reduce using rule 79 (expression -> arrayCall .)
    LSHIFT          reduce using rule 79 (expression -> arrayCall .)
    RSHIFT          reduce using rule 79 (expression -> arrayCall .)
    URSHIFT         reduce using rule 79 (expression -> arrayCall .)
    SEMICOLON       reduce using rule 79 (expression -> arrayCall .)
    BREAK           reduce using rule 79 (expression -> arrayCall .)
    CONTINUE        reduce using rule 79 (expression -> arrayCall .)
    RETURN          reduce using rule 79 (expression -> arrayCall .)
    CONSOLE         reduce using rule 79 (expression -> arrayCall .)
    VAR             reduce using rule 79 (expression -> arrayCall .)
    LEFTPAREN       reduce using rule 79 (expression -> arrayCall .)
    ID              reduce using rule 79 (expression -> arrayCall .)
    EVAL            reduce using rule 79 (expression -> arrayCall .)
    NOT             reduce using rule 79 (expression -> arrayCall .)
    BINNOT          reduce using rule 79 (expression -> arrayCall .)
    TYPEOF          reduce using rule 79 (expression -> arrayCall .)
    IF              reduce using rule 79 (expression -> arrayCall .)
    WHILE           reduce using rule 79 (expression -> arrayCall .)
    FOR             reduce using rule 79 (expression -> arrayCall .)
    FUNCTION        reduce using rule 79 (expression -> arrayCall .)
    NUMBER          reduce using rule 79 (expression -> arrayCall .)
    STRING          reduce using rule 79 (expression -> arrayCall .)
    UNDEFINED       reduce using rule 79 (expression -> arrayCall .)
    $end            reduce using rule 79 (expression -> arrayCall .)
    RIGHTBRACE      reduce using rule 79 (expression -> arrayCall .)
    RIGHTPAREN      reduce using rule 79 (expression -> arrayCall .)
    ELSE            reduce using rule 79 (expression -> arrayCall .)
    LEFTBRACE       reduce using rule 79 (expression -> arrayCall .)
    RIGHTBRACKET    reduce using rule 79 (expression -> arrayCall .)
    COMMA           reduce using rule 79 (expression -> arrayCall .)


state 11

    (0) S' -> start .



state 12

    (16) statement -> ifelse .

    ELSE            reduce using rule 16 (statement -> ifelse .)
    BREAK           reduce using rule 16 (statement -> ifelse .)
    CONTINUE        reduce using rule 16 (statement -> ifelse .)
    RETURN          reduce using rule 16 (statement -> ifelse .)
    CONSOLE         reduce using rule 16 (statement -> ifelse .)
    VAR             reduce using rule 16 (statement -> ifelse .)
    LEFTPAREN       reduce using rule 16 (statement -> ifelse .)
    ID              reduce using rule 16 (statement -> ifelse .)
    EVAL            reduce using rule 16 (statement -> ifelse .)
    NOT             reduce using rule 16 (statement -> ifelse .)
    BINNOT          reduce using rule 16 (statement -> ifelse .)
    TYPEOF          reduce using rule 16 (statement -> ifelse .)
    IF              reduce using rule 16 (statement -> ifelse .)
    WHILE           reduce using rule 16 (statement -> ifelse .)
    FOR             reduce using rule 16 (statement -> ifelse .)
    FUNCTION        reduce using rule 16 (statement -> ifelse .)
    NUMBER          reduce using rule 16 (statement -> ifelse .)
    STRING          reduce using rule 16 (statement -> ifelse .)
    UNDEFINED       reduce using rule 16 (statement -> ifelse .)
    $end            reduce using rule 16 (statement -> ifelse .)
    RIGHTBRACE      reduce using rule 16 (statement -> ifelse .)
    RIGHTPAREN      reduce using rule 16 (statement -> ifelse .)
    SEMICOLON       reduce using rule 16 (statement -> ifelse .)


state 13

    (5) statements -> statement . statements
    (6) statements -> statement .
    (5) statements -> . statement statements
    (6) statements -> . statement
    (7) statement -> . assignment SEMICOLON
    (8) statement -> . reassignment SEMICOLON
    (9) statement -> . BREAK SEMICOLON
    (10) statement -> . CONTINUE SEMICOLON
    (11) statement -> . RETURN expression SEMICOLON
    (12) statement -> . expression SEMICOLON
    (13) statement -> . CONSOLE DOT LOG LEFTPAREN expression RIGHTPAREN SEMICOLON
    (14) statement -> . functioncall SEMICOLON
    (15) statement -> . if
    (16) statement -> . ifelse
    (17) statement -> . whileloop
    (18) statement -> . forloop
    (19) statement -> . funcdecl
    (106) statement -> . assignment
    (107) statement -> . reassignment
    (108) statement -> . BREAK
    (109) statement -> . CONTINUE
    (110) statement -> . expression
    (111) statement -> . CONSOLE DOT LOG LEFTPAREN expression RIGHTPAREN
    (112) statement -> . functioncall
    (20) assignment -> . VAR assignlist
    (21) assignment -> . LEFTPAREN assignment RIGHTPAREN
    (28) reassignment -> . ID EQ expression
    (29) reassignment -> . ID PLUSEQ expression
    (30) reassignment -> . ID MINUSEQ expression
    (31) reassignment -> . ID INTOEQ expression
    (32) reassignment -> . ID DIVEQ expression
    (33) reassignment -> . ID INCR
    (34) reassignment -> . ID DECR
    (35) reassignment -> . ID LSHIFTEQ expression
    (36) reassignment -> . ID RSHIFTEQ expression
    (37) reassignment -> . ID URSHIFTEQ expression
    (38) reassignment -> . ID ANDEQ expression
    (39) reassignment -> . ID OREQ expression
    (40) reassignment -> . ID XOREQ expression
    (41) reassignment -> . ID MODEQ expression
    (42) reassignment -> . arraydecl
    (43) reassignment -> . LEFTPAREN reassignment RIGHTPAREN
    (50) expression -> . EVAL LEFTPAREN statements RIGHTPAREN
    (51) expression -> . EVAL LEFTPAREN block RIGHTPAREN
    (52) expression -> . expression PLUS expression
    (53) expression -> . expression MINUS expression
    (54) expression -> . expression INTO expression
    (55) expression -> . expression DIVIDE expression
    (56) expression -> . expression MOD expression
    (57) expression -> . expression EXPO expression
    (58) expression -> . LEFTPAREN expression RIGHTPAREN
    (59) expression -> . NOT expression
    (60) expression -> . expression BINAND expression
    (61) expression -> . expression BINOR expression
    (62) expression -> . expression BINXOR expression
    (63) expression -> . BINNOT expression
    (64) expression -> . expression LT expression
    (65) expression -> . expression GT expression
    (66) expression -> . expression DOUBLEEQ expression
    (67) expression -> . expression NOTEQUAL expression
    (68) expression -> . expression LTE expression
    (69) expression -> . expression GTE expression
    (70) expression -> . expression STREQUAL expression
    (71) expression -> . expression STRNEQUAL expression
    (72) expression -> . expression AND expression
    (73) expression -> . expression OR expression
    (74) expression -> . expression LSHIFT expression
    (75) expression -> . expression RSHIFT expression
    (76) expression -> . expression URSHIFT expression
    (77) expression -> . basicTypes
    (78) expression -> . functioncall
    (79) expression -> . arrayCall
    (80) expression -> . TYPEOF expression
    (86) functioncall -> . ID LEFTPAREN argList RIGHTPAREN
    (90) if -> . IF expression cblock
    (91) ifelse -> . IF expression cblock ELSE cblock
    (92) ifelse -> . IF expression cblock ELSE if
    (93) ifelse -> . IF expression cblock ELSE ifelse
    (96) whileloop -> . WHILE LEFTPAREN expression RIGHTPAREN cblock
    (97) forloop -> . FOR LEFTPAREN initialization SEMICOLON expression SEMICOLON increment RIGHTPAREN cblock
    (104) funcdecl -> . FUNCTION ID LEFTPAREN argList RIGHTPAREN cblock
    (105) funcdecl -> . VAR ID EQ FUNCTION LEFTPAREN argList RIGHTPAREN cblock SEMICOLON
    (44) arraydecl -> . ID EQ LEFTBRACKET arrayList RIGHTBRACKET
    (82) basicTypes -> . NUMBER
    (83) basicTypes -> . STRING
    (84) basicTypes -> . ID
    (85) basicTypes -> . UNDEFINED
    (81) arrayCall -> . ID LEFTBRACKET expression RIGHTBRACKET

    $end            reduce using rule 6 (statements -> statement .)
    RIGHTBRACE      reduce using rule 6 (statements -> statement .)
    RIGHTPAREN      reduce using rule 6 (statements -> statement .)
    BREAK           shift and go to state 27
    CONTINUE        shift and go to state 28
    RETURN          shift and go to state 5
    CONSOLE         shift and go to state 17
    VAR             shift and go to state 22
    LEFTPAREN       shift and go to state 19
    ID              shift and go to state 23
    EVAL            shift and go to state 20
    NOT             shift and go to state 32
    BINNOT          shift and go to state 25
    TYPEOF          shift and go to state 15
    IF              shift and go to state 3
    WHILE           shift and go to state 4
    FOR             shift and go to state 9
    FUNCTION        shift and go to state 31
    NUMBER          shift and go to state 2
    STRING          shift and go to state 14
    UNDEFINED       shift and go to state 21

    whileloop                      shift and go to state 7
    forloop                        shift and go to state 16
    statements                     shift and go to state 44
    assignment                     shift and go to state 18
    funcdecl                       shift and go to state 26
    reassignment                   shift and go to state 8
    arrayCall                      shift and go to state 10
    functioncall                   shift and go to state 29
    statement                      shift and go to state 13
    ifelse                         shift and go to state 12
    basicTypes                     shift and go to state 33
    expression                     shift and go to state 34
    arraydecl                      shift and go to state 30
    if                             shift and go to state 6

state 14

    (83) basicTypes -> STRING .

    PLUS            reduce using rule 83 (basicTypes -> STRING .)
    MINUS           reduce using rule 83 (basicTypes -> STRING .)
    INTO            reduce using rule 83 (basicTypes -> STRING .)
    DIVIDE          reduce using rule 83 (basicTypes -> STRING .)
    MOD             reduce using rule 83 (basicTypes -> STRING .)
    EXPO            reduce using rule 83 (basicTypes -> STRING .)
    BINAND          reduce using rule 83 (basicTypes -> STRING .)
    BINOR           reduce using rule 83 (basicTypes -> STRING .)
    BINXOR          reduce using rule 83 (basicTypes -> STRING .)
    LT              reduce using rule 83 (basicTypes -> STRING .)
    GT              reduce using rule 83 (basicTypes -> STRING .)
    DOUBLEEQ        reduce using rule 83 (basicTypes -> STRING .)
    NOTEQUAL        reduce using rule 83 (basicTypes -> STRING .)
    LTE             reduce using rule 83 (basicTypes -> STRING .)
    GTE             reduce using rule 83 (basicTypes -> STRING .)
    STREQUAL        reduce using rule 83 (basicTypes -> STRING .)
    STRNEQUAL       reduce using rule 83 (basicTypes -> STRING .)
    AND             reduce using rule 83 (basicTypes -> STRING .)
    OR              reduce using rule 83 (basicTypes -> STRING .)
    LSHIFT          reduce using rule 83 (basicTypes -> STRING .)
    RSHIFT          reduce using rule 83 (basicTypes -> STRING .)
    URSHIFT         reduce using rule 83 (basicTypes -> STRING .)
    SEMICOLON       reduce using rule 83 (basicTypes -> STRING .)
    BREAK           reduce using rule 83 (basicTypes -> STRING .)
    CONTINUE        reduce using rule 83 (basicTypes -> STRING .)
    RETURN          reduce using rule 83 (basicTypes -> STRING .)
    CONSOLE         reduce using rule 83 (basicTypes -> STRING .)
    VAR             reduce using rule 83 (basicTypes -> STRING .)
    LEFTPAREN       reduce using rule 83 (basicTypes -> STRING .)
    ID              reduce using rule 83 (basicTypes -> STRING .)
    EVAL            reduce using rule 83 (basicTypes -> STRING .)
    NOT             reduce using rule 83 (basicTypes -> STRING .)
    BINNOT          reduce using rule 83 (basicTypes -> STRING .)
    TYPEOF          reduce using rule 83 (basicTypes -> STRING .)
    IF              reduce using rule 83 (basicTypes -> STRING .)
    WHILE           reduce using rule 83 (basicTypes -> STRING .)
    FOR             reduce using rule 83 (basicTypes -> STRING .)
    FUNCTION        reduce using rule 83 (basicTypes -> STRING .)
    NUMBER          reduce using rule 83 (basicTypes -> STRING .)
    STRING          reduce using rule 83 (basicTypes -> STRING .)
    UNDEFINED       reduce using rule 83 (basicTypes -> STRING .)
    $end            reduce using rule 83 (basicTypes -> STRING .)
    RIGHTBRACE      reduce using rule 83 (basicTypes -> STRING .)
    RIGHTPAREN      reduce using rule 83 (basicTypes -> STRING .)
    ELSE            reduce using rule 83 (basicTypes -> STRING .)
    LEFTBRACE       reduce using rule 83 (basicTypes -> STRING .)
    RIGHTBRACKET    reduce using rule 83 (basicTypes -> STRING .)
    COMMA           reduce using rule 83 (basicTypes -> STRING .)


state 15

    (80) expression -> TYPEOF . expression
    (50) expression -> . EVAL LEFTPAREN statements RIGHTPAREN
    (51) expression -> . EVAL LEFTPAREN block RIGHTPAREN
    (52) expression -> . expression PLUS expression
    (53) expression -> . expression MINUS expression
    (54) expression -> . expression INTO expression
    (55) expression -> . expression DIVIDE expression
    (56) expression -> . expression MOD expression
    (57) expression -> . expression EXPO expression
    (58) expression -> . LEFTPAREN expression RIGHTPAREN
    (59) expression -> . NOT expression
    (60) expression -> . expression BINAND expression
    (61) expression -> . expression BINOR expression
    (62) expression -> . expression BINXOR expression
    (63) expression -> . BINNOT expression
    (64) expression -> . expression LT expression
    (65) expression -> . expression GT expression
    (66) expression -> . expression DOUBLEEQ expression
    (67) expression -> . expression NOTEQUAL expression
    (68) expression -> . expression LTE expression
    (69) expression -> . expression GTE expression
    (70) expression -> . expression STREQUAL expression
    (71) expression -> . expression STRNEQUAL expression
    (72) expression -> . expression AND expression
    (73) expression -> . expression OR expression
    (74) expression -> . expression LSHIFT expression
    (75) expression -> . expression RSHIFT expression
    (76) expression -> . expression URSHIFT expression
    (77) expression -> . basicTypes
    (78) expression -> . functioncall
    (79) expression -> . arrayCall
    (80) expression -> . TYPEOF expression
    (82) basicTypes -> . NUMBER
    (83) basicTypes -> . STRING
    (84) basicTypes -> . ID
    (85) basicTypes -> . UNDEFINED
    (86) functioncall -> . ID LEFTPAREN argList RIGHTPAREN
    (81) arrayCall -> . ID LEFTBRACKET expression RIGHTBRACKET

    EVAL            shift and go to state 20
    LEFTPAREN       shift and go to state 36
    NOT             shift and go to state 32
    BINNOT          shift and go to state 25
    TYPEOF          shift and go to state 15
    NUMBER          shift and go to state 2
    STRING          shift and go to state 14
    ID              shift and go to state 37
    UNDEFINED       shift and go to state 21

    arrayCall                      shift and go to state 10
    functioncall                   shift and go to state 38
    expression                     shift and go to state 45
    basicTypes                     shift and go to state 33

state 16

    (18) statement -> forloop .

    ELSE            reduce using rule 18 (statement -> forloop .)
    BREAK           reduce using rule 18 (statement -> forloop .)
    CONTINUE        reduce using rule 18 (statement -> forloop .)
    RETURN          reduce using rule 18 (statement -> forloop .)
    CONSOLE         reduce using rule 18 (statement -> forloop .)
    VAR             reduce using rule 18 (statement -> forloop .)
    LEFTPAREN       reduce using rule 18 (statement -> forloop .)
    ID              reduce using rule 18 (statement -> forloop .)
    EVAL            reduce using rule 18 (statement -> forloop .)
    NOT             reduce using rule 18 (statement -> forloop .)
    BINNOT          reduce using rule 18 (statement -> forloop .)
    TYPEOF          reduce using rule 18 (statement -> forloop .)
    IF              reduce using rule 18 (statement -> forloop .)
    WHILE           reduce using rule 18 (statement -> forloop .)
    FOR             reduce using rule 18 (statement -> forloop .)
    FUNCTION        reduce using rule 18 (statement -> forloop .)
    NUMBER          reduce using rule 18 (statement -> forloop .)
    STRING          reduce using rule 18 (statement -> forloop .)
    UNDEFINED       reduce using rule 18 (statement -> forloop .)
    $end            reduce using rule 18 (statement -> forloop .)
    RIGHTBRACE      reduce using rule 18 (statement -> forloop .)
    RIGHTPAREN      reduce using rule 18 (statement -> forloop .)
    SEMICOLON       reduce using rule 18 (statement -> forloop .)


state 17

    (13) statement -> CONSOLE . DOT LOG LEFTPAREN expression RIGHTPAREN SEMICOLON
    (111) statement -> CONSOLE . DOT LOG LEFTPAREN expression RIGHTPAREN

    DOT             shift and go to state 46


state 18

    (7) statement -> assignment . SEMICOLON
    (106) statement -> assignment .

  ! shift/reduce conflict for SEMICOLON resolved as shift
    SEMICOLON       shift and go to state 47
    ELSE            reduce using rule 106 (statement -> assignment .)
    BREAK           reduce using rule 106 (statement -> assignment .)
    CONTINUE        reduce using rule 106 (statement -> assignment .)
    RETURN          reduce using rule 106 (statement -> assignment .)
    CONSOLE         reduce using rule 106 (statement -> assignment .)
    VAR             reduce using rule 106 (statement -> assignment .)
    LEFTPAREN       reduce using rule 106 (statement -> assignment .)
    ID              reduce using rule 106 (statement -> assignment .)
    EVAL            reduce using rule 106 (statement -> assignment .)
    NOT             reduce using rule 106 (statement -> assignment .)
    BINNOT          reduce using rule 106 (statement -> assignment .)
    TYPEOF          reduce using rule 106 (statement -> assignment .)
    IF              reduce using rule 106 (statement -> assignment .)
    WHILE           reduce using rule 106 (statement -> assignment .)
    FOR             reduce using rule 106 (statement -> assignment .)
    FUNCTION        reduce using rule 106 (statement -> assignment .)
    NUMBER          reduce using rule 106 (statement -> assignment .)
    STRING          reduce using rule 106 (statement -> assignment .)
    UNDEFINED       reduce using rule 106 (statement -> assignment .)
    $end            reduce using rule 106 (statement -> assignment .)
    RIGHTBRACE      reduce using rule 106 (statement -> assignment .)
    RIGHTPAREN      reduce using rule 106 (statement -> assignment .)

  ! SEMICOLON       [ reduce using rule 106 (statement -> assignment .) ]


state 19

    (21) assignment -> LEFTPAREN . assignment RIGHTPAREN
    (43) reassignment -> LEFTPAREN . reassignment RIGHTPAREN
    (58) expression -> LEFTPAREN . expression RIGHTPAREN
    (20) assignment -> . VAR assignlist
    (21) assignment -> . LEFTPAREN assignment RIGHTPAREN
    (28) reassignment -> . ID EQ expression
    (29) reassignment -> . ID PLUSEQ expression
    (30) reassignment -> . ID MINUSEQ expression
    (31) reassignment -> . ID INTOEQ expression
    (32) reassignment -> . ID DIVEQ expression
    (33) reassignment -> . ID INCR
    (34) reassignment -> . ID DECR
    (35) reassignment -> . ID LSHIFTEQ expression
    (36) reassignment -> . ID RSHIFTEQ expression
    (37) reassignment -> . ID URSHIFTEQ expression
    (38) reassignment -> . ID ANDEQ expression
    (39) reassignment -> . ID OREQ expression
    (40) reassignment -> . ID XOREQ expression
    (41) reassignment -> . ID MODEQ expression
    (42) reassignment -> . arraydecl
    (43) reassignment -> . LEFTPAREN reassignment RIGHTPAREN
    (50) expression -> . EVAL LEFTPAREN statements RIGHTPAREN
    (51) expression -> . EVAL LEFTPAREN block RIGHTPAREN
    (52) expression -> . expression PLUS expression
    (53) expression -> . expression MINUS expression
    (54) expression -> . expression INTO expression
    (55) expression -> . expression DIVIDE expression
    (56) expression -> . expression MOD expression
    (57) expression -> . expression EXPO expression
    (58) expression -> . LEFTPAREN expression RIGHTPAREN
    (59) expression -> . NOT expression
    (60) expression -> . expression BINAND expression
    (61) expression -> . expression BINOR expression
    (62) expression -> . expression BINXOR expression
    (63) expression -> . BINNOT expression
    (64) expression -> . expression LT expression
    (65) expression -> . expression GT expression
    (66) expression -> . expression DOUBLEEQ expression
    (67) expression -> . expression NOTEQUAL expression
    (68) expression -> . expression LTE expression
    (69) expression -> . expression GTE expression
    (70) expression -> . expression STREQUAL expression
    (71) expression -> . expression STRNEQUAL expression
    (72) expression -> . expression AND expression
    (73) expression -> . expression OR expression
    (74) expression -> . expression LSHIFT expression
    (75) expression -> . expression RSHIFT expression
    (76) expression -> . expression URSHIFT expression
    (77) expression -> . basicTypes
    (78) expression -> . functioncall
    (79) expression -> . arrayCall
    (80) expression -> . TYPEOF expression
    (44) arraydecl -> . ID EQ LEFTBRACKET arrayList RIGHTBRACKET
    (82) basicTypes -> . NUMBER
    (83) basicTypes -> . STRING
    (84) basicTypes -> . ID
    (85) basicTypes -> . UNDEFINED
    (86) functioncall -> . ID LEFTPAREN argList RIGHTPAREN
    (81) arrayCall -> . ID LEFTBRACKET expression RIGHTBRACKET

    VAR             shift and go to state 49
    LEFTPAREN       shift and go to state 19
    ID              shift and go to state 50
    EVAL            shift and go to state 20
    NOT             shift and go to state 32
    BINNOT          shift and go to state 25
    TYPEOF          shift and go to state 15
    NUMBER          shift and go to state 2
    STRING          shift and go to state 14
    UNDEFINED       shift and go to state 21

    assignment                     shift and go to state 48
    reassignment                   shift and go to state 51
    arrayCall                      shift and go to state 10
    functioncall                   shift and go to state 38
    expression                     shift and go to state 52
    arraydecl                      shift and go to state 30
    basicTypes                     shift and go to state 33

state 20

    (50) expression -> EVAL . LEFTPAREN statements RIGHTPAREN
    (51) expression -> EVAL . LEFTPAREN block RIGHTPAREN

    LEFTPAREN       shift and go to state 53


state 21

    (85) basicTypes -> UNDEFINED .

    PLUS            reduce using rule 85 (basicTypes -> UNDEFINED .)
    MINUS           reduce using rule 85 (basicTypes -> UNDEFINED .)
    INTO            reduce using rule 85 (basicTypes -> UNDEFINED .)
    DIVIDE          reduce using rule 85 (basicTypes -> UNDEFINED .)
    MOD             reduce using rule 85 (basicTypes -> UNDEFINED .)
    EXPO            reduce using rule 85 (basicTypes -> UNDEFINED .)
    BINAND          reduce using rule 85 (basicTypes -> UNDEFINED .)
    BINOR           reduce using rule 85 (basicTypes -> UNDEFINED .)
    BINXOR          reduce using rule 85 (basicTypes -> UNDEFINED .)
    LT              reduce using rule 85 (basicTypes -> UNDEFINED .)
    GT              reduce using rule 85 (basicTypes -> UNDEFINED .)
    DOUBLEEQ        reduce using rule 85 (basicTypes -> UNDEFINED .)
    NOTEQUAL        reduce using rule 85 (basicTypes -> UNDEFINED .)
    LTE             reduce using rule 85 (basicTypes -> UNDEFINED .)
    GTE             reduce using rule 85 (basicTypes -> UNDEFINED .)
    STREQUAL        reduce using rule 85 (basicTypes -> UNDEFINED .)
    STRNEQUAL       reduce using rule 85 (basicTypes -> UNDEFINED .)
    AND             reduce using rule 85 (basicTypes -> UNDEFINED .)
    OR              reduce using rule 85 (basicTypes -> UNDEFINED .)
    LSHIFT          reduce using rule 85 (basicTypes -> UNDEFINED .)
    RSHIFT          reduce using rule 85 (basicTypes -> UNDEFINED .)
    URSHIFT         reduce using rule 85 (basicTypes -> UNDEFINED .)
    SEMICOLON       reduce using rule 85 (basicTypes -> UNDEFINED .)
    BREAK           reduce using rule 85 (basicTypes -> UNDEFINED .)
    CONTINUE        reduce using rule 85 (basicTypes -> UNDEFINED .)
    RETURN          reduce using rule 85 (basicTypes -> UNDEFINED .)
    CONSOLE         reduce using rule 85 (basicTypes -> UNDEFINED .)
    VAR             reduce using rule 85 (basicTypes -> UNDEFINED .)
    LEFTPAREN       reduce using rule 85 (basicTypes -> UNDEFINED .)
    ID              reduce using rule 85 (basicTypes -> UNDEFINED .)
    EVAL            reduce using rule 85 (basicTypes -> UNDEFINED .)
    NOT             reduce using rule 85 (basicTypes -> UNDEFINED .)
    BINNOT          reduce using rule 85 (basicTypes -> UNDEFINED .)
    TYPEOF          reduce using rule 85 (basicTypes -> UNDEFINED .)
    IF              reduce using rule 85 (basicTypes -> UNDEFINED .)
    WHILE           reduce using rule 85 (basicTypes -> UNDEFINED .)
    FOR             reduce using rule 85 (basicTypes -> UNDEFINED .)
    FUNCTION        reduce using rule 85 (basicTypes -> UNDEFINED .)
    NUMBER          reduce using rule 85 (basicTypes -> UNDEFINED .)
    STRING          reduce using rule 85 (basicTypes -> UNDEFINED .)
    UNDEFINED       reduce using rule 85 (basicTypes -> UNDEFINED .)
    $end            reduce using rule 85 (basicTypes -> UNDEFINED .)
    RIGHTBRACE      reduce using rule 85 (basicTypes -> UNDEFINED .)
    RIGHTPAREN      reduce using rule 85 (basicTypes -> UNDEFINED .)
    ELSE            reduce using rule 85 (basicTypes -> UNDEFINED .)
    LEFTBRACE       reduce using rule 85 (basicTypes -> UNDEFINED .)
    RIGHTBRACKET    reduce using rule 85 (basicTypes -> UNDEFINED .)
    COMMA           reduce using rule 85 (basicTypes -> UNDEFINED .)


state 22

    (20) assignment -> VAR . assignlist
    (105) funcdecl -> VAR . ID EQ FUNCTION LEFTPAREN argList RIGHTPAREN cblock SEMICOLON
    (22) assignlist -> . ID EQ expression COMMA assignlist
    (23) assignlist -> . ID COMMA assignlist
    (24) assignlist -> . arraydecl COMMA assignlist
    (25) assignlist -> . ID EQ expression
    (26) assignlist -> . ID
    (27) assignlist -> . arraydecl
    (44) arraydecl -> . ID EQ LEFTBRACKET arrayList RIGHTBRACKET

    ID              shift and go to state 55

    assignlist                     shift and go to state 54
    arraydecl                      shift and go to state 56

state 23

    (28) reassignment -> ID . EQ expression
    (29) reassignment -> ID . PLUSEQ expression
    (30) reassignment -> ID . MINUSEQ expression
    (31) reassignment -> ID . INTOEQ expression
    (32) reassignment -> ID . DIVEQ expression
    (33) reassignment -> ID . INCR
    (34) reassignment -> ID . DECR
    (35) reassignment -> ID . LSHIFTEQ expression
    (36) reassignment -> ID . RSHIFTEQ expression
    (37) reassignment -> ID . URSHIFTEQ expression
    (38) reassignment -> ID . ANDEQ expression
    (39) reassignment -> ID . OREQ expression
    (40) reassignment -> ID . XOREQ expression
    (41) reassignment -> ID . MODEQ expression
    (86) functioncall -> ID . LEFTPAREN argList RIGHTPAREN
    (44) arraydecl -> ID . EQ LEFTBRACKET arrayList RIGHTBRACKET
    (84) basicTypes -> ID .
    (81) arrayCall -> ID . LEFTBRACKET expression RIGHTBRACKET

  ! shift/reduce conflict for LEFTPAREN resolved as shift
    EQ              shift and go to state 70
    PLUSEQ          shift and go to state 72
    MINUSEQ         shift and go to state 63
    INTOEQ          shift and go to state 58
    DIVEQ           shift and go to state 66
    INCR            shift and go to state 60
    DECR            shift and go to state 59
    LSHIFTEQ        shift and go to state 67
    RSHIFTEQ        shift and go to state 71
    URSHIFTEQ       shift and go to state 62
    ANDEQ           shift and go to state 69
    OREQ            shift and go to state 65
    XOREQ           shift and go to state 61
    MODEQ           shift and go to state 57
    LEFTPAREN       shift and go to state 68
    SEMICOLON       reduce using rule 84 (basicTypes -> ID .)
    PLUS            reduce using rule 84 (basicTypes -> ID .)
    MINUS           reduce using rule 84 (basicTypes -> ID .)
    INTO            reduce using rule 84 (basicTypes -> ID .)
    DIVIDE          reduce using rule 84 (basicTypes -> ID .)
    MOD             reduce using rule 84 (basicTypes -> ID .)
    EXPO            reduce using rule 84 (basicTypes -> ID .)
    BINAND          reduce using rule 84 (basicTypes -> ID .)
    BINOR           reduce using rule 84 (basicTypes -> ID .)
    BINXOR          reduce using rule 84 (basicTypes -> ID .)
    LT              reduce using rule 84 (basicTypes -> ID .)
    GT              reduce using rule 84 (basicTypes -> ID .)
    DOUBLEEQ        reduce using rule 84 (basicTypes -> ID .)
    NOTEQUAL        reduce using rule 84 (basicTypes -> ID .)
    LTE             reduce using rule 84 (basicTypes -> ID .)
    GTE             reduce using rule 84 (basicTypes -> ID .)
    STREQUAL        reduce using rule 84 (basicTypes -> ID .)
    STRNEQUAL       reduce using rule 84 (basicTypes -> ID .)
    AND             reduce using rule 84 (basicTypes -> ID .)
    OR              reduce using rule 84 (basicTypes -> ID .)
    LSHIFT          reduce using rule 84 (basicTypes -> ID .)
    RSHIFT          reduce using rule 84 (basicTypes -> ID .)
    URSHIFT         reduce using rule 84 (basicTypes -> ID .)
    BREAK           reduce using rule 84 (basicTypes -> ID .)
    CONTINUE        reduce using rule 84 (basicTypes -> ID .)
    RETURN          reduce using rule 84 (basicTypes -> ID .)
    CONSOLE         reduce using rule 84 (basicTypes -> ID .)
    VAR             reduce using rule 84 (basicTypes -> ID .)
    ID              reduce using rule 84 (basicTypes -> ID .)
    EVAL            reduce using rule 84 (basicTypes -> ID .)
    NOT             reduce using rule 84 (basicTypes -> ID .)
    BINNOT          reduce using rule 84 (basicTypes -> ID .)
    TYPEOF          reduce using rule 84 (basicTypes -> ID .)
    IF              reduce using rule 84 (basicTypes -> ID .)
    WHILE           reduce using rule 84 (basicTypes -> ID .)
    FOR             reduce using rule 84 (basicTypes -> ID .)
    FUNCTION        reduce using rule 84 (basicTypes -> ID .)
    NUMBER          reduce using rule 84 (basicTypes -> ID .)
    STRING          reduce using rule 84 (basicTypes -> ID .)
    UNDEFINED       reduce using rule 84 (basicTypes -> ID .)
    RIGHTBRACE      reduce using rule 84 (basicTypes -> ID .)
    RIGHTPAREN      reduce using rule 84 (basicTypes -> ID .)
    ELSE            reduce using rule 84 (basicTypes -> ID .)
    $end            reduce using rule 84 (basicTypes -> ID .)
    LEFTBRACKET     shift and go to state 64

  ! LEFTPAREN       [ reduce using rule 84 (basicTypes -> ID .) ]


state 24

    (3) block -> LEFTBRACE . statements RIGHTBRACE
    (4) block -> LEFTBRACE . RIGHTBRACE
    (5) statements -> . statement statements
    (6) statements -> . statement
    (7) statement -> . assignment SEMICOLON
    (8) statement -> . reassignment SEMICOLON
    (9) statement -> . BREAK SEMICOLON
    (10) statement -> . CONTINUE SEMICOLON
    (11) statement -> . RETURN expression SEMICOLON
    (12) statement -> . expression SEMICOLON
    (13) statement -> . CONSOLE DOT LOG LEFTPAREN expression RIGHTPAREN SEMICOLON
    (14) statement -> . functioncall SEMICOLON
    (15) statement -> . if
    (16) statement -> . ifelse
    (17) statement -> . whileloop
    (18) statement -> . forloop
    (19) statement -> . funcdecl
    (106) statement -> . assignment
    (107) statement -> . reassignment
    (108) statement -> . BREAK
    (109) statement -> . CONTINUE
    (110) statement -> . expression
    (111) statement -> . CONSOLE DOT LOG LEFTPAREN expression RIGHTPAREN
    (112) statement -> . functioncall
    (20) assignment -> . VAR assignlist
    (21) assignment -> . LEFTPAREN assignment RIGHTPAREN
    (28) reassignment -> . ID EQ expression
    (29) reassignment -> . ID PLUSEQ expression
    (30) reassignment -> . ID MINUSEQ expression
    (31) reassignment -> . ID INTOEQ expression
    (32) reassignment -> . ID DIVEQ expression
    (33) reassignment -> . ID INCR
    (34) reassignment -> . ID DECR
    (35) reassignment -> . ID LSHIFTEQ expression
    (36) reassignment -> . ID RSHIFTEQ expression
    (37) reassignment -> . ID URSHIFTEQ expression
    (38) reassignment -> . ID ANDEQ expression
    (39) reassignment -> . ID OREQ expression
    (40) reassignment -> . ID XOREQ expression
    (41) reassignment -> . ID MODEQ expression
    (42) reassignment -> . arraydecl
    (43) reassignment -> . LEFTPAREN reassignment RIGHTPAREN
    (50) expression -> . EVAL LEFTPAREN statements RIGHTPAREN
    (51) expression -> . EVAL LEFTPAREN block RIGHTPAREN
    (52) expression -> . expression PLUS expression
    (53) expression -> . expression MINUS expression
    (54) expression -> . expression INTO expression
    (55) expression -> . expression DIVIDE expression
    (56) expression -> . expression MOD expression
    (57) expression -> . expression EXPO expression
    (58) expression -> . LEFTPAREN expression RIGHTPAREN
    (59) expression -> . NOT expression
    (60) expression -> . expression BINAND expression
    (61) expression -> . expression BINOR expression
    (62) expression -> . expression BINXOR expression
    (63) expression -> . BINNOT expression
    (64) expression -> . expression LT expression
    (65) expression -> . expression GT expression
    (66) expression -> . expression DOUBLEEQ expression
    (67) expression -> . expression NOTEQUAL expression
    (68) expression -> . expression LTE expression
    (69) expression -> . expression GTE expression
    (70) expression -> . expression STREQUAL expression
    (71) expression -> . expression STRNEQUAL expression
    (72) expression -> . expression AND expression
    (73) expression -> . expression OR expression
    (74) expression -> . expression LSHIFT expression
    (75) expression -> . expression RSHIFT expression
    (76) expression -> . expression URSHIFT expression
    (77) expression -> . basicTypes
    (78) expression -> . functioncall
    (79) expression -> . arrayCall
    (80) expression -> . TYPEOF expression
    (86) functioncall -> . ID LEFTPAREN argList RIGHTPAREN
    (90) if -> . IF expression cblock
    (91) ifelse -> . IF expression cblock ELSE cblock
    (92) ifelse -> . IF expression cblock ELSE if
    (93) ifelse -> . IF expression cblock ELSE ifelse
    (96) whileloop -> . WHILE LEFTPAREN expression RIGHTPAREN cblock
    (97) forloop -> . FOR LEFTPAREN initialization SEMICOLON expression SEMICOLON increment RIGHTPAREN cblock
    (104) funcdecl -> . FUNCTION ID LEFTPAREN argList RIGHTPAREN cblock
    (105) funcdecl -> . VAR ID EQ FUNCTION LEFTPAREN argList RIGHTPAREN cblock SEMICOLON
    (44) arraydecl -> . ID EQ LEFTBRACKET arrayList RIGHTBRACKET
    (82) basicTypes -> . NUMBER
    (83) basicTypes -> . STRING
    (84) basicTypes -> . ID
    (85) basicTypes -> . UNDEFINED
    (81) arrayCall -> . ID LEFTBRACKET expression RIGHTBRACKET

    RIGHTBRACE      shift and go to state 74
    BREAK           shift and go to state 27
    CONTINUE        shift and go to state 28
    RETURN          shift and go to state 5
    CONSOLE         shift and go to state 17
    VAR             shift and go to state 22
    LEFTPAREN       shift and go to state 19
    ID              shift and go to state 23
    EVAL            shift and go to state 20
    NOT             shift and go to state 32
    BINNOT          shift and go to state 25
    TYPEOF          shift and go to state 15
    IF              shift and go to state 3
    WHILE           shift and go to state 4
    FOR             shift and go to state 9
    FUNCTION        shift and go to state 31
    NUMBER          shift and go to state 2
    STRING          shift and go to state 14
    UNDEFINED       shift and go to state 21

    whileloop                      shift and go to state 7
    forloop                        shift and go to state 16
    statements                     shift and go to state 73
    assignment                     shift and go to state 18
    funcdecl                       shift and go to state 26
    reassignment                   shift and go to state 8
    arrayCall                      shift and go to state 10
    functioncall                   shift and go to state 29
    statement                      shift and go to state 13
    ifelse                         shift and go to state 12
    basicTypes                     shift and go to state 33
    expression                     shift and go to state 34
    arraydecl                      shift and go to state 30
    if                             shift and go to state 6

state 25

    (63) expression -> BINNOT . expression
    (50) expression -> . EVAL LEFTPAREN statements RIGHTPAREN
    (51) expression -> . EVAL LEFTPAREN block RIGHTPAREN
    (52) expression -> . expression PLUS expression
    (53) expression -> . expression MINUS expression
    (54) expression -> . expression INTO expression
    (55) expression -> . expression DIVIDE expression
    (56) expression -> . expression MOD expression
    (57) expression -> . expression EXPO expression
    (58) expression -> . LEFTPAREN expression RIGHTPAREN
    (59) expression -> . NOT expression
    (60) expression -> . expression BINAND expression
    (61) expression -> . expression BINOR expression
    (62) expression -> . expression BINXOR expression
    (63) expression -> . BINNOT expression
    (64) expression -> . expression LT expression
    (65) expression -> . expression GT expression
    (66) expression -> . expression DOUBLEEQ expression
    (67) expression -> . expression NOTEQUAL expression
    (68) expression -> . expression LTE expression
    (69) expression -> . expression GTE expression
    (70) expression -> . expression STREQUAL expression
    (71) expression -> . expression STRNEQUAL expression
    (72) expression -> . expression AND expression
    (73) expression -> . expression OR expression
    (74) expression -> . expression LSHIFT expression
    (75) expression -> . expression RSHIFT expression
    (76) expression -> . expression URSHIFT expression
    (77) expression -> . basicTypes
    (78) expression -> . functioncall
    (79) expression -> . arrayCall
    (80) expression -> . TYPEOF expression
    (82) basicTypes -> . NUMBER
    (83) basicTypes -> . STRING
    (84) basicTypes -> . ID
    (85) basicTypes -> . UNDEFINED
    (86) functioncall -> . ID LEFTPAREN argList RIGHTPAREN
    (81) arrayCall -> . ID LEFTBRACKET expression RIGHTBRACKET

    EVAL            shift and go to state 20
    LEFTPAREN       shift and go to state 36
    NOT             shift and go to state 32
    BINNOT          shift and go to state 25
    TYPEOF          shift and go to state 15
    NUMBER          shift and go to state 2
    STRING          shift and go to state 14
    ID              shift and go to state 37
    UNDEFINED       shift and go to state 21

    arrayCall                      shift and go to state 10
    functioncall                   shift and go to state 38
    expression                     shift and go to state 75
    basicTypes                     shift and go to state 33

state 26

    (19) statement -> funcdecl .

    ELSE            reduce using rule 19 (statement -> funcdecl .)
    BREAK           reduce using rule 19 (statement -> funcdecl .)
    CONTINUE        reduce using rule 19 (statement -> funcdecl .)
    RETURN          reduce using rule 19 (statement -> funcdecl .)
    CONSOLE         reduce using rule 19 (statement -> funcdecl .)
    VAR             reduce using rule 19 (statement -> funcdecl .)
    LEFTPAREN       reduce using rule 19 (statement -> funcdecl .)
    ID              reduce using rule 19 (statement -> funcdecl .)
    EVAL            reduce using rule 19 (statement -> funcdecl .)
    NOT             reduce using rule 19 (statement -> funcdecl .)
    BINNOT          reduce using rule 19 (statement -> funcdecl .)
    TYPEOF          reduce using rule 19 (statement -> funcdecl .)
    IF              reduce using rule 19 (statement -> funcdecl .)
    WHILE           reduce using rule 19 (statement -> funcdecl .)
    FOR             reduce using rule 19 (statement -> funcdecl .)
    FUNCTION        reduce using rule 19 (statement -> funcdecl .)
    NUMBER          reduce using rule 19 (statement -> funcdecl .)
    STRING          reduce using rule 19 (statement -> funcdecl .)
    UNDEFINED       reduce using rule 19 (statement -> funcdecl .)
    $end            reduce using rule 19 (statement -> funcdecl .)
    RIGHTBRACE      reduce using rule 19 (statement -> funcdecl .)
    RIGHTPAREN      reduce using rule 19 (statement -> funcdecl .)
    SEMICOLON       reduce using rule 19 (statement -> funcdecl .)


state 27

    (9) statement -> BREAK . SEMICOLON
    (108) statement -> BREAK .

  ! shift/reduce conflict for SEMICOLON resolved as shift
    SEMICOLON       shift and go to state 76
    ELSE            reduce using rule 108 (statement -> BREAK .)
    BREAK           reduce using rule 108 (statement -> BREAK .)
    CONTINUE        reduce using rule 108 (statement -> BREAK .)
    RETURN          reduce using rule 108 (statement -> BREAK .)
    CONSOLE         reduce using rule 108 (statement -> BREAK .)
    VAR             reduce using rule 108 (statement -> BREAK .)
    LEFTPAREN       reduce using rule 108 (statement -> BREAK .)
    ID              reduce using rule 108 (statement -> BREAK .)
    EVAL            reduce using rule 108 (statement -> BREAK .)
    NOT             reduce using rule 108 (statement -> BREAK .)
    BINNOT          reduce using rule 108 (statement -> BREAK .)
    TYPEOF          reduce using rule 108 (statement -> BREAK .)
    IF              reduce using rule 108 (statement -> BREAK .)
    WHILE           reduce using rule 108 (statement -> BREAK .)
    FOR             reduce using rule 108 (statement -> BREAK .)
    FUNCTION        reduce using rule 108 (statement -> BREAK .)
    NUMBER          reduce using rule 108 (statement -> BREAK .)
    STRING          reduce using rule 108 (statement -> BREAK .)
    UNDEFINED       reduce using rule 108 (statement -> BREAK .)
    $end            reduce using rule 108 (statement -> BREAK .)
    RIGHTBRACE      reduce using rule 108 (statement -> BREAK .)
    RIGHTPAREN      reduce using rule 108 (statement -> BREAK .)

  ! SEMICOLON       [ reduce using rule 108 (statement -> BREAK .) ]


state 28

    (10) statement -> CONTINUE . SEMICOLON
    (109) statement -> CONTINUE .

  ! shift/reduce conflict for SEMICOLON resolved as shift
    SEMICOLON       shift and go to state 77
    ELSE            reduce using rule 109 (statement -> CONTINUE .)
    BREAK           reduce using rule 109 (statement -> CONTINUE .)
    CONTINUE        reduce using rule 109 (statement -> CONTINUE .)
    RETURN          reduce using rule 109 (statement -> CONTINUE .)
    CONSOLE         reduce using rule 109 (statement -> CONTINUE .)
    VAR             reduce using rule 109 (statement -> CONTINUE .)
    LEFTPAREN       reduce using rule 109 (statement -> CONTINUE .)
    ID              reduce using rule 109 (statement -> CONTINUE .)
    EVAL            reduce using rule 109 (statement -> CONTINUE .)
    NOT             reduce using rule 109 (statement -> CONTINUE .)
    BINNOT          reduce using rule 109 (statement -> CONTINUE .)
    TYPEOF          reduce using rule 109 (statement -> CONTINUE .)
    IF              reduce using rule 109 (statement -> CONTINUE .)
    WHILE           reduce using rule 109 (statement -> CONTINUE .)
    FOR             reduce using rule 109 (statement -> CONTINUE .)
    FUNCTION        reduce using rule 109 (statement -> CONTINUE .)
    NUMBER          reduce using rule 109 (statement -> CONTINUE .)
    STRING          reduce using rule 109 (statement -> CONTINUE .)
    UNDEFINED       reduce using rule 109 (statement -> CONTINUE .)
    $end            reduce using rule 109 (statement -> CONTINUE .)
    RIGHTBRACE      reduce using rule 109 (statement -> CONTINUE .)
    RIGHTPAREN      reduce using rule 109 (statement -> CONTINUE .)

  ! SEMICOLON       [ reduce using rule 109 (statement -> CONTINUE .) ]


state 29

    (14) statement -> functioncall . SEMICOLON
    (112) statement -> functioncall .
    (78) expression -> functioncall .

  ! shift/reduce conflict for SEMICOLON resolved as shift
  ! shift/reduce conflict for SEMICOLON resolved as shift
  ! reduce/reduce conflict for ELSE resolved using rule 78 (expression -> functioncall .)
  ! reduce/reduce conflict for BREAK resolved using rule 78 (expression -> functioncall .)
  ! reduce/reduce conflict for CONTINUE resolved using rule 78 (expression -> functioncall .)
  ! reduce/reduce conflict for RETURN resolved using rule 78 (expression -> functioncall .)
  ! reduce/reduce conflict for CONSOLE resolved using rule 78 (expression -> functioncall .)
  ! reduce/reduce conflict for VAR resolved using rule 78 (expression -> functioncall .)
  ! reduce/reduce conflict for LEFTPAREN resolved using rule 78 (expression -> functioncall .)
  ! reduce/reduce conflict for ID resolved using rule 78 (expression -> functioncall .)
  ! reduce/reduce conflict for EVAL resolved using rule 78 (expression -> functioncall .)
  ! reduce/reduce conflict for NOT resolved using rule 78 (expression -> functioncall .)
  ! reduce/reduce conflict for BINNOT resolved using rule 78 (expression -> functioncall .)
  ! reduce/reduce conflict for TYPEOF resolved using rule 78 (expression -> functioncall .)
  ! reduce/reduce conflict for IF resolved using rule 78 (expression -> functioncall .)
  ! reduce/reduce conflict for WHILE resolved using rule 78 (expression -> functioncall .)
  ! reduce/reduce conflict for FOR resolved using rule 78 (expression -> functioncall .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 78 (expression -> functioncall .)
  ! reduce/reduce conflict for NUMBER resolved using rule 78 (expression -> functioncall .)
  ! reduce/reduce conflict for STRING resolved using rule 78 (expression -> functioncall .)
  ! reduce/reduce conflict for UNDEFINED resolved using rule 78 (expression -> functioncall .)
  ! reduce/reduce conflict for $end resolved using rule 78 (expression -> functioncall .)
  ! reduce/reduce conflict for RIGHTBRACE resolved using rule 78 (expression -> functioncall .)
  ! reduce/reduce conflict for RIGHTPAREN resolved using rule 78 (expression -> functioncall .)
    SEMICOLON       shift and go to state 78
    PLUS            reduce using rule 78 (expression -> functioncall .)
    MINUS           reduce using rule 78 (expression -> functioncall .)
    INTO            reduce using rule 78 (expression -> functioncall .)
    DIVIDE          reduce using rule 78 (expression -> functioncall .)
    MOD             reduce using rule 78 (expression -> functioncall .)
    EXPO            reduce using rule 78 (expression -> functioncall .)
    BINAND          reduce using rule 78 (expression -> functioncall .)
    BINOR           reduce using rule 78 (expression -> functioncall .)
    BINXOR          reduce using rule 78 (expression -> functioncall .)
    LT              reduce using rule 78 (expression -> functioncall .)
    GT              reduce using rule 78 (expression -> functioncall .)
    DOUBLEEQ        reduce using rule 78 (expression -> functioncall .)
    NOTEQUAL        reduce using rule 78 (expression -> functioncall .)
    LTE             reduce using rule 78 (expression -> functioncall .)
    GTE             reduce using rule 78 (expression -> functioncall .)
    STREQUAL        reduce using rule 78 (expression -> functioncall .)
    STRNEQUAL       reduce using rule 78 (expression -> functioncall .)
    AND             reduce using rule 78 (expression -> functioncall .)
    OR              reduce using rule 78 (expression -> functioncall .)
    LSHIFT          reduce using rule 78 (expression -> functioncall .)
    RSHIFT          reduce using rule 78 (expression -> functioncall .)
    URSHIFT         reduce using rule 78 (expression -> functioncall .)
    ELSE            reduce using rule 78 (expression -> functioncall .)
    BREAK           reduce using rule 78 (expression -> functioncall .)
    CONTINUE        reduce using rule 78 (expression -> functioncall .)
    RETURN          reduce using rule 78 (expression -> functioncall .)
    CONSOLE         reduce using rule 78 (expression -> functioncall .)
    VAR             reduce using rule 78 (expression -> functioncall .)
    LEFTPAREN       reduce using rule 78 (expression -> functioncall .)
    ID              reduce using rule 78 (expression -> functioncall .)
    EVAL            reduce using rule 78 (expression -> functioncall .)
    NOT             reduce using rule 78 (expression -> functioncall .)
    BINNOT          reduce using rule 78 (expression -> functioncall .)
    TYPEOF          reduce using rule 78 (expression -> functioncall .)
    IF              reduce using rule 78 (expression -> functioncall .)
    WHILE           reduce using rule 78 (expression -> functioncall .)
    FOR             reduce using rule 78 (expression -> functioncall .)
    FUNCTION        reduce using rule 78 (expression -> functioncall .)
    NUMBER          reduce using rule 78 (expression -> functioncall .)
    STRING          reduce using rule 78 (expression -> functioncall .)
    UNDEFINED       reduce using rule 78 (expression -> functioncall .)
    $end            reduce using rule 78 (expression -> functioncall .)
    RIGHTBRACE      reduce using rule 78 (expression -> functioncall .)
    RIGHTPAREN      reduce using rule 78 (expression -> functioncall .)

  ! ELSE            [ reduce using rule 112 (statement -> functioncall .) ]
  ! BREAK           [ reduce using rule 112 (statement -> functioncall .) ]
  ! CONTINUE        [ reduce using rule 112 (statement -> functioncall .) ]
  ! RETURN          [ reduce using rule 112 (statement -> functioncall .) ]
  ! CONSOLE         [ reduce using rule 112 (statement -> functioncall .) ]
  ! VAR             [ reduce using rule 112 (statement -> functioncall .) ]
  ! LEFTPAREN       [ reduce using rule 112 (statement -> functioncall .) ]
  ! ID              [ reduce using rule 112 (statement -> functioncall .) ]
  ! EVAL            [ reduce using rule 112 (statement -> functioncall .) ]
  ! NOT             [ reduce using rule 112 (statement -> functioncall .) ]
  ! BINNOT          [ reduce using rule 112 (statement -> functioncall .) ]
  ! TYPEOF          [ reduce using rule 112 (statement -> functioncall .) ]
  ! IF              [ reduce using rule 112 (statement -> functioncall .) ]
  ! WHILE           [ reduce using rule 112 (statement -> functioncall .) ]
  ! FOR             [ reduce using rule 112 (statement -> functioncall .) ]
  ! FUNCTION        [ reduce using rule 112 (statement -> functioncall .) ]
  ! NUMBER          [ reduce using rule 112 (statement -> functioncall .) ]
  ! STRING          [ reduce using rule 112 (statement -> functioncall .) ]
  ! UNDEFINED       [ reduce using rule 112 (statement -> functioncall .) ]
  ! $end            [ reduce using rule 112 (statement -> functioncall .) ]
  ! RIGHTBRACE      [ reduce using rule 112 (statement -> functioncall .) ]
  ! RIGHTPAREN      [ reduce using rule 112 (statement -> functioncall .) ]
  ! SEMICOLON       [ reduce using rule 112 (statement -> functioncall .) ]
  ! SEMICOLON       [ reduce using rule 78 (expression -> functioncall .) ]


state 30

    (42) reassignment -> arraydecl .

    SEMICOLON       reduce using rule 42 (reassignment -> arraydecl .)
    BREAK           reduce using rule 42 (reassignment -> arraydecl .)
    CONTINUE        reduce using rule 42 (reassignment -> arraydecl .)
    RETURN          reduce using rule 42 (reassignment -> arraydecl .)
    CONSOLE         reduce using rule 42 (reassignment -> arraydecl .)
    VAR             reduce using rule 42 (reassignment -> arraydecl .)
    LEFTPAREN       reduce using rule 42 (reassignment -> arraydecl .)
    ID              reduce using rule 42 (reassignment -> arraydecl .)
    EVAL            reduce using rule 42 (reassignment -> arraydecl .)
    NOT             reduce using rule 42 (reassignment -> arraydecl .)
    BINNOT          reduce using rule 42 (reassignment -> arraydecl .)
    TYPEOF          reduce using rule 42 (reassignment -> arraydecl .)
    IF              reduce using rule 42 (reassignment -> arraydecl .)
    WHILE           reduce using rule 42 (reassignment -> arraydecl .)
    FOR             reduce using rule 42 (reassignment -> arraydecl .)
    FUNCTION        reduce using rule 42 (reassignment -> arraydecl .)
    NUMBER          reduce using rule 42 (reassignment -> arraydecl .)
    STRING          reduce using rule 42 (reassignment -> arraydecl .)
    UNDEFINED       reduce using rule 42 (reassignment -> arraydecl .)
    $end            reduce using rule 42 (reassignment -> arraydecl .)
    RIGHTBRACE      reduce using rule 42 (reassignment -> arraydecl .)
    RIGHTPAREN      reduce using rule 42 (reassignment -> arraydecl .)
    ELSE            reduce using rule 42 (reassignment -> arraydecl .)


state 31

    (104) funcdecl -> FUNCTION . ID LEFTPAREN argList RIGHTPAREN cblock

    ID              shift and go to state 79


state 32

    (59) expression -> NOT . expression
    (50) expression -> . EVAL LEFTPAREN statements RIGHTPAREN
    (51) expression -> . EVAL LEFTPAREN block RIGHTPAREN
    (52) expression -> . expression PLUS expression
    (53) expression -> . expression MINUS expression
    (54) expression -> . expression INTO expression
    (55) expression -> . expression DIVIDE expression
    (56) expression -> . expression MOD expression
    (57) expression -> . expression EXPO expression
    (58) expression -> . LEFTPAREN expression RIGHTPAREN
    (59) expression -> . NOT expression
    (60) expression -> . expression BINAND expression
    (61) expression -> . expression BINOR expression
    (62) expression -> . expression BINXOR expression
    (63) expression -> . BINNOT expression
    (64) expression -> . expression LT expression
    (65) expression -> . expression GT expression
    (66) expression -> . expression DOUBLEEQ expression
    (67) expression -> . expression NOTEQUAL expression
    (68) expression -> . expression LTE expression
    (69) expression -> . expression GTE expression
    (70) expression -> . expression STREQUAL expression
    (71) expression -> . expression STRNEQUAL expression
    (72) expression -> . expression AND expression
    (73) expression -> . expression OR expression
    (74) expression -> . expression LSHIFT expression
    (75) expression -> . expression RSHIFT expression
    (76) expression -> . expression URSHIFT expression
    (77) expression -> . basicTypes
    (78) expression -> . functioncall
    (79) expression -> . arrayCall
    (80) expression -> . TYPEOF expression
    (82) basicTypes -> . NUMBER
    (83) basicTypes -> . STRING
    (84) basicTypes -> . ID
    (85) basicTypes -> . UNDEFINED
    (86) functioncall -> . ID LEFTPAREN argList RIGHTPAREN
    (81) arrayCall -> . ID LEFTBRACKET expression RIGHTBRACKET

    EVAL            shift and go to state 20
    LEFTPAREN       shift and go to state 36
    NOT             shift and go to state 32
    BINNOT          shift and go to state 25
    TYPEOF          shift and go to state 15
    NUMBER          shift and go to state 2
    STRING          shift and go to state 14
    ID              shift and go to state 37
    UNDEFINED       shift and go to state 21

    arrayCall                      shift and go to state 10
    functioncall                   shift and go to state 38
    expression                     shift and go to state 80
    basicTypes                     shift and go to state 33

state 33

    (77) expression -> basicTypes .

    PLUS            reduce using rule 77 (expression -> basicTypes .)
    MINUS           reduce using rule 77 (expression -> basicTypes .)
    INTO            reduce using rule 77 (expression -> basicTypes .)
    DIVIDE          reduce using rule 77 (expression -> basicTypes .)
    MOD             reduce using rule 77 (expression -> basicTypes .)
    EXPO            reduce using rule 77 (expression -> basicTypes .)
    BINAND          reduce using rule 77 (expression -> basicTypes .)
    BINOR           reduce using rule 77 (expression -> basicTypes .)
    BINXOR          reduce using rule 77 (expression -> basicTypes .)
    LT              reduce using rule 77 (expression -> basicTypes .)
    GT              reduce using rule 77 (expression -> basicTypes .)
    DOUBLEEQ        reduce using rule 77 (expression -> basicTypes .)
    NOTEQUAL        reduce using rule 77 (expression -> basicTypes .)
    LTE             reduce using rule 77 (expression -> basicTypes .)
    GTE             reduce using rule 77 (expression -> basicTypes .)
    STREQUAL        reduce using rule 77 (expression -> basicTypes .)
    STRNEQUAL       reduce using rule 77 (expression -> basicTypes .)
    AND             reduce using rule 77 (expression -> basicTypes .)
    OR              reduce using rule 77 (expression -> basicTypes .)
    LSHIFT          reduce using rule 77 (expression -> basicTypes .)
    RSHIFT          reduce using rule 77 (expression -> basicTypes .)
    URSHIFT         reduce using rule 77 (expression -> basicTypes .)
    SEMICOLON       reduce using rule 77 (expression -> basicTypes .)
    BREAK           reduce using rule 77 (expression -> basicTypes .)
    CONTINUE        reduce using rule 77 (expression -> basicTypes .)
    RETURN          reduce using rule 77 (expression -> basicTypes .)
    CONSOLE         reduce using rule 77 (expression -> basicTypes .)
    VAR             reduce using rule 77 (expression -> basicTypes .)
    LEFTPAREN       reduce using rule 77 (expression -> basicTypes .)
    ID              reduce using rule 77 (expression -> basicTypes .)
    EVAL            reduce using rule 77 (expression -> basicTypes .)
    NOT             reduce using rule 77 (expression -> basicTypes .)
    BINNOT          reduce using rule 77 (expression -> basicTypes .)
    TYPEOF          reduce using rule 77 (expression -> basicTypes .)
    IF              reduce using rule 77 (expression -> basicTypes .)
    WHILE           reduce using rule 77 (expression -> basicTypes .)
    FOR             reduce using rule 77 (expression -> basicTypes .)
    FUNCTION        reduce using rule 77 (expression -> basicTypes .)
    NUMBER          reduce using rule 77 (expression -> basicTypes .)
    STRING          reduce using rule 77 (expression -> basicTypes .)
    UNDEFINED       reduce using rule 77 (expression -> basicTypes .)
    $end            reduce using rule 77 (expression -> basicTypes .)
    RIGHTBRACE      reduce using rule 77 (expression -> basicTypes .)
    RIGHTPAREN      reduce using rule 77 (expression -> basicTypes .)
    ELSE            reduce using rule 77 (expression -> basicTypes .)
    LEFTBRACE       reduce using rule 77 (expression -> basicTypes .)
    RIGHTBRACKET    reduce using rule 77 (expression -> basicTypes .)
    COMMA           reduce using rule 77 (expression -> basicTypes .)


state 34

    (12) statement -> expression . SEMICOLON
    (110) statement -> expression .
    (52) expression -> expression . PLUS expression
    (53) expression -> expression . MINUS expression
    (54) expression -> expression . INTO expression
    (55) expression -> expression . DIVIDE expression
    (56) expression -> expression . MOD expression
    (57) expression -> expression . EXPO expression
    (60) expression -> expression . BINAND expression
    (61) expression -> expression . BINOR expression
    (62) expression -> expression . BINXOR expression
    (64) expression -> expression . LT expression
    (65) expression -> expression . GT expression
    (66) expression -> expression . DOUBLEEQ expression
    (67) expression -> expression . NOTEQUAL expression
    (68) expression -> expression . LTE expression
    (69) expression -> expression . GTE expression
    (70) expression -> expression . STREQUAL expression
    (71) expression -> expression . STRNEQUAL expression
    (72) expression -> expression . AND expression
    (73) expression -> expression . OR expression
    (74) expression -> expression . LSHIFT expression
    (75) expression -> expression . RSHIFT expression
    (76) expression -> expression . URSHIFT expression

  ! shift/reduce conflict for SEMICOLON resolved as shift
    SEMICOLON       shift and go to state 89
    ELSE            reduce using rule 110 (statement -> expression .)
    BREAK           reduce using rule 110 (statement -> expression .)
    CONTINUE        reduce using rule 110 (statement -> expression .)
    RETURN          reduce using rule 110 (statement -> expression .)
    CONSOLE         reduce using rule 110 (statement -> expression .)
    VAR             reduce using rule 110 (statement -> expression .)
    LEFTPAREN       reduce using rule 110 (statement -> expression .)
    ID              reduce using rule 110 (statement -> expression .)
    EVAL            reduce using rule 110 (statement -> expression .)
    NOT             reduce using rule 110 (statement -> expression .)
    BINNOT          reduce using rule 110 (statement -> expression .)
    TYPEOF          reduce using rule 110 (statement -> expression .)
    IF              reduce using rule 110 (statement -> expression .)
    WHILE           reduce using rule 110 (statement -> expression .)
    FOR             reduce using rule 110 (statement -> expression .)
    FUNCTION        reduce using rule 110 (statement -> expression .)
    NUMBER          reduce using rule 110 (statement -> expression .)
    STRING          reduce using rule 110 (statement -> expression .)
    UNDEFINED       reduce using rule 110 (statement -> expression .)
    $end            reduce using rule 110 (statement -> expression .)
    RIGHTBRACE      reduce using rule 110 (statement -> expression .)
    RIGHTPAREN      reduce using rule 110 (statement -> expression .)
    PLUS            shift and go to state 92
    MINUS           shift and go to state 86
    INTO            shift and go to state 97
    DIVIDE          shift and go to state 96
    MOD             shift and go to state 103
    EXPO            shift and go to state 93
    BINAND          shift and go to state 88
    BINOR           shift and go to state 100
    BINXOR          shift and go to state 94
    LT              shift and go to state 91
    GT              shift and go to state 95
    DOUBLEEQ        shift and go to state 81
    NOTEQUAL        shift and go to state 83
    LTE             shift and go to state 98
    GTE             shift and go to state 87
    STREQUAL        shift and go to state 90
    STRNEQUAL       shift and go to state 84
    AND             shift and go to state 99
    OR              shift and go to state 102
    LSHIFT          shift and go to state 85
    RSHIFT          shift and go to state 82
    URSHIFT         shift and go to state 101

  ! SEMICOLON       [ reduce using rule 110 (statement -> expression .) ]


state 35

    (1) start -> block .

    $end            reduce using rule 1 (start -> block .)


state 36

    (58) expression -> LEFTPAREN . expression RIGHTPAREN
    (50) expression -> . EVAL LEFTPAREN statements RIGHTPAREN
    (51) expression -> . EVAL LEFTPAREN block RIGHTPAREN
    (52) expression -> . expression PLUS expression
    (53) expression -> . expression MINUS expression
    (54) expression -> . expression INTO expression
    (55) expression -> . expression DIVIDE expression
    (56) expression -> . expression MOD expression
    (57) expression -> . expression EXPO expression
    (58) expression -> . LEFTPAREN expression RIGHTPAREN
    (59) expression -> . NOT expression
    (60) expression -> . expression BINAND expression
    (61) expression -> . expression BINOR expression
    (62) expression -> . expression BINXOR expression
    (63) expression -> . BINNOT expression
    (64) expression -> . expression LT expression
    (65) expression -> . expression GT expression
    (66) expression -> . expression DOUBLEEQ expression
    (67) expression -> . expression NOTEQUAL expression
    (68) expression -> . expression LTE expression
    (69) expression -> . expression GTE expression
    (70) expression -> . expression STREQUAL expression
    (71) expression -> . expression STRNEQUAL expression
    (72) expression -> . expression AND expression
    (73) expression -> . expression OR expression
    (74) expression -> . expression LSHIFT expression
    (75) expression -> . expression RSHIFT expression
    (76) expression -> . expression URSHIFT expression
    (77) expression -> . basicTypes
    (78) expression -> . functioncall
    (79) expression -> . arrayCall
    (80) expression -> . TYPEOF expression
    (82) basicTypes -> . NUMBER
    (83) basicTypes -> . STRING
    (84) basicTypes -> . ID
    (85) basicTypes -> . UNDEFINED
    (86) functioncall -> . ID LEFTPAREN argList RIGHTPAREN
    (81) arrayCall -> . ID LEFTBRACKET expression RIGHTBRACKET

    EVAL            shift and go to state 20
    LEFTPAREN       shift and go to state 36
    NOT             shift and go to state 32
    BINNOT          shift and go to state 25
    TYPEOF          shift and go to state 15
    NUMBER          shift and go to state 2
    STRING          shift and go to state 14
    ID              shift and go to state 37
    UNDEFINED       shift and go to state 21

    arrayCall                      shift and go to state 10
    functioncall                   shift and go to state 38
    expression                     shift and go to state 52
    basicTypes                     shift and go to state 33

state 37

    (84) basicTypes -> ID .
    (86) functioncall -> ID . LEFTPAREN argList RIGHTPAREN
    (81) arrayCall -> ID . LEFTBRACKET expression RIGHTBRACKET

  ! shift/reduce conflict for LEFTPAREN resolved as shift
    PLUS            reduce using rule 84 (basicTypes -> ID .)
    MINUS           reduce using rule 84 (basicTypes -> ID .)
    INTO            reduce using rule 84 (basicTypes -> ID .)
    DIVIDE          reduce using rule 84 (basicTypes -> ID .)
    MOD             reduce using rule 84 (basicTypes -> ID .)
    EXPO            reduce using rule 84 (basicTypes -> ID .)
    BINAND          reduce using rule 84 (basicTypes -> ID .)
    BINOR           reduce using rule 84 (basicTypes -> ID .)
    BINXOR          reduce using rule 84 (basicTypes -> ID .)
    LT              reduce using rule 84 (basicTypes -> ID .)
    GT              reduce using rule 84 (basicTypes -> ID .)
    DOUBLEEQ        reduce using rule 84 (basicTypes -> ID .)
    NOTEQUAL        reduce using rule 84 (basicTypes -> ID .)
    LTE             reduce using rule 84 (basicTypes -> ID .)
    GTE             reduce using rule 84 (basicTypes -> ID .)
    STREQUAL        reduce using rule 84 (basicTypes -> ID .)
    STRNEQUAL       reduce using rule 84 (basicTypes -> ID .)
    AND             reduce using rule 84 (basicTypes -> ID .)
    OR              reduce using rule 84 (basicTypes -> ID .)
    LSHIFT          reduce using rule 84 (basicTypes -> ID .)
    RSHIFT          reduce using rule 84 (basicTypes -> ID .)
    URSHIFT         reduce using rule 84 (basicTypes -> ID .)
    SEMICOLON       reduce using rule 84 (basicTypes -> ID .)
    BREAK           reduce using rule 84 (basicTypes -> ID .)
    CONTINUE        reduce using rule 84 (basicTypes -> ID .)
    RETURN          reduce using rule 84 (basicTypes -> ID .)
    CONSOLE         reduce using rule 84 (basicTypes -> ID .)
    VAR             reduce using rule 84 (basicTypes -> ID .)
    ID              reduce using rule 84 (basicTypes -> ID .)
    EVAL            reduce using rule 84 (basicTypes -> ID .)
    NOT             reduce using rule 84 (basicTypes -> ID .)
    BINNOT          reduce using rule 84 (basicTypes -> ID .)
    TYPEOF          reduce using rule 84 (basicTypes -> ID .)
    IF              reduce using rule 84 (basicTypes -> ID .)
    WHILE           reduce using rule 84 (basicTypes -> ID .)
    FOR             reduce using rule 84 (basicTypes -> ID .)
    FUNCTION        reduce using rule 84 (basicTypes -> ID .)
    NUMBER          reduce using rule 84 (basicTypes -> ID .)
    STRING          reduce using rule 84 (basicTypes -> ID .)
    UNDEFINED       reduce using rule 84 (basicTypes -> ID .)
    $end            reduce using rule 84 (basicTypes -> ID .)
    RIGHTBRACE      reduce using rule 84 (basicTypes -> ID .)
    RIGHTPAREN      reduce using rule 84 (basicTypes -> ID .)
    ELSE            reduce using rule 84 (basicTypes -> ID .)
    LEFTBRACE       reduce using rule 84 (basicTypes -> ID .)
    RIGHTBRACKET    reduce using rule 84 (basicTypes -> ID .)
    COMMA           reduce using rule 84 (basicTypes -> ID .)
    LEFTPAREN       shift and go to state 68
    LEFTBRACKET     shift and go to state 64

  ! LEFTPAREN       [ reduce using rule 84 (basicTypes -> ID .) ]


state 38

    (78) expression -> functioncall .

    PLUS            reduce using rule 78 (expression -> functioncall .)
    MINUS           reduce using rule 78 (expression -> functioncall .)
    INTO            reduce using rule 78 (expression -> functioncall .)
    DIVIDE          reduce using rule 78 (expression -> functioncall .)
    MOD             reduce using rule 78 (expression -> functioncall .)
    EXPO            reduce using rule 78 (expression -> functioncall .)
    BINAND          reduce using rule 78 (expression -> functioncall .)
    BINOR           reduce using rule 78 (expression -> functioncall .)
    BINXOR          reduce using rule 78 (expression -> functioncall .)
    LT              reduce using rule 78 (expression -> functioncall .)
    GT              reduce using rule 78 (expression -> functioncall .)
    DOUBLEEQ        reduce using rule 78 (expression -> functioncall .)
    NOTEQUAL        reduce using rule 78 (expression -> functioncall .)
    LTE             reduce using rule 78 (expression -> functioncall .)
    GTE             reduce using rule 78 (expression -> functioncall .)
    STREQUAL        reduce using rule 78 (expression -> functioncall .)
    STRNEQUAL       reduce using rule 78 (expression -> functioncall .)
    AND             reduce using rule 78 (expression -> functioncall .)
    OR              reduce using rule 78 (expression -> functioncall .)
    LSHIFT          reduce using rule 78 (expression -> functioncall .)
    RSHIFT          reduce using rule 78 (expression -> functioncall .)
    URSHIFT         reduce using rule 78 (expression -> functioncall .)
    SEMICOLON       reduce using rule 78 (expression -> functioncall .)
    BREAK           reduce using rule 78 (expression -> functioncall .)
    CONTINUE        reduce using rule 78 (expression -> functioncall .)
    RETURN          reduce using rule 78 (expression -> functioncall .)
    CONSOLE         reduce using rule 78 (expression -> functioncall .)
    VAR             reduce using rule 78 (expression -> functioncall .)
    LEFTPAREN       reduce using rule 78 (expression -> functioncall .)
    ID              reduce using rule 78 (expression -> functioncall .)
    EVAL            reduce using rule 78 (expression -> functioncall .)
    NOT             reduce using rule 78 (expression -> functioncall .)
    BINNOT          reduce using rule 78 (expression -> functioncall .)
    TYPEOF          reduce using rule 78 (expression -> functioncall .)
    IF              reduce using rule 78 (expression -> functioncall .)
    WHILE           reduce using rule 78 (expression -> functioncall .)
    FOR             reduce using rule 78 (expression -> functioncall .)
    FUNCTION        reduce using rule 78 (expression -> functioncall .)
    NUMBER          reduce using rule 78 (expression -> functioncall .)
    STRING          reduce using rule 78 (expression -> functioncall .)
    UNDEFINED       reduce using rule 78 (expression -> functioncall .)
    $end            reduce using rule 78 (expression -> functioncall .)
    RIGHTBRACE      reduce using rule 78 (expression -> functioncall .)
    RIGHTPAREN      reduce using rule 78 (expression -> functioncall .)
    ELSE            reduce using rule 78 (expression -> functioncall .)
    LEFTBRACE       reduce using rule 78 (expression -> functioncall .)
    RIGHTBRACKET    reduce using rule 78 (expression -> functioncall .)
    COMMA           reduce using rule 78 (expression -> functioncall .)


state 39

    (90) if -> IF expression . cblock
    (91) ifelse -> IF expression . cblock ELSE cblock
    (92) ifelse -> IF expression . cblock ELSE if
    (93) ifelse -> IF expression . cblock ELSE ifelse
    (52) expression -> expression . PLUS expression
    (53) expression -> expression . MINUS expression
    (54) expression -> expression . INTO expression
    (55) expression -> expression . DIVIDE expression
    (56) expression -> expression . MOD expression
    (57) expression -> expression . EXPO expression
    (60) expression -> expression . BINAND expression
    (61) expression -> expression . BINOR expression
    (62) expression -> expression . BINXOR expression
    (64) expression -> expression . LT expression
    (65) expression -> expression . GT expression
    (66) expression -> expression . DOUBLEEQ expression
    (67) expression -> expression . NOTEQUAL expression
    (68) expression -> expression . LTE expression
    (69) expression -> expression . GTE expression
    (70) expression -> expression . STREQUAL expression
    (71) expression -> expression . STRNEQUAL expression
    (72) expression -> expression . AND expression
    (73) expression -> expression . OR expression
    (74) expression -> expression . LSHIFT expression
    (75) expression -> expression . RSHIFT expression
    (76) expression -> expression . URSHIFT expression
    (94) cblock -> . block
    (95) cblock -> . statement
    (3) block -> . LEFTBRACE statements RIGHTBRACE
    (4) block -> . LEFTBRACE RIGHTBRACE
    (7) statement -> . assignment SEMICOLON
    (8) statement -> . reassignment SEMICOLON
    (9) statement -> . BREAK SEMICOLON
    (10) statement -> . CONTINUE SEMICOLON
    (11) statement -> . RETURN expression SEMICOLON
    (12) statement -> . expression SEMICOLON
    (13) statement -> . CONSOLE DOT LOG LEFTPAREN expression RIGHTPAREN SEMICOLON
    (14) statement -> . functioncall SEMICOLON
    (15) statement -> . if
    (16) statement -> . ifelse
    (17) statement -> . whileloop
    (18) statement -> . forloop
    (19) statement -> . funcdecl
    (106) statement -> . assignment
    (107) statement -> . reassignment
    (108) statement -> . BREAK
    (109) statement -> . CONTINUE
    (110) statement -> . expression
    (111) statement -> . CONSOLE DOT LOG LEFTPAREN expression RIGHTPAREN
    (112) statement -> . functioncall
    (20) assignment -> . VAR assignlist
    (21) assignment -> . LEFTPAREN assignment RIGHTPAREN
    (28) reassignment -> . ID EQ expression
    (29) reassignment -> . ID PLUSEQ expression
    (30) reassignment -> . ID MINUSEQ expression
    (31) reassignment -> . ID INTOEQ expression
    (32) reassignment -> . ID DIVEQ expression
    (33) reassignment -> . ID INCR
    (34) reassignment -> . ID DECR
    (35) reassignment -> . ID LSHIFTEQ expression
    (36) reassignment -> . ID RSHIFTEQ expression
    (37) reassignment -> . ID URSHIFTEQ expression
    (38) reassignment -> . ID ANDEQ expression
    (39) reassignment -> . ID OREQ expression
    (40) reassignment -> . ID XOREQ expression
    (41) reassignment -> . ID MODEQ expression
    (42) reassignment -> . arraydecl
    (43) reassignment -> . LEFTPAREN reassignment RIGHTPAREN
    (50) expression -> . EVAL LEFTPAREN statements RIGHTPAREN
    (51) expression -> . EVAL LEFTPAREN block RIGHTPAREN
    (52) expression -> . expression PLUS expression
    (53) expression -> . expression MINUS expression
    (54) expression -> . expression INTO expression
    (55) expression -> . expression DIVIDE expression
    (56) expression -> . expression MOD expression
    (57) expression -> . expression EXPO expression
    (58) expression -> . LEFTPAREN expression RIGHTPAREN
    (59) expression -> . NOT expression
    (60) expression -> . expression BINAND expression
    (61) expression -> . expression BINOR expression
    (62) expression -> . expression BINXOR expression
    (63) expression -> . BINNOT expression
    (64) expression -> . expression LT expression
    (65) expression -> . expression GT expression
    (66) expression -> . expression DOUBLEEQ expression
    (67) expression -> . expression NOTEQUAL expression
    (68) expression -> . expression LTE expression
    (69) expression -> . expression GTE expression
    (70) expression -> . expression STREQUAL expression
    (71) expression -> . expression STRNEQUAL expression
    (72) expression -> . expression AND expression
    (73) expression -> . expression OR expression
    (74) expression -> . expression LSHIFT expression
    (75) expression -> . expression RSHIFT expression
    (76) expression -> . expression URSHIFT expression
    (77) expression -> . basicTypes
    (78) expression -> . functioncall
    (79) expression -> . arrayCall
    (80) expression -> . TYPEOF expression
    (86) functioncall -> . ID LEFTPAREN argList RIGHTPAREN
    (90) if -> . IF expression cblock
    (91) ifelse -> . IF expression cblock ELSE cblock
    (92) ifelse -> . IF expression cblock ELSE if
    (93) ifelse -> . IF expression cblock ELSE ifelse
    (96) whileloop -> . WHILE LEFTPAREN expression RIGHTPAREN cblock
    (97) forloop -> . FOR LEFTPAREN initialization SEMICOLON expression SEMICOLON increment RIGHTPAREN cblock
    (104) funcdecl -> . FUNCTION ID LEFTPAREN argList RIGHTPAREN cblock
    (105) funcdecl -> . VAR ID EQ FUNCTION LEFTPAREN argList RIGHTPAREN cblock SEMICOLON
    (44) arraydecl -> . ID EQ LEFTBRACKET arrayList RIGHTBRACKET
    (82) basicTypes -> . NUMBER
    (83) basicTypes -> . STRING
    (84) basicTypes -> . ID
    (85) basicTypes -> . UNDEFINED
    (81) arrayCall -> . ID LEFTBRACKET expression RIGHTBRACKET

    PLUS            shift and go to state 92
    MINUS           shift and go to state 86
    INTO            shift and go to state 97
    DIVIDE          shift and go to state 96
    MOD             shift and go to state 103
    EXPO            shift and go to state 93
    BINAND          shift and go to state 88
    BINOR           shift and go to state 100
    BINXOR          shift and go to state 94
    LT              shift and go to state 91
    GT              shift and go to state 95
    DOUBLEEQ        shift and go to state 81
    NOTEQUAL        shift and go to state 83
    LTE             shift and go to state 98
    GTE             shift and go to state 87
    STREQUAL        shift and go to state 90
    STRNEQUAL       shift and go to state 84
    AND             shift and go to state 99
    OR              shift and go to state 102
    LSHIFT          shift and go to state 85
    RSHIFT          shift and go to state 82
    URSHIFT         shift and go to state 101
    LEFTBRACE       shift and go to state 24
    BREAK           shift and go to state 27
    CONTINUE        shift and go to state 28
    RETURN          shift and go to state 5
    CONSOLE         shift and go to state 17
    VAR             shift and go to state 22
    LEFTPAREN       shift and go to state 19
    ID              shift and go to state 23
    EVAL            shift and go to state 20
    NOT             shift and go to state 32
    BINNOT          shift and go to state 25
    TYPEOF          shift and go to state 15
    IF              shift and go to state 3
    WHILE           shift and go to state 4
    FOR             shift and go to state 9
    FUNCTION        shift and go to state 31
    NUMBER          shift and go to state 2
    STRING          shift and go to state 14
    UNDEFINED       shift and go to state 21

    whileloop                      shift and go to state 7
    forloop                        shift and go to state 16
    expression                     shift and go to state 34
    funcdecl                       shift and go to state 26
    reassignment                   shift and go to state 8
    arrayCall                      shift and go to state 10
    ifelse                         shift and go to state 12
    arraydecl                      shift and go to state 30
    statement                      shift and go to state 104
    assignment                     shift and go to state 18
    functioncall                   shift and go to state 29
    basicTypes                     shift and go to state 33
    cblock                         shift and go to state 105
    block                          shift and go to state 106
    if                             shift and go to state 6

state 40

    (96) whileloop -> WHILE LEFTPAREN . expression RIGHTPAREN cblock
    (50) expression -> . EVAL LEFTPAREN statements RIGHTPAREN
    (51) expression -> . EVAL LEFTPAREN block RIGHTPAREN
    (52) expression -> . expression PLUS expression
    (53) expression -> . expression MINUS expression
    (54) expression -> . expression INTO expression
    (55) expression -> . expression DIVIDE expression
    (56) expression -> . expression MOD expression
    (57) expression -> . expression EXPO expression
    (58) expression -> . LEFTPAREN expression RIGHTPAREN
    (59) expression -> . NOT expression
    (60) expression -> . expression BINAND expression
    (61) expression -> . expression BINOR expression
    (62) expression -> . expression BINXOR expression
    (63) expression -> . BINNOT expression
    (64) expression -> . expression LT expression
    (65) expression -> . expression GT expression
    (66) expression -> . expression DOUBLEEQ expression
    (67) expression -> . expression NOTEQUAL expression
    (68) expression -> . expression LTE expression
    (69) expression -> . expression GTE expression
    (70) expression -> . expression STREQUAL expression
    (71) expression -> . expression STRNEQUAL expression
    (72) expression -> . expression AND expression
    (73) expression -> . expression OR expression
    (74) expression -> . expression LSHIFT expression
    (75) expression -> . expression RSHIFT expression
    (76) expression -> . expression URSHIFT expression
    (77) expression -> . basicTypes
    (78) expression -> . functioncall
    (79) expression -> . arrayCall
    (80) expression -> . TYPEOF expression
    (82) basicTypes -> . NUMBER
    (83) basicTypes -> . STRING
    (84) basicTypes -> . ID
    (85) basicTypes -> . UNDEFINED
    (86) functioncall -> . ID LEFTPAREN argList RIGHTPAREN
    (81) arrayCall -> . ID LEFTBRACKET expression RIGHTBRACKET

    EVAL            shift and go to state 20
    LEFTPAREN       shift and go to state 36
    NOT             shift and go to state 32
    BINNOT          shift and go to state 25
    TYPEOF          shift and go to state 15
    NUMBER          shift and go to state 2
    STRING          shift and go to state 14
    ID              shift and go to state 37
    UNDEFINED       shift and go to state 21

    expression                     shift and go to state 107
    arrayCall                      shift and go to state 10
    functioncall                   shift and go to state 38
    basicTypes                     shift and go to state 33

state 41

    (11) statement -> RETURN expression . SEMICOLON
    (52) expression -> expression . PLUS expression
    (53) expression -> expression . MINUS expression
    (54) expression -> expression . INTO expression
    (55) expression -> expression . DIVIDE expression
    (56) expression -> expression . MOD expression
    (57) expression -> expression . EXPO expression
    (60) expression -> expression . BINAND expression
    (61) expression -> expression . BINOR expression
    (62) expression -> expression . BINXOR expression
    (64) expression -> expression . LT expression
    (65) expression -> expression . GT expression
    (66) expression -> expression . DOUBLEEQ expression
    (67) expression -> expression . NOTEQUAL expression
    (68) expression -> expression . LTE expression
    (69) expression -> expression . GTE expression
    (70) expression -> expression . STREQUAL expression
    (71) expression -> expression . STRNEQUAL expression
    (72) expression -> expression . AND expression
    (73) expression -> expression . OR expression
    (74) expression -> expression . LSHIFT expression
    (75) expression -> expression . RSHIFT expression
    (76) expression -> expression . URSHIFT expression

    SEMICOLON       shift and go to state 108
    PLUS            shift and go to state 92
    MINUS           shift and go to state 86
    INTO            shift and go to state 97
    DIVIDE          shift and go to state 96
    MOD             shift and go to state 103
    EXPO            shift and go to state 93
    BINAND          shift and go to state 88
    BINOR           shift and go to state 100
    BINXOR          shift and go to state 94
    LT              shift and go to state 91
    GT              shift and go to state 95
    DOUBLEEQ        shift and go to state 81
    NOTEQUAL        shift and go to state 83
    LTE             shift and go to state 98
    GTE             shift and go to state 87
    STREQUAL        shift and go to state 90
    STRNEQUAL       shift and go to state 84
    AND             shift and go to state 99
    OR              shift and go to state 102
    LSHIFT          shift and go to state 85
    RSHIFT          shift and go to state 82
    URSHIFT         shift and go to state 101


state 42

    (8) statement -> reassignment SEMICOLON .

    ELSE            reduce using rule 8 (statement -> reassignment SEMICOLON .)
    BREAK           reduce using rule 8 (statement -> reassignment SEMICOLON .)
    CONTINUE        reduce using rule 8 (statement -> reassignment SEMICOLON .)
    RETURN          reduce using rule 8 (statement -> reassignment SEMICOLON .)
    CONSOLE         reduce using rule 8 (statement -> reassignment SEMICOLON .)
    VAR             reduce using rule 8 (statement -> reassignment SEMICOLON .)
    LEFTPAREN       reduce using rule 8 (statement -> reassignment SEMICOLON .)
    ID              reduce using rule 8 (statement -> reassignment SEMICOLON .)
    EVAL            reduce using rule 8 (statement -> reassignment SEMICOLON .)
    NOT             reduce using rule 8 (statement -> reassignment SEMICOLON .)
    BINNOT          reduce using rule 8 (statement -> reassignment SEMICOLON .)
    TYPEOF          reduce using rule 8 (statement -> reassignment SEMICOLON .)
    IF              reduce using rule 8 (statement -> reassignment SEMICOLON .)
    WHILE           reduce using rule 8 (statement -> reassignment SEMICOLON .)
    FOR             reduce using rule 8 (statement -> reassignment SEMICOLON .)
    FUNCTION        reduce using rule 8 (statement -> reassignment SEMICOLON .)
    NUMBER          reduce using rule 8 (statement -> reassignment SEMICOLON .)
    STRING          reduce using rule 8 (statement -> reassignment SEMICOLON .)
    UNDEFINED       reduce using rule 8 (statement -> reassignment SEMICOLON .)
    $end            reduce using rule 8 (statement -> reassignment SEMICOLON .)
    RIGHTBRACE      reduce using rule 8 (statement -> reassignment SEMICOLON .)
    RIGHTPAREN      reduce using rule 8 (statement -> reassignment SEMICOLON .)
    SEMICOLON       reduce using rule 8 (statement -> reassignment SEMICOLON .)


state 43

    (97) forloop -> FOR LEFTPAREN . initialization SEMICOLON expression SEMICOLON increment RIGHTPAREN cblock
    (98) initialization -> . assignment SEMICOLON initialization
    (99) initialization -> . reassignment SEMICOLON initialization
    (100) initialization -> . assignment
    (101) initialization -> . reassignment
    (20) assignment -> . VAR assignlist
    (21) assignment -> . LEFTPAREN assignment RIGHTPAREN
    (28) reassignment -> . ID EQ expression
    (29) reassignment -> . ID PLUSEQ expression
    (30) reassignment -> . ID MINUSEQ expression
    (31) reassignment -> . ID INTOEQ expression
    (32) reassignment -> . ID DIVEQ expression
    (33) reassignment -> . ID INCR
    (34) reassignment -> . ID DECR
    (35) reassignment -> . ID LSHIFTEQ expression
    (36) reassignment -> . ID RSHIFTEQ expression
    (37) reassignment -> . ID URSHIFTEQ expression
    (38) reassignment -> . ID ANDEQ expression
    (39) reassignment -> . ID OREQ expression
    (40) reassignment -> . ID XOREQ expression
    (41) reassignment -> . ID MODEQ expression
    (42) reassignment -> . arraydecl
    (43) reassignment -> . LEFTPAREN reassignment RIGHTPAREN
    (44) arraydecl -> . ID EQ LEFTBRACKET arrayList RIGHTBRACKET

    VAR             shift and go to state 49
    LEFTPAREN       shift and go to state 111
    ID              shift and go to state 112

    initialization                 shift and go to state 110
    reassignment                   shift and go to state 113
    assignment                     shift and go to state 109
    arraydecl                      shift and go to state 30

state 44

    (5) statements -> statement statements .

    $end            reduce using rule 5 (statements -> statement statements .)
    RIGHTBRACE      reduce using rule 5 (statements -> statement statements .)
    RIGHTPAREN      reduce using rule 5 (statements -> statement statements .)


state 45

    (80) expression -> TYPEOF expression .
    (52) expression -> expression . PLUS expression
    (53) expression -> expression . MINUS expression
    (54) expression -> expression . INTO expression
    (55) expression -> expression . DIVIDE expression
    (56) expression -> expression . MOD expression
    (57) expression -> expression . EXPO expression
    (60) expression -> expression . BINAND expression
    (61) expression -> expression . BINOR expression
    (62) expression -> expression . BINXOR expression
    (64) expression -> expression . LT expression
    (65) expression -> expression . GT expression
    (66) expression -> expression . DOUBLEEQ expression
    (67) expression -> expression . NOTEQUAL expression
    (68) expression -> expression . LTE expression
    (69) expression -> expression . GTE expression
    (70) expression -> expression . STREQUAL expression
    (71) expression -> expression . STRNEQUAL expression
    (72) expression -> expression . AND expression
    (73) expression -> expression . OR expression
    (74) expression -> expression . LSHIFT expression
    (75) expression -> expression . RSHIFT expression
    (76) expression -> expression . URSHIFT expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for INTO resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for EXPO resolved as shift
  ! shift/reduce conflict for BINAND resolved as shift
  ! shift/reduce conflict for BINOR resolved as shift
  ! shift/reduce conflict for BINXOR resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for DOUBLEEQ resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for LTE resolved as shift
  ! shift/reduce conflict for GTE resolved as shift
  ! shift/reduce conflict for STREQUAL resolved as shift
  ! shift/reduce conflict for STRNEQUAL resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for LSHIFT resolved as shift
  ! shift/reduce conflict for RSHIFT resolved as shift
  ! shift/reduce conflict for URSHIFT resolved as shift
    SEMICOLON       reduce using rule 80 (expression -> TYPEOF expression .)
    BREAK           reduce using rule 80 (expression -> TYPEOF expression .)
    CONTINUE        reduce using rule 80 (expression -> TYPEOF expression .)
    RETURN          reduce using rule 80 (expression -> TYPEOF expression .)
    CONSOLE         reduce using rule 80 (expression -> TYPEOF expression .)
    VAR             reduce using rule 80 (expression -> TYPEOF expression .)
    LEFTPAREN       reduce using rule 80 (expression -> TYPEOF expression .)
    ID              reduce using rule 80 (expression -> TYPEOF expression .)
    EVAL            reduce using rule 80 (expression -> TYPEOF expression .)
    NOT             reduce using rule 80 (expression -> TYPEOF expression .)
    BINNOT          reduce using rule 80 (expression -> TYPEOF expression .)
    TYPEOF          reduce using rule 80 (expression -> TYPEOF expression .)
    IF              reduce using rule 80 (expression -> TYPEOF expression .)
    WHILE           reduce using rule 80 (expression -> TYPEOF expression .)
    FOR             reduce using rule 80 (expression -> TYPEOF expression .)
    FUNCTION        reduce using rule 80 (expression -> TYPEOF expression .)
    NUMBER          reduce using rule 80 (expression -> TYPEOF expression .)
    STRING          reduce using rule 80 (expression -> TYPEOF expression .)
    UNDEFINED       reduce using rule 80 (expression -> TYPEOF expression .)
    $end            reduce using rule 80 (expression -> TYPEOF expression .)
    RIGHTBRACE      reduce using rule 80 (expression -> TYPEOF expression .)
    RIGHTPAREN      reduce using rule 80 (expression -> TYPEOF expression .)
    ELSE            reduce using rule 80 (expression -> TYPEOF expression .)
    LEFTBRACE       reduce using rule 80 (expression -> TYPEOF expression .)
    RIGHTBRACKET    reduce using rule 80 (expression -> TYPEOF expression .)
    COMMA           reduce using rule 80 (expression -> TYPEOF expression .)
    PLUS            shift and go to state 92
    MINUS           shift and go to state 86
    INTO            shift and go to state 97
    DIVIDE          shift and go to state 96
    MOD             shift and go to state 103
    EXPO            shift and go to state 93
    BINAND          shift and go to state 88
    BINOR           shift and go to state 100
    BINXOR          shift and go to state 94
    LT              shift and go to state 91
    GT              shift and go to state 95
    DOUBLEEQ        shift and go to state 81
    NOTEQUAL        shift and go to state 83
    LTE             shift and go to state 98
    GTE             shift and go to state 87
    STREQUAL        shift and go to state 90
    STRNEQUAL       shift and go to state 84
    AND             shift and go to state 99
    OR              shift and go to state 102
    LSHIFT          shift and go to state 85
    RSHIFT          shift and go to state 82
    URSHIFT         shift and go to state 101

  ! PLUS            [ reduce using rule 80 (expression -> TYPEOF expression .) ]
  ! MINUS           [ reduce using rule 80 (expression -> TYPEOF expression .) ]
  ! INTO            [ reduce using rule 80 (expression -> TYPEOF expression .) ]
  ! DIVIDE          [ reduce using rule 80 (expression -> TYPEOF expression .) ]
  ! MOD             [ reduce using rule 80 (expression -> TYPEOF expression .) ]
  ! EXPO            [ reduce using rule 80 (expression -> TYPEOF expression .) ]
  ! BINAND          [ reduce using rule 80 (expression -> TYPEOF expression .) ]
  ! BINOR           [ reduce using rule 80 (expression -> TYPEOF expression .) ]
  ! BINXOR          [ reduce using rule 80 (expression -> TYPEOF expression .) ]
  ! LT              [ reduce using rule 80 (expression -> TYPEOF expression .) ]
  ! GT              [ reduce using rule 80 (expression -> TYPEOF expression .) ]
  ! DOUBLEEQ        [ reduce using rule 80 (expression -> TYPEOF expression .) ]
  ! NOTEQUAL        [ reduce using rule 80 (expression -> TYPEOF expression .) ]
  ! LTE             [ reduce using rule 80 (expression -> TYPEOF expression .) ]
  ! GTE             [ reduce using rule 80 (expression -> TYPEOF expression .) ]
  ! STREQUAL        [ reduce using rule 80 (expression -> TYPEOF expression .) ]
  ! STRNEQUAL       [ reduce using rule 80 (expression -> TYPEOF expression .) ]
  ! AND             [ reduce using rule 80 (expression -> TYPEOF expression .) ]
  ! OR              [ reduce using rule 80 (expression -> TYPEOF expression .) ]
  ! LSHIFT          [ reduce using rule 80 (expression -> TYPEOF expression .) ]
  ! RSHIFT          [ reduce using rule 80 (expression -> TYPEOF expression .) ]
  ! URSHIFT         [ reduce using rule 80 (expression -> TYPEOF expression .) ]


state 46

    (13) statement -> CONSOLE DOT . LOG LEFTPAREN expression RIGHTPAREN SEMICOLON
    (111) statement -> CONSOLE DOT . LOG LEFTPAREN expression RIGHTPAREN

    LOG             shift and go to state 114


state 47

    (7) statement -> assignment SEMICOLON .

    ELSE            reduce using rule 7 (statement -> assignment SEMICOLON .)
    BREAK           reduce using rule 7 (statement -> assignment SEMICOLON .)
    CONTINUE        reduce using rule 7 (statement -> assignment SEMICOLON .)
    RETURN          reduce using rule 7 (statement -> assignment SEMICOLON .)
    CONSOLE         reduce using rule 7 (statement -> assignment SEMICOLON .)
    VAR             reduce using rule 7 (statement -> assignment SEMICOLON .)
    LEFTPAREN       reduce using rule 7 (statement -> assignment SEMICOLON .)
    ID              reduce using rule 7 (statement -> assignment SEMICOLON .)
    EVAL            reduce using rule 7 (statement -> assignment SEMICOLON .)
    NOT             reduce using rule 7 (statement -> assignment SEMICOLON .)
    BINNOT          reduce using rule 7 (statement -> assignment SEMICOLON .)
    TYPEOF          reduce using rule 7 (statement -> assignment SEMICOLON .)
    IF              reduce using rule 7 (statement -> assignment SEMICOLON .)
    WHILE           reduce using rule 7 (statement -> assignment SEMICOLON .)
    FOR             reduce using rule 7 (statement -> assignment SEMICOLON .)
    FUNCTION        reduce using rule 7 (statement -> assignment SEMICOLON .)
    NUMBER          reduce using rule 7 (statement -> assignment SEMICOLON .)
    STRING          reduce using rule 7 (statement -> assignment SEMICOLON .)
    UNDEFINED       reduce using rule 7 (statement -> assignment SEMICOLON .)
    $end            reduce using rule 7 (statement -> assignment SEMICOLON .)
    RIGHTBRACE      reduce using rule 7 (statement -> assignment SEMICOLON .)
    RIGHTPAREN      reduce using rule 7 (statement -> assignment SEMICOLON .)
    SEMICOLON       reduce using rule 7 (statement -> assignment SEMICOLON .)


state 48

    (21) assignment -> LEFTPAREN assignment . RIGHTPAREN

    RIGHTPAREN      shift and go to state 115


state 49

    (20) assignment -> VAR . assignlist
    (22) assignlist -> . ID EQ expression COMMA assignlist
    (23) assignlist -> . ID COMMA assignlist
    (24) assignlist -> . arraydecl COMMA assignlist
    (25) assignlist -> . ID EQ expression
    (26) assignlist -> . ID
    (27) assignlist -> . arraydecl
    (44) arraydecl -> . ID EQ LEFTBRACKET arrayList RIGHTBRACKET

    ID              shift and go to state 116

    assignlist                     shift and go to state 54
    arraydecl                      shift and go to state 56

state 50

    (28) reassignment -> ID . EQ expression
    (29) reassignment -> ID . PLUSEQ expression
    (30) reassignment -> ID . MINUSEQ expression
    (31) reassignment -> ID . INTOEQ expression
    (32) reassignment -> ID . DIVEQ expression
    (33) reassignment -> ID . INCR
    (34) reassignment -> ID . DECR
    (35) reassignment -> ID . LSHIFTEQ expression
    (36) reassignment -> ID . RSHIFTEQ expression
    (37) reassignment -> ID . URSHIFTEQ expression
    (38) reassignment -> ID . ANDEQ expression
    (39) reassignment -> ID . OREQ expression
    (40) reassignment -> ID . XOREQ expression
    (41) reassignment -> ID . MODEQ expression
    (44) arraydecl -> ID . EQ LEFTBRACKET arrayList RIGHTBRACKET
    (84) basicTypes -> ID .
    (86) functioncall -> ID . LEFTPAREN argList RIGHTPAREN
    (81) arrayCall -> ID . LEFTBRACKET expression RIGHTBRACKET

    EQ              shift and go to state 70
    PLUSEQ          shift and go to state 72
    MINUSEQ         shift and go to state 63
    INTOEQ          shift and go to state 58
    DIVEQ           shift and go to state 66
    INCR            shift and go to state 60
    DECR            shift and go to state 59
    LSHIFTEQ        shift and go to state 67
    RSHIFTEQ        shift and go to state 71
    URSHIFTEQ       shift and go to state 62
    ANDEQ           shift and go to state 69
    OREQ            shift and go to state 65
    XOREQ           shift and go to state 61
    MODEQ           shift and go to state 57
    RIGHTPAREN      reduce using rule 84 (basicTypes -> ID .)
    PLUS            reduce using rule 84 (basicTypes -> ID .)
    MINUS           reduce using rule 84 (basicTypes -> ID .)
    INTO            reduce using rule 84 (basicTypes -> ID .)
    DIVIDE          reduce using rule 84 (basicTypes -> ID .)
    MOD             reduce using rule 84 (basicTypes -> ID .)
    EXPO            reduce using rule 84 (basicTypes -> ID .)
    BINAND          reduce using rule 84 (basicTypes -> ID .)
    BINOR           reduce using rule 84 (basicTypes -> ID .)
    BINXOR          reduce using rule 84 (basicTypes -> ID .)
    LT              reduce using rule 84 (basicTypes -> ID .)
    GT              reduce using rule 84 (basicTypes -> ID .)
    DOUBLEEQ        reduce using rule 84 (basicTypes -> ID .)
    NOTEQUAL        reduce using rule 84 (basicTypes -> ID .)
    LTE             reduce using rule 84 (basicTypes -> ID .)
    GTE             reduce using rule 84 (basicTypes -> ID .)
    STREQUAL        reduce using rule 84 (basicTypes -> ID .)
    STRNEQUAL       reduce using rule 84 (basicTypes -> ID .)
    AND             reduce using rule 84 (basicTypes -> ID .)
    OR              reduce using rule 84 (basicTypes -> ID .)
    LSHIFT          reduce using rule 84 (basicTypes -> ID .)
    RSHIFT          reduce using rule 84 (basicTypes -> ID .)
    URSHIFT         reduce using rule 84 (basicTypes -> ID .)
    LEFTPAREN       shift and go to state 68
    LEFTBRACKET     shift and go to state 64


state 51

    (43) reassignment -> LEFTPAREN reassignment . RIGHTPAREN

    RIGHTPAREN      shift and go to state 117


state 52

    (58) expression -> LEFTPAREN expression . RIGHTPAREN
    (52) expression -> expression . PLUS expression
    (53) expression -> expression . MINUS expression
    (54) expression -> expression . INTO expression
    (55) expression -> expression . DIVIDE expression
    (56) expression -> expression . MOD expression
    (57) expression -> expression . EXPO expression
    (60) expression -> expression . BINAND expression
    (61) expression -> expression . BINOR expression
    (62) expression -> expression . BINXOR expression
    (64) expression -> expression . LT expression
    (65) expression -> expression . GT expression
    (66) expression -> expression . DOUBLEEQ expression
    (67) expression -> expression . NOTEQUAL expression
    (68) expression -> expression . LTE expression
    (69) expression -> expression . GTE expression
    (70) expression -> expression . STREQUAL expression
    (71) expression -> expression . STRNEQUAL expression
    (72) expression -> expression . AND expression
    (73) expression -> expression . OR expression
    (74) expression -> expression . LSHIFT expression
    (75) expression -> expression . RSHIFT expression
    (76) expression -> expression . URSHIFT expression

    RIGHTPAREN      shift and go to state 118
    PLUS            shift and go to state 92
    MINUS           shift and go to state 86
    INTO            shift and go to state 97
    DIVIDE          shift and go to state 96
    MOD             shift and go to state 103
    EXPO            shift and go to state 93
    BINAND          shift and go to state 88
    BINOR           shift and go to state 100
    BINXOR          shift and go to state 94
    LT              shift and go to state 91
    GT              shift and go to state 95
    DOUBLEEQ        shift and go to state 81
    NOTEQUAL        shift and go to state 83
    LTE             shift and go to state 98
    GTE             shift and go to state 87
    STREQUAL        shift and go to state 90
    STRNEQUAL       shift and go to state 84
    AND             shift and go to state 99
    OR              shift and go to state 102
    LSHIFT          shift and go to state 85
    RSHIFT          shift and go to state 82
    URSHIFT         shift and go to state 101


state 53

    (50) expression -> EVAL LEFTPAREN . statements RIGHTPAREN
    (51) expression -> EVAL LEFTPAREN . block RIGHTPAREN
    (5) statements -> . statement statements
    (6) statements -> . statement
    (3) block -> . LEFTBRACE statements RIGHTBRACE
    (4) block -> . LEFTBRACE RIGHTBRACE
    (7) statement -> . assignment SEMICOLON
    (8) statement -> . reassignment SEMICOLON
    (9) statement -> . BREAK SEMICOLON
    (10) statement -> . CONTINUE SEMICOLON
    (11) statement -> . RETURN expression SEMICOLON
    (12) statement -> . expression SEMICOLON
    (13) statement -> . CONSOLE DOT LOG LEFTPAREN expression RIGHTPAREN SEMICOLON
    (14) statement -> . functioncall SEMICOLON
    (15) statement -> . if
    (16) statement -> . ifelse
    (17) statement -> . whileloop
    (18) statement -> . forloop
    (19) statement -> . funcdecl
    (106) statement -> . assignment
    (107) statement -> . reassignment
    (108) statement -> . BREAK
    (109) statement -> . CONTINUE
    (110) statement -> . expression
    (111) statement -> . CONSOLE DOT LOG LEFTPAREN expression RIGHTPAREN
    (112) statement -> . functioncall
    (20) assignment -> . VAR assignlist
    (21) assignment -> . LEFTPAREN assignment RIGHTPAREN
    (28) reassignment -> . ID EQ expression
    (29) reassignment -> . ID PLUSEQ expression
    (30) reassignment -> . ID MINUSEQ expression
    (31) reassignment -> . ID INTOEQ expression
    (32) reassignment -> . ID DIVEQ expression
    (33) reassignment -> . ID INCR
    (34) reassignment -> . ID DECR
    (35) reassignment -> . ID LSHIFTEQ expression
    (36) reassignment -> . ID RSHIFTEQ expression
    (37) reassignment -> . ID URSHIFTEQ expression
    (38) reassignment -> . ID ANDEQ expression
    (39) reassignment -> . ID OREQ expression
    (40) reassignment -> . ID XOREQ expression
    (41) reassignment -> . ID MODEQ expression
    (42) reassignment -> . arraydecl
    (43) reassignment -> . LEFTPAREN reassignment RIGHTPAREN
    (50) expression -> . EVAL LEFTPAREN statements RIGHTPAREN
    (51) expression -> . EVAL LEFTPAREN block RIGHTPAREN
    (52) expression -> . expression PLUS expression
    (53) expression -> . expression MINUS expression
    (54) expression -> . expression INTO expression
    (55) expression -> . expression DIVIDE expression
    (56) expression -> . expression MOD expression
    (57) expression -> . expression EXPO expression
    (58) expression -> . LEFTPAREN expression RIGHTPAREN
    (59) expression -> . NOT expression
    (60) expression -> . expression BINAND expression
    (61) expression -> . expression BINOR expression
    (62) expression -> . expression BINXOR expression
    (63) expression -> . BINNOT expression
    (64) expression -> . expression LT expression
    (65) expression -> . expression GT expression
    (66) expression -> . expression DOUBLEEQ expression
    (67) expression -> . expression NOTEQUAL expression
    (68) expression -> . expression LTE expression
    (69) expression -> . expression GTE expression
    (70) expression -> . expression STREQUAL expression
    (71) expression -> . expression STRNEQUAL expression
    (72) expression -> . expression AND expression
    (73) expression -> . expression OR expression
    (74) expression -> . expression LSHIFT expression
    (75) expression -> . expression RSHIFT expression
    (76) expression -> . expression URSHIFT expression
    (77) expression -> . basicTypes
    (78) expression -> . functioncall
    (79) expression -> . arrayCall
    (80) expression -> . TYPEOF expression
    (86) functioncall -> . ID LEFTPAREN argList RIGHTPAREN
    (90) if -> . IF expression cblock
    (91) ifelse -> . IF expression cblock ELSE cblock
    (92) ifelse -> . IF expression cblock ELSE if
    (93) ifelse -> . IF expression cblock ELSE ifelse
    (96) whileloop -> . WHILE LEFTPAREN expression RIGHTPAREN cblock
    (97) forloop -> . FOR LEFTPAREN initialization SEMICOLON expression SEMICOLON increment RIGHTPAREN cblock
    (104) funcdecl -> . FUNCTION ID LEFTPAREN argList RIGHTPAREN cblock
    (105) funcdecl -> . VAR ID EQ FUNCTION LEFTPAREN argList RIGHTPAREN cblock SEMICOLON
    (44) arraydecl -> . ID EQ LEFTBRACKET arrayList RIGHTBRACKET
    (82) basicTypes -> . NUMBER
    (83) basicTypes -> . STRING
    (84) basicTypes -> . ID
    (85) basicTypes -> . UNDEFINED
    (81) arrayCall -> . ID LEFTBRACKET expression RIGHTBRACKET

    LEFTBRACE       shift and go to state 24
    BREAK           shift and go to state 27
    CONTINUE        shift and go to state 28
    RETURN          shift and go to state 5
    CONSOLE         shift and go to state 17
    VAR             shift and go to state 22
    LEFTPAREN       shift and go to state 19
    ID              shift and go to state 23
    EVAL            shift and go to state 20
    NOT             shift and go to state 32
    BINNOT          shift and go to state 25
    TYPEOF          shift and go to state 15
    IF              shift and go to state 3
    WHILE           shift and go to state 4
    FOR             shift and go to state 9
    FUNCTION        shift and go to state 31
    NUMBER          shift and go to state 2
    STRING          shift and go to state 14
    UNDEFINED       shift and go to state 21

    whileloop                      shift and go to state 7
    forloop                        shift and go to state 16
    statements                     shift and go to state 119
    assignment                     shift and go to state 18
    funcdecl                       shift and go to state 26
    reassignment                   shift and go to state 8
    arrayCall                      shift and go to state 10
    functioncall                   shift and go to state 29
    arraydecl                      shift and go to state 30
    statement                      shift and go to state 13
    ifelse                         shift and go to state 12
    basicTypes                     shift and go to state 33
    expression                     shift and go to state 34
    block                          shift and go to state 120
    if                             shift and go to state 6

state 54

    (20) assignment -> VAR assignlist .

    SEMICOLON       reduce using rule 20 (assignment -> VAR assignlist .)
    ELSE            reduce using rule 20 (assignment -> VAR assignlist .)
    BREAK           reduce using rule 20 (assignment -> VAR assignlist .)
    CONTINUE        reduce using rule 20 (assignment -> VAR assignlist .)
    RETURN          reduce using rule 20 (assignment -> VAR assignlist .)
    CONSOLE         reduce using rule 20 (assignment -> VAR assignlist .)
    VAR             reduce using rule 20 (assignment -> VAR assignlist .)
    LEFTPAREN       reduce using rule 20 (assignment -> VAR assignlist .)
    ID              reduce using rule 20 (assignment -> VAR assignlist .)
    EVAL            reduce using rule 20 (assignment -> VAR assignlist .)
    NOT             reduce using rule 20 (assignment -> VAR assignlist .)
    BINNOT          reduce using rule 20 (assignment -> VAR assignlist .)
    TYPEOF          reduce using rule 20 (assignment -> VAR assignlist .)
    IF              reduce using rule 20 (assignment -> VAR assignlist .)
    WHILE           reduce using rule 20 (assignment -> VAR assignlist .)
    FOR             reduce using rule 20 (assignment -> VAR assignlist .)
    FUNCTION        reduce using rule 20 (assignment -> VAR assignlist .)
    NUMBER          reduce using rule 20 (assignment -> VAR assignlist .)
    STRING          reduce using rule 20 (assignment -> VAR assignlist .)
    UNDEFINED       reduce using rule 20 (assignment -> VAR assignlist .)
    $end            reduce using rule 20 (assignment -> VAR assignlist .)
    RIGHTBRACE      reduce using rule 20 (assignment -> VAR assignlist .)
    RIGHTPAREN      reduce using rule 20 (assignment -> VAR assignlist .)


state 55

    (105) funcdecl -> VAR ID . EQ FUNCTION LEFTPAREN argList RIGHTPAREN cblock SEMICOLON
    (22) assignlist -> ID . EQ expression COMMA assignlist
    (23) assignlist -> ID . COMMA assignlist
    (25) assignlist -> ID . EQ expression
    (26) assignlist -> ID .
    (44) arraydecl -> ID . EQ LEFTBRACKET arrayList RIGHTBRACKET

    EQ              shift and go to state 122
    COMMA           shift and go to state 121
    SEMICOLON       reduce using rule 26 (assignlist -> ID .)
    BREAK           reduce using rule 26 (assignlist -> ID .)
    CONTINUE        reduce using rule 26 (assignlist -> ID .)
    RETURN          reduce using rule 26 (assignlist -> ID .)
    CONSOLE         reduce using rule 26 (assignlist -> ID .)
    VAR             reduce using rule 26 (assignlist -> ID .)
    LEFTPAREN       reduce using rule 26 (assignlist -> ID .)
    ID              reduce using rule 26 (assignlist -> ID .)
    EVAL            reduce using rule 26 (assignlist -> ID .)
    NOT             reduce using rule 26 (assignlist -> ID .)
    BINNOT          reduce using rule 26 (assignlist -> ID .)
    TYPEOF          reduce using rule 26 (assignlist -> ID .)
    IF              reduce using rule 26 (assignlist -> ID .)
    WHILE           reduce using rule 26 (assignlist -> ID .)
    FOR             reduce using rule 26 (assignlist -> ID .)
    FUNCTION        reduce using rule 26 (assignlist -> ID .)
    NUMBER          reduce using rule 26 (assignlist -> ID .)
    STRING          reduce using rule 26 (assignlist -> ID .)
    UNDEFINED       reduce using rule 26 (assignlist -> ID .)
    $end            reduce using rule 26 (assignlist -> ID .)
    RIGHTBRACE      reduce using rule 26 (assignlist -> ID .)
    RIGHTPAREN      reduce using rule 26 (assignlist -> ID .)
    ELSE            reduce using rule 26 (assignlist -> ID .)


state 56

    (24) assignlist -> arraydecl . COMMA assignlist
    (27) assignlist -> arraydecl .

    COMMA           shift and go to state 123
    RIGHTPAREN      reduce using rule 27 (assignlist -> arraydecl .)
    SEMICOLON       reduce using rule 27 (assignlist -> arraydecl .)
    BREAK           reduce using rule 27 (assignlist -> arraydecl .)
    CONTINUE        reduce using rule 27 (assignlist -> arraydecl .)
    RETURN          reduce using rule 27 (assignlist -> arraydecl .)
    CONSOLE         reduce using rule 27 (assignlist -> arraydecl .)
    VAR             reduce using rule 27 (assignlist -> arraydecl .)
    LEFTPAREN       reduce using rule 27 (assignlist -> arraydecl .)
    ID              reduce using rule 27 (assignlist -> arraydecl .)
    EVAL            reduce using rule 27 (assignlist -> arraydecl .)
    NOT             reduce using rule 27 (assignlist -> arraydecl .)
    BINNOT          reduce using rule 27 (assignlist -> arraydecl .)
    TYPEOF          reduce using rule 27 (assignlist -> arraydecl .)
    IF              reduce using rule 27 (assignlist -> arraydecl .)
    WHILE           reduce using rule 27 (assignlist -> arraydecl .)
    FOR             reduce using rule 27 (assignlist -> arraydecl .)
    FUNCTION        reduce using rule 27 (assignlist -> arraydecl .)
    NUMBER          reduce using rule 27 (assignlist -> arraydecl .)
    STRING          reduce using rule 27 (assignlist -> arraydecl .)
    UNDEFINED       reduce using rule 27 (assignlist -> arraydecl .)
    $end            reduce using rule 27 (assignlist -> arraydecl .)
    RIGHTBRACE      reduce using rule 27 (assignlist -> arraydecl .)
    ELSE            reduce using rule 27 (assignlist -> arraydecl .)


state 57

    (41) reassignment -> ID MODEQ . expression
    (50) expression -> . EVAL LEFTPAREN statements RIGHTPAREN
    (51) expression -> . EVAL LEFTPAREN block RIGHTPAREN
    (52) expression -> . expression PLUS expression
    (53) expression -> . expression MINUS expression
    (54) expression -> . expression INTO expression
    (55) expression -> . expression DIVIDE expression
    (56) expression -> . expression MOD expression
    (57) expression -> . expression EXPO expression
    (58) expression -> . LEFTPAREN expression RIGHTPAREN
    (59) expression -> . NOT expression
    (60) expression -> . expression BINAND expression
    (61) expression -> . expression BINOR expression
    (62) expression -> . expression BINXOR expression
    (63) expression -> . BINNOT expression
    (64) expression -> . expression LT expression
    (65) expression -> . expression GT expression
    (66) expression -> . expression DOUBLEEQ expression
    (67) expression -> . expression NOTEQUAL expression
    (68) expression -> . expression LTE expression
    (69) expression -> . expression GTE expression
    (70) expression -> . expression STREQUAL expression
    (71) expression -> . expression STRNEQUAL expression
    (72) expression -> . expression AND expression
    (73) expression -> . expression OR expression
    (74) expression -> . expression LSHIFT expression
    (75) expression -> . expression RSHIFT expression
    (76) expression -> . expression URSHIFT expression
    (77) expression -> . basicTypes
    (78) expression -> . functioncall
    (79) expression -> . arrayCall
    (80) expression -> . TYPEOF expression
    (82) basicTypes -> . NUMBER
    (83) basicTypes -> . STRING
    (84) basicTypes -> . ID
    (85) basicTypes -> . UNDEFINED
    (86) functioncall -> . ID LEFTPAREN argList RIGHTPAREN
    (81) arrayCall -> . ID LEFTBRACKET expression RIGHTBRACKET

    EVAL            shift and go to state 20
    LEFTPAREN       shift and go to state 36
    NOT             shift and go to state 32
    BINNOT          shift and go to state 25
    TYPEOF          shift and go to state 15
    NUMBER          shift and go to state 2
    STRING          shift and go to state 14
    ID              shift and go to state 37
    UNDEFINED       shift and go to state 21

    arrayCall                      shift and go to state 10
    functioncall                   shift and go to state 38
    expression                     shift and go to state 124
    basicTypes                     shift and go to state 33

state 58

    (31) reassignment -> ID INTOEQ . expression
    (50) expression -> . EVAL LEFTPAREN statements RIGHTPAREN
    (51) expression -> . EVAL LEFTPAREN block RIGHTPAREN
    (52) expression -> . expression PLUS expression
    (53) expression -> . expression MINUS expression
    (54) expression -> . expression INTO expression
    (55) expression -> . expression DIVIDE expression
    (56) expression -> . expression MOD expression
    (57) expression -> . expression EXPO expression
    (58) expression -> . LEFTPAREN expression RIGHTPAREN
    (59) expression -> . NOT expression
    (60) expression -> . expression BINAND expression
    (61) expression -> . expression BINOR expression
    (62) expression -> . expression BINXOR expression
    (63) expression -> . BINNOT expression
    (64) expression -> . expression LT expression
    (65) expression -> . expression GT expression
    (66) expression -> . expression DOUBLEEQ expression
    (67) expression -> . expression NOTEQUAL expression
    (68) expression -> . expression LTE expression
    (69) expression -> . expression GTE expression
    (70) expression -> . expression STREQUAL expression
    (71) expression -> . expression STRNEQUAL expression
    (72) expression -> . expression AND expression
    (73) expression -> . expression OR expression
    (74) expression -> . expression LSHIFT expression
    (75) expression -> . expression RSHIFT expression
    (76) expression -> . expression URSHIFT expression
    (77) expression -> . basicTypes
    (78) expression -> . functioncall
    (79) expression -> . arrayCall
    (80) expression -> . TYPEOF expression
    (82) basicTypes -> . NUMBER
    (83) basicTypes -> . STRING
    (84) basicTypes -> . ID
    (85) basicTypes -> . UNDEFINED
    (86) functioncall -> . ID LEFTPAREN argList RIGHTPAREN
    (81) arrayCall -> . ID LEFTBRACKET expression RIGHTBRACKET

    EVAL            shift and go to state 20
    LEFTPAREN       shift and go to state 36
    NOT             shift and go to state 32
    BINNOT          shift and go to state 25
    TYPEOF          shift and go to state 15
    NUMBER          shift and go to state 2
    STRING          shift and go to state 14
    ID              shift and go to state 37
    UNDEFINED       shift and go to state 21

    arrayCall                      shift and go to state 10
    functioncall                   shift and go to state 38
    expression                     shift and go to state 125
    basicTypes                     shift and go to state 33

state 59

    (34) reassignment -> ID DECR .

    SEMICOLON       reduce using rule 34 (reassignment -> ID DECR .)
    BREAK           reduce using rule 34 (reassignment -> ID DECR .)
    CONTINUE        reduce using rule 34 (reassignment -> ID DECR .)
    RETURN          reduce using rule 34 (reassignment -> ID DECR .)
    CONSOLE         reduce using rule 34 (reassignment -> ID DECR .)
    VAR             reduce using rule 34 (reassignment -> ID DECR .)
    LEFTPAREN       reduce using rule 34 (reassignment -> ID DECR .)
    ID              reduce using rule 34 (reassignment -> ID DECR .)
    EVAL            reduce using rule 34 (reassignment -> ID DECR .)
    NOT             reduce using rule 34 (reassignment -> ID DECR .)
    BINNOT          reduce using rule 34 (reassignment -> ID DECR .)
    TYPEOF          reduce using rule 34 (reassignment -> ID DECR .)
    IF              reduce using rule 34 (reassignment -> ID DECR .)
    WHILE           reduce using rule 34 (reassignment -> ID DECR .)
    FOR             reduce using rule 34 (reassignment -> ID DECR .)
    FUNCTION        reduce using rule 34 (reassignment -> ID DECR .)
    NUMBER          reduce using rule 34 (reassignment -> ID DECR .)
    STRING          reduce using rule 34 (reassignment -> ID DECR .)
    UNDEFINED       reduce using rule 34 (reassignment -> ID DECR .)
    $end            reduce using rule 34 (reassignment -> ID DECR .)
    RIGHTBRACE      reduce using rule 34 (reassignment -> ID DECR .)
    RIGHTPAREN      reduce using rule 34 (reassignment -> ID DECR .)
    ELSE            reduce using rule 34 (reassignment -> ID DECR .)


state 60

    (33) reassignment -> ID INCR .

    SEMICOLON       reduce using rule 33 (reassignment -> ID INCR .)
    BREAK           reduce using rule 33 (reassignment -> ID INCR .)
    CONTINUE        reduce using rule 33 (reassignment -> ID INCR .)
    RETURN          reduce using rule 33 (reassignment -> ID INCR .)
    CONSOLE         reduce using rule 33 (reassignment -> ID INCR .)
    VAR             reduce using rule 33 (reassignment -> ID INCR .)
    LEFTPAREN       reduce using rule 33 (reassignment -> ID INCR .)
    ID              reduce using rule 33 (reassignment -> ID INCR .)
    EVAL            reduce using rule 33 (reassignment -> ID INCR .)
    NOT             reduce using rule 33 (reassignment -> ID INCR .)
    BINNOT          reduce using rule 33 (reassignment -> ID INCR .)
    TYPEOF          reduce using rule 33 (reassignment -> ID INCR .)
    IF              reduce using rule 33 (reassignment -> ID INCR .)
    WHILE           reduce using rule 33 (reassignment -> ID INCR .)
    FOR             reduce using rule 33 (reassignment -> ID INCR .)
    FUNCTION        reduce using rule 33 (reassignment -> ID INCR .)
    NUMBER          reduce using rule 33 (reassignment -> ID INCR .)
    STRING          reduce using rule 33 (reassignment -> ID INCR .)
    UNDEFINED       reduce using rule 33 (reassignment -> ID INCR .)
    $end            reduce using rule 33 (reassignment -> ID INCR .)
    RIGHTBRACE      reduce using rule 33 (reassignment -> ID INCR .)
    RIGHTPAREN      reduce using rule 33 (reassignment -> ID INCR .)
    ELSE            reduce using rule 33 (reassignment -> ID INCR .)


state 61

    (40) reassignment -> ID XOREQ . expression
    (50) expression -> . EVAL LEFTPAREN statements RIGHTPAREN
    (51) expression -> . EVAL LEFTPAREN block RIGHTPAREN
    (52) expression -> . expression PLUS expression
    (53) expression -> . expression MINUS expression
    (54) expression -> . expression INTO expression
    (55) expression -> . expression DIVIDE expression
    (56) expression -> . expression MOD expression
    (57) expression -> . expression EXPO expression
    (58) expression -> . LEFTPAREN expression RIGHTPAREN
    (59) expression -> . NOT expression
    (60) expression -> . expression BINAND expression
    (61) expression -> . expression BINOR expression
    (62) expression -> . expression BINXOR expression
    (63) expression -> . BINNOT expression
    (64) expression -> . expression LT expression
    (65) expression -> . expression GT expression
    (66) expression -> . expression DOUBLEEQ expression
    (67) expression -> . expression NOTEQUAL expression
    (68) expression -> . expression LTE expression
    (69) expression -> . expression GTE expression
    (70) expression -> . expression STREQUAL expression
    (71) expression -> . expression STRNEQUAL expression
    (72) expression -> . expression AND expression
    (73) expression -> . expression OR expression
    (74) expression -> . expression LSHIFT expression
    (75) expression -> . expression RSHIFT expression
    (76) expression -> . expression URSHIFT expression
    (77) expression -> . basicTypes
    (78) expression -> . functioncall
    (79) expression -> . arrayCall
    (80) expression -> . TYPEOF expression
    (82) basicTypes -> . NUMBER
    (83) basicTypes -> . STRING
    (84) basicTypes -> . ID
    (85) basicTypes -> . UNDEFINED
    (86) functioncall -> . ID LEFTPAREN argList RIGHTPAREN
    (81) arrayCall -> . ID LEFTBRACKET expression RIGHTBRACKET

    EVAL            shift and go to state 20
    LEFTPAREN       shift and go to state 36
    NOT             shift and go to state 32
    BINNOT          shift and go to state 25
    TYPEOF          shift and go to state 15
    NUMBER          shift and go to state 2
    STRING          shift and go to state 14
    ID              shift and go to state 37
    UNDEFINED       shift and go to state 21

    arrayCall                      shift and go to state 10
    functioncall                   shift and go to state 38
    expression                     shift and go to state 126
    basicTypes                     shift and go to state 33

state 62

    (37) reassignment -> ID URSHIFTEQ . expression
    (50) expression -> . EVAL LEFTPAREN statements RIGHTPAREN
    (51) expression -> . EVAL LEFTPAREN block RIGHTPAREN
    (52) expression -> . expression PLUS expression
    (53) expression -> . expression MINUS expression
    (54) expression -> . expression INTO expression
    (55) expression -> . expression DIVIDE expression
    (56) expression -> . expression MOD expression
    (57) expression -> . expression EXPO expression
    (58) expression -> . LEFTPAREN expression RIGHTPAREN
    (59) expression -> . NOT expression
    (60) expression -> . expression BINAND expression
    (61) expression -> . expression BINOR expression
    (62) expression -> . expression BINXOR expression
    (63) expression -> . BINNOT expression
    (64) expression -> . expression LT expression
    (65) expression -> . expression GT expression
    (66) expression -> . expression DOUBLEEQ expression
    (67) expression -> . expression NOTEQUAL expression
    (68) expression -> . expression LTE expression
    (69) expression -> . expression GTE expression
    (70) expression -> . expression STREQUAL expression
    (71) expression -> . expression STRNEQUAL expression
    (72) expression -> . expression AND expression
    (73) expression -> . expression OR expression
    (74) expression -> . expression LSHIFT expression
    (75) expression -> . expression RSHIFT expression
    (76) expression -> . expression URSHIFT expression
    (77) expression -> . basicTypes
    (78) expression -> . functioncall
    (79) expression -> . arrayCall
    (80) expression -> . TYPEOF expression
    (82) basicTypes -> . NUMBER
    (83) basicTypes -> . STRING
    (84) basicTypes -> . ID
    (85) basicTypes -> . UNDEFINED
    (86) functioncall -> . ID LEFTPAREN argList RIGHTPAREN
    (81) arrayCall -> . ID LEFTBRACKET expression RIGHTBRACKET

    EVAL            shift and go to state 20
    LEFTPAREN       shift and go to state 36
    NOT             shift and go to state 32
    BINNOT          shift and go to state 25
    TYPEOF          shift and go to state 15
    NUMBER          shift and go to state 2
    STRING          shift and go to state 14
    ID              shift and go to state 37
    UNDEFINED       shift and go to state 21

    arrayCall                      shift and go to state 10
    functioncall                   shift and go to state 38
    expression                     shift and go to state 127
    basicTypes                     shift and go to state 33

state 63

    (30) reassignment -> ID MINUSEQ . expression
    (50) expression -> . EVAL LEFTPAREN statements RIGHTPAREN
    (51) expression -> . EVAL LEFTPAREN block RIGHTPAREN
    (52) expression -> . expression PLUS expression
    (53) expression -> . expression MINUS expression
    (54) expression -> . expression INTO expression
    (55) expression -> . expression DIVIDE expression
    (56) expression -> . expression MOD expression
    (57) expression -> . expression EXPO expression
    (58) expression -> . LEFTPAREN expression RIGHTPAREN
    (59) expression -> . NOT expression
    (60) expression -> . expression BINAND expression
    (61) expression -> . expression BINOR expression
    (62) expression -> . expression BINXOR expression
    (63) expression -> . BINNOT expression
    (64) expression -> . expression LT expression
    (65) expression -> . expression GT expression
    (66) expression -> . expression DOUBLEEQ expression
    (67) expression -> . expression NOTEQUAL expression
    (68) expression -> . expression LTE expression
    (69) expression -> . expression GTE expression
    (70) expression -> . expression STREQUAL expression
    (71) expression -> . expression STRNEQUAL expression
    (72) expression -> . expression AND expression
    (73) expression -> . expression OR expression
    (74) expression -> . expression LSHIFT expression
    (75) expression -> . expression RSHIFT expression
    (76) expression -> . expression URSHIFT expression
    (77) expression -> . basicTypes
    (78) expression -> . functioncall
    (79) expression -> . arrayCall
    (80) expression -> . TYPEOF expression
    (82) basicTypes -> . NUMBER
    (83) basicTypes -> . STRING
    (84) basicTypes -> . ID
    (85) basicTypes -> . UNDEFINED
    (86) functioncall -> . ID LEFTPAREN argList RIGHTPAREN
    (81) arrayCall -> . ID LEFTBRACKET expression RIGHTBRACKET

    EVAL            shift and go to state 20
    LEFTPAREN       shift and go to state 36
    NOT             shift and go to state 32
    BINNOT          shift and go to state 25
    TYPEOF          shift and go to state 15
    NUMBER          shift and go to state 2
    STRING          shift and go to state 14
    ID              shift and go to state 37
    UNDEFINED       shift and go to state 21

    arrayCall                      shift and go to state 10
    functioncall                   shift and go to state 38
    expression                     shift and go to state 128
    basicTypes                     shift and go to state 33

state 64

    (81) arrayCall -> ID LEFTBRACKET . expression RIGHTBRACKET
    (50) expression -> . EVAL LEFTPAREN statements RIGHTPAREN
    (51) expression -> . EVAL LEFTPAREN block RIGHTPAREN
    (52) expression -> . expression PLUS expression
    (53) expression -> . expression MINUS expression
    (54) expression -> . expression INTO expression
    (55) expression -> . expression DIVIDE expression
    (56) expression -> . expression MOD expression
    (57) expression -> . expression EXPO expression
    (58) expression -> . LEFTPAREN expression RIGHTPAREN
    (59) expression -> . NOT expression
    (60) expression -> . expression BINAND expression
    (61) expression -> . expression BINOR expression
    (62) expression -> . expression BINXOR expression
    (63) expression -> . BINNOT expression
    (64) expression -> . expression LT expression
    (65) expression -> . expression GT expression
    (66) expression -> . expression DOUBLEEQ expression
    (67) expression -> . expression NOTEQUAL expression
    (68) expression -> . expression LTE expression
    (69) expression -> . expression GTE expression
    (70) expression -> . expression STREQUAL expression
    (71) expression -> . expression STRNEQUAL expression
    (72) expression -> . expression AND expression
    (73) expression -> . expression OR expression
    (74) expression -> . expression LSHIFT expression
    (75) expression -> . expression RSHIFT expression
    (76) expression -> . expression URSHIFT expression
    (77) expression -> . basicTypes
    (78) expression -> . functioncall
    (79) expression -> . arrayCall
    (80) expression -> . TYPEOF expression
    (82) basicTypes -> . NUMBER
    (83) basicTypes -> . STRING
    (84) basicTypes -> . ID
    (85) basicTypes -> . UNDEFINED
    (86) functioncall -> . ID LEFTPAREN argList RIGHTPAREN
    (81) arrayCall -> . ID LEFTBRACKET expression RIGHTBRACKET

    EVAL            shift and go to state 20
    LEFTPAREN       shift and go to state 36
    NOT             shift and go to state 32
    BINNOT          shift and go to state 25
    TYPEOF          shift and go to state 15
    NUMBER          shift and go to state 2
    STRING          shift and go to state 14
    ID              shift and go to state 37
    UNDEFINED       shift and go to state 21

    arrayCall                      shift and go to state 10
    functioncall                   shift and go to state 38
    expression                     shift and go to state 129
    basicTypes                     shift and go to state 33

state 65

    (39) reassignment -> ID OREQ . expression
    (50) expression -> . EVAL LEFTPAREN statements RIGHTPAREN
    (51) expression -> . EVAL LEFTPAREN block RIGHTPAREN
    (52) expression -> . expression PLUS expression
    (53) expression -> . expression MINUS expression
    (54) expression -> . expression INTO expression
    (55) expression -> . expression DIVIDE expression
    (56) expression -> . expression MOD expression
    (57) expression -> . expression EXPO expression
    (58) expression -> . LEFTPAREN expression RIGHTPAREN
    (59) expression -> . NOT expression
    (60) expression -> . expression BINAND expression
    (61) expression -> . expression BINOR expression
    (62) expression -> . expression BINXOR expression
    (63) expression -> . BINNOT expression
    (64) expression -> . expression LT expression
    (65) expression -> . expression GT expression
    (66) expression -> . expression DOUBLEEQ expression
    (67) expression -> . expression NOTEQUAL expression
    (68) expression -> . expression LTE expression
    (69) expression -> . expression GTE expression
    (70) expression -> . expression STREQUAL expression
    (71) expression -> . expression STRNEQUAL expression
    (72) expression -> . expression AND expression
    (73) expression -> . expression OR expression
    (74) expression -> . expression LSHIFT expression
    (75) expression -> . expression RSHIFT expression
    (76) expression -> . expression URSHIFT expression
    (77) expression -> . basicTypes
    (78) expression -> . functioncall
    (79) expression -> . arrayCall
    (80) expression -> . TYPEOF expression
    (82) basicTypes -> . NUMBER
    (83) basicTypes -> . STRING
    (84) basicTypes -> . ID
    (85) basicTypes -> . UNDEFINED
    (86) functioncall -> . ID LEFTPAREN argList RIGHTPAREN
    (81) arrayCall -> . ID LEFTBRACKET expression RIGHTBRACKET

    EVAL            shift and go to state 20
    LEFTPAREN       shift and go to state 36
    NOT             shift and go to state 32
    BINNOT          shift and go to state 25
    TYPEOF          shift and go to state 15
    NUMBER          shift and go to state 2
    STRING          shift and go to state 14
    ID              shift and go to state 37
    UNDEFINED       shift and go to state 21

    arrayCall                      shift and go to state 10
    functioncall                   shift and go to state 38
    expression                     shift and go to state 130
    basicTypes                     shift and go to state 33

state 66

    (32) reassignment -> ID DIVEQ . expression
    (50) expression -> . EVAL LEFTPAREN statements RIGHTPAREN
    (51) expression -> . EVAL LEFTPAREN block RIGHTPAREN
    (52) expression -> . expression PLUS expression
    (53) expression -> . expression MINUS expression
    (54) expression -> . expression INTO expression
    (55) expression -> . expression DIVIDE expression
    (56) expression -> . expression MOD expression
    (57) expression -> . expression EXPO expression
    (58) expression -> . LEFTPAREN expression RIGHTPAREN
    (59) expression -> . NOT expression
    (60) expression -> . expression BINAND expression
    (61) expression -> . expression BINOR expression
    (62) expression -> . expression BINXOR expression
    (63) expression -> . BINNOT expression
    (64) expression -> . expression LT expression
    (65) expression -> . expression GT expression
    (66) expression -> . expression DOUBLEEQ expression
    (67) expression -> . expression NOTEQUAL expression
    (68) expression -> . expression LTE expression
    (69) expression -> . expression GTE expression
    (70) expression -> . expression STREQUAL expression
    (71) expression -> . expression STRNEQUAL expression
    (72) expression -> . expression AND expression
    (73) expression -> . expression OR expression
    (74) expression -> . expression LSHIFT expression
    (75) expression -> . expression RSHIFT expression
    (76) expression -> . expression URSHIFT expression
    (77) expression -> . basicTypes
    (78) expression -> . functioncall
    (79) expression -> . arrayCall
    (80) expression -> . TYPEOF expression
    (82) basicTypes -> . NUMBER
    (83) basicTypes -> . STRING
    (84) basicTypes -> . ID
    (85) basicTypes -> . UNDEFINED
    (86) functioncall -> . ID LEFTPAREN argList RIGHTPAREN
    (81) arrayCall -> . ID LEFTBRACKET expression RIGHTBRACKET

    EVAL            shift and go to state 20
    LEFTPAREN       shift and go to state 36
    NOT             shift and go to state 32
    BINNOT          shift and go to state 25
    TYPEOF          shift and go to state 15
    NUMBER          shift and go to state 2
    STRING          shift and go to state 14
    ID              shift and go to state 37
    UNDEFINED       shift and go to state 21

    arrayCall                      shift and go to state 10
    functioncall                   shift and go to state 38
    expression                     shift and go to state 131
    basicTypes                     shift and go to state 33

state 67

    (35) reassignment -> ID LSHIFTEQ . expression
    (50) expression -> . EVAL LEFTPAREN statements RIGHTPAREN
    (51) expression -> . EVAL LEFTPAREN block RIGHTPAREN
    (52) expression -> . expression PLUS expression
    (53) expression -> . expression MINUS expression
    (54) expression -> . expression INTO expression
    (55) expression -> . expression DIVIDE expression
    (56) expression -> . expression MOD expression
    (57) expression -> . expression EXPO expression
    (58) expression -> . LEFTPAREN expression RIGHTPAREN
    (59) expression -> . NOT expression
    (60) expression -> . expression BINAND expression
    (61) expression -> . expression BINOR expression
    (62) expression -> . expression BINXOR expression
    (63) expression -> . BINNOT expression
    (64) expression -> . expression LT expression
    (65) expression -> . expression GT expression
    (66) expression -> . expression DOUBLEEQ expression
    (67) expression -> . expression NOTEQUAL expression
    (68) expression -> . expression LTE expression
    (69) expression -> . expression GTE expression
    (70) expression -> . expression STREQUAL expression
    (71) expression -> . expression STRNEQUAL expression
    (72) expression -> . expression AND expression
    (73) expression -> . expression OR expression
    (74) expression -> . expression LSHIFT expression
    (75) expression -> . expression RSHIFT expression
    (76) expression -> . expression URSHIFT expression
    (77) expression -> . basicTypes
    (78) expression -> . functioncall
    (79) expression -> . arrayCall
    (80) expression -> . TYPEOF expression
    (82) basicTypes -> . NUMBER
    (83) basicTypes -> . STRING
    (84) basicTypes -> . ID
    (85) basicTypes -> . UNDEFINED
    (86) functioncall -> . ID LEFTPAREN argList RIGHTPAREN
    (81) arrayCall -> . ID LEFTBRACKET expression RIGHTBRACKET

    EVAL            shift and go to state 20
    LEFTPAREN       shift and go to state 36
    NOT             shift and go to state 32
    BINNOT          shift and go to state 25
    TYPEOF          shift and go to state 15
    NUMBER          shift and go to state 2
    STRING          shift and go to state 14
    ID              shift and go to state 37
    UNDEFINED       shift and go to state 21

    arrayCall                      shift and go to state 10
    functioncall                   shift and go to state 38
    expression                     shift and go to state 132
    basicTypes                     shift and go to state 33

state 68

    (86) functioncall -> ID LEFTPAREN . argList RIGHTPAREN
    (87) argList -> . expression
    (88) argList -> . expression COMMA argList
    (89) argList -> .
    (50) expression -> . EVAL LEFTPAREN statements RIGHTPAREN
    (51) expression -> . EVAL LEFTPAREN block RIGHTPAREN
    (52) expression -> . expression PLUS expression
    (53) expression -> . expression MINUS expression
    (54) expression -> . expression INTO expression
    (55) expression -> . expression DIVIDE expression
    (56) expression -> . expression MOD expression
    (57) expression -> . expression EXPO expression
    (58) expression -> . LEFTPAREN expression RIGHTPAREN
    (59) expression -> . NOT expression
    (60) expression -> . expression BINAND expression
    (61) expression -> . expression BINOR expression
    (62) expression -> . expression BINXOR expression
    (63) expression -> . BINNOT expression
    (64) expression -> . expression LT expression
    (65) expression -> . expression GT expression
    (66) expression -> . expression DOUBLEEQ expression
    (67) expression -> . expression NOTEQUAL expression
    (68) expression -> . expression LTE expression
    (69) expression -> . expression GTE expression
    (70) expression -> . expression STREQUAL expression
    (71) expression -> . expression STRNEQUAL expression
    (72) expression -> . expression AND expression
    (73) expression -> . expression OR expression
    (74) expression -> . expression LSHIFT expression
    (75) expression -> . expression RSHIFT expression
    (76) expression -> . expression URSHIFT expression
    (77) expression -> . basicTypes
    (78) expression -> . functioncall
    (79) expression -> . arrayCall
    (80) expression -> . TYPEOF expression
    (82) basicTypes -> . NUMBER
    (83) basicTypes -> . STRING
    (84) basicTypes -> . ID
    (85) basicTypes -> . UNDEFINED
    (86) functioncall -> . ID LEFTPAREN argList RIGHTPAREN
    (81) arrayCall -> . ID LEFTBRACKET expression RIGHTBRACKET

    RIGHTPAREN      reduce using rule 89 (argList -> .)
    EVAL            shift and go to state 20
    LEFTPAREN       shift and go to state 36
    NOT             shift and go to state 32
    BINNOT          shift and go to state 25
    TYPEOF          shift and go to state 15
    NUMBER          shift and go to state 2
    STRING          shift and go to state 14
    ID              shift and go to state 37
    UNDEFINED       shift and go to state 21

    arrayCall                      shift and go to state 10
    functioncall                   shift and go to state 38
    argList                        shift and go to state 133
    expression                     shift and go to state 134
    basicTypes                     shift and go to state 33

state 69

    (38) reassignment -> ID ANDEQ . expression
    (50) expression -> . EVAL LEFTPAREN statements RIGHTPAREN
    (51) expression -> . EVAL LEFTPAREN block RIGHTPAREN
    (52) expression -> . expression PLUS expression
    (53) expression -> . expression MINUS expression
    (54) expression -> . expression INTO expression
    (55) expression -> . expression DIVIDE expression
    (56) expression -> . expression MOD expression
    (57) expression -> . expression EXPO expression
    (58) expression -> . LEFTPAREN expression RIGHTPAREN
    (59) expression -> . NOT expression
    (60) expression -> . expression BINAND expression
    (61) expression -> . expression BINOR expression
    (62) expression -> . expression BINXOR expression
    (63) expression -> . BINNOT expression
    (64) expression -> . expression LT expression
    (65) expression -> . expression GT expression
    (66) expression -> . expression DOUBLEEQ expression
    (67) expression -> . expression NOTEQUAL expression
    (68) expression -> . expression LTE expression
    (69) expression -> . expression GTE expression
    (70) expression -> . expression STREQUAL expression
    (71) expression -> . expression STRNEQUAL expression
    (72) expression -> . expression AND expression
    (73) expression -> . expression OR expression
    (74) expression -> . expression LSHIFT expression
    (75) expression -> . expression RSHIFT expression
    (76) expression -> . expression URSHIFT expression
    (77) expression -> . basicTypes
    (78) expression -> . functioncall
    (79) expression -> . arrayCall
    (80) expression -> . TYPEOF expression
    (82) basicTypes -> . NUMBER
    (83) basicTypes -> . STRING
    (84) basicTypes -> . ID
    (85) basicTypes -> . UNDEFINED
    (86) functioncall -> . ID LEFTPAREN argList RIGHTPAREN
    (81) arrayCall -> . ID LEFTBRACKET expression RIGHTBRACKET

    EVAL            shift and go to state 20
    LEFTPAREN       shift and go to state 36
    NOT             shift and go to state 32
    BINNOT          shift and go to state 25
    TYPEOF          shift and go to state 15
    NUMBER          shift and go to state 2
    STRING          shift and go to state 14
    ID              shift and go to state 37
    UNDEFINED       shift and go to state 21

    arrayCall                      shift and go to state 10
    functioncall                   shift and go to state 38
    expression                     shift and go to state 135
    basicTypes                     shift and go to state 33

state 70

    (28) reassignment -> ID EQ . expression
    (44) arraydecl -> ID EQ . LEFTBRACKET arrayList RIGHTBRACKET
    (50) expression -> . EVAL LEFTPAREN statements RIGHTPAREN
    (51) expression -> . EVAL LEFTPAREN block RIGHTPAREN
    (52) expression -> . expression PLUS expression
    (53) expression -> . expression MINUS expression
    (54) expression -> . expression INTO expression
    (55) expression -> . expression DIVIDE expression
    (56) expression -> . expression MOD expression
    (57) expression -> . expression EXPO expression
    (58) expression -> . LEFTPAREN expression RIGHTPAREN
    (59) expression -> . NOT expression
    (60) expression -> . expression BINAND expression
    (61) expression -> . expression BINOR expression
    (62) expression -> . expression BINXOR expression
    (63) expression -> . BINNOT expression
    (64) expression -> . expression LT expression
    (65) expression -> . expression GT expression
    (66) expression -> . expression DOUBLEEQ expression
    (67) expression -> . expression NOTEQUAL expression
    (68) expression -> . expression LTE expression
    (69) expression -> . expression GTE expression
    (70) expression -> . expression STREQUAL expression
    (71) expression -> . expression STRNEQUAL expression
    (72) expression -> . expression AND expression
    (73) expression -> . expression OR expression
    (74) expression -> . expression LSHIFT expression
    (75) expression -> . expression RSHIFT expression
    (76) expression -> . expression URSHIFT expression
    (77) expression -> . basicTypes
    (78) expression -> . functioncall
    (79) expression -> . arrayCall
    (80) expression -> . TYPEOF expression
    (82) basicTypes -> . NUMBER
    (83) basicTypes -> . STRING
    (84) basicTypes -> . ID
    (85) basicTypes -> . UNDEFINED
    (86) functioncall -> . ID LEFTPAREN argList RIGHTPAREN
    (81) arrayCall -> . ID LEFTBRACKET expression RIGHTBRACKET

    LEFTBRACKET     shift and go to state 136
    EVAL            shift and go to state 20
    LEFTPAREN       shift and go to state 36
    NOT             shift and go to state 32
    BINNOT          shift and go to state 25
    TYPEOF          shift and go to state 15
    NUMBER          shift and go to state 2
    STRING          shift and go to state 14
    ID              shift and go to state 37
    UNDEFINED       shift and go to state 21

    arrayCall                      shift and go to state 10
    functioncall                   shift and go to state 38
    expression                     shift and go to state 137
    basicTypes                     shift and go to state 33

state 71

    (36) reassignment -> ID RSHIFTEQ . expression
    (50) expression -> . EVAL LEFTPAREN statements RIGHTPAREN
    (51) expression -> . EVAL LEFTPAREN block RIGHTPAREN
    (52) expression -> . expression PLUS expression
    (53) expression -> . expression MINUS expression
    (54) expression -> . expression INTO expression
    (55) expression -> . expression DIVIDE expression
    (56) expression -> . expression MOD expression
    (57) expression -> . expression EXPO expression
    (58) expression -> . LEFTPAREN expression RIGHTPAREN
    (59) expression -> . NOT expression
    (60) expression -> . expression BINAND expression
    (61) expression -> . expression BINOR expression
    (62) expression -> . expression BINXOR expression
    (63) expression -> . BINNOT expression
    (64) expression -> . expression LT expression
    (65) expression -> . expression GT expression
    (66) expression -> . expression DOUBLEEQ expression
    (67) expression -> . expression NOTEQUAL expression
    (68) expression -> . expression LTE expression
    (69) expression -> . expression GTE expression
    (70) expression -> . expression STREQUAL expression
    (71) expression -> . expression STRNEQUAL expression
    (72) expression -> . expression AND expression
    (73) expression -> . expression OR expression
    (74) expression -> . expression LSHIFT expression
    (75) expression -> . expression RSHIFT expression
    (76) expression -> . expression URSHIFT expression
    (77) expression -> . basicTypes
    (78) expression -> . functioncall
    (79) expression -> . arrayCall
    (80) expression -> . TYPEOF expression
    (82) basicTypes -> . NUMBER
    (83) basicTypes -> . STRING
    (84) basicTypes -> . ID
    (85) basicTypes -> . UNDEFINED
    (86) functioncall -> . ID LEFTPAREN argList RIGHTPAREN
    (81) arrayCall -> . ID LEFTBRACKET expression RIGHTBRACKET

    EVAL            shift and go to state 20
    LEFTPAREN       shift and go to state 36
    NOT             shift and go to state 32
    BINNOT          shift and go to state 25
    TYPEOF          shift and go to state 15
    NUMBER          shift and go to state 2
    STRING          shift and go to state 14
    ID              shift and go to state 37
    UNDEFINED       shift and go to state 21

    arrayCall                      shift and go to state 10
    functioncall                   shift and go to state 38
    expression                     shift and go to state 138
    basicTypes                     shift and go to state 33

state 72

    (29) reassignment -> ID PLUSEQ . expression
    (50) expression -> . EVAL LEFTPAREN statements RIGHTPAREN
    (51) expression -> . EVAL LEFTPAREN block RIGHTPAREN
    (52) expression -> . expression PLUS expression
    (53) expression -> . expression MINUS expression
    (54) expression -> . expression INTO expression
    (55) expression -> . expression DIVIDE expression
    (56) expression -> . expression MOD expression
    (57) expression -> . expression EXPO expression
    (58) expression -> . LEFTPAREN expression RIGHTPAREN
    (59) expression -> . NOT expression
    (60) expression -> . expression BINAND expression
    (61) expression -> . expression BINOR expression
    (62) expression -> . expression BINXOR expression
    (63) expression -> . BINNOT expression
    (64) expression -> . expression LT expression
    (65) expression -> . expression GT expression
    (66) expression -> . expression DOUBLEEQ expression
    (67) expression -> . expression NOTEQUAL expression
    (68) expression -> . expression LTE expression
    (69) expression -> . expression GTE expression
    (70) expression -> . expression STREQUAL expression
    (71) expression -> . expression STRNEQUAL expression
    (72) expression -> . expression AND expression
    (73) expression -> . expression OR expression
    (74) expression -> . expression LSHIFT expression
    (75) expression -> . expression RSHIFT expression
    (76) expression -> . expression URSHIFT expression
    (77) expression -> . basicTypes
    (78) expression -> . functioncall
    (79) expression -> . arrayCall
    (80) expression -> . TYPEOF expression
    (82) basicTypes -> . NUMBER
    (83) basicTypes -> . STRING
    (84) basicTypes -> . ID
    (85) basicTypes -> . UNDEFINED
    (86) functioncall -> . ID LEFTPAREN argList RIGHTPAREN
    (81) arrayCall -> . ID LEFTBRACKET expression RIGHTBRACKET

    EVAL            shift and go to state 20
    LEFTPAREN       shift and go to state 36
    NOT             shift and go to state 32
    BINNOT          shift and go to state 25
    TYPEOF          shift and go to state 15
    NUMBER          shift and go to state 2
    STRING          shift and go to state 14
    ID              shift and go to state 37
    UNDEFINED       shift and go to state 21

    arrayCall                      shift and go to state 10
    functioncall                   shift and go to state 38
    expression                     shift and go to state 139
    basicTypes                     shift and go to state 33

state 73

    (3) block -> LEFTBRACE statements . RIGHTBRACE

    RIGHTBRACE      shift and go to state 140


state 74

    (4) block -> LEFTBRACE RIGHTBRACE .

    ELSE            reduce using rule 4 (block -> LEFTBRACE RIGHTBRACE .)
    BREAK           reduce using rule 4 (block -> LEFTBRACE RIGHTBRACE .)
    CONTINUE        reduce using rule 4 (block -> LEFTBRACE RIGHTBRACE .)
    RETURN          reduce using rule 4 (block -> LEFTBRACE RIGHTBRACE .)
    CONSOLE         reduce using rule 4 (block -> LEFTBRACE RIGHTBRACE .)
    VAR             reduce using rule 4 (block -> LEFTBRACE RIGHTBRACE .)
    LEFTPAREN       reduce using rule 4 (block -> LEFTBRACE RIGHTBRACE .)
    ID              reduce using rule 4 (block -> LEFTBRACE RIGHTBRACE .)
    EVAL            reduce using rule 4 (block -> LEFTBRACE RIGHTBRACE .)
    NOT             reduce using rule 4 (block -> LEFTBRACE RIGHTBRACE .)
    BINNOT          reduce using rule 4 (block -> LEFTBRACE RIGHTBRACE .)
    TYPEOF          reduce using rule 4 (block -> LEFTBRACE RIGHTBRACE .)
    IF              reduce using rule 4 (block -> LEFTBRACE RIGHTBRACE .)
    WHILE           reduce using rule 4 (block -> LEFTBRACE RIGHTBRACE .)
    FOR             reduce using rule 4 (block -> LEFTBRACE RIGHTBRACE .)
    FUNCTION        reduce using rule 4 (block -> LEFTBRACE RIGHTBRACE .)
    NUMBER          reduce using rule 4 (block -> LEFTBRACE RIGHTBRACE .)
    STRING          reduce using rule 4 (block -> LEFTBRACE RIGHTBRACE .)
    UNDEFINED       reduce using rule 4 (block -> LEFTBRACE RIGHTBRACE .)
    $end            reduce using rule 4 (block -> LEFTBRACE RIGHTBRACE .)
    RIGHTBRACE      reduce using rule 4 (block -> LEFTBRACE RIGHTBRACE .)
    RIGHTPAREN      reduce using rule 4 (block -> LEFTBRACE RIGHTBRACE .)
    SEMICOLON       reduce using rule 4 (block -> LEFTBRACE RIGHTBRACE .)


state 75

    (63) expression -> BINNOT expression .
    (52) expression -> expression . PLUS expression
    (53) expression -> expression . MINUS expression
    (54) expression -> expression . INTO expression
    (55) expression -> expression . DIVIDE expression
    (56) expression -> expression . MOD expression
    (57) expression -> expression . EXPO expression
    (60) expression -> expression . BINAND expression
    (61) expression -> expression . BINOR expression
    (62) expression -> expression . BINXOR expression
    (64) expression -> expression . LT expression
    (65) expression -> expression . GT expression
    (66) expression -> expression . DOUBLEEQ expression
    (67) expression -> expression . NOTEQUAL expression
    (68) expression -> expression . LTE expression
    (69) expression -> expression . GTE expression
    (70) expression -> expression . STREQUAL expression
    (71) expression -> expression . STRNEQUAL expression
    (72) expression -> expression . AND expression
    (73) expression -> expression . OR expression
    (74) expression -> expression . LSHIFT expression
    (75) expression -> expression . RSHIFT expression
    (76) expression -> expression . URSHIFT expression

    PLUS            reduce using rule 63 (expression -> BINNOT expression .)
    MINUS           reduce using rule 63 (expression -> BINNOT expression .)
    INTO            reduce using rule 63 (expression -> BINNOT expression .)
    DIVIDE          reduce using rule 63 (expression -> BINNOT expression .)
    MOD             reduce using rule 63 (expression -> BINNOT expression .)
    EXPO            reduce using rule 63 (expression -> BINNOT expression .)
    BINAND          reduce using rule 63 (expression -> BINNOT expression .)
    BINOR           reduce using rule 63 (expression -> BINNOT expression .)
    BINXOR          reduce using rule 63 (expression -> BINNOT expression .)
    LT              reduce using rule 63 (expression -> BINNOT expression .)
    GT              reduce using rule 63 (expression -> BINNOT expression .)
    DOUBLEEQ        reduce using rule 63 (expression -> BINNOT expression .)
    NOTEQUAL        reduce using rule 63 (expression -> BINNOT expression .)
    LTE             reduce using rule 63 (expression -> BINNOT expression .)
    GTE             reduce using rule 63 (expression -> BINNOT expression .)
    STREQUAL        reduce using rule 63 (expression -> BINNOT expression .)
    STRNEQUAL       reduce using rule 63 (expression -> BINNOT expression .)
    AND             reduce using rule 63 (expression -> BINNOT expression .)
    OR              reduce using rule 63 (expression -> BINNOT expression .)
    LSHIFT          reduce using rule 63 (expression -> BINNOT expression .)
    RSHIFT          reduce using rule 63 (expression -> BINNOT expression .)
    URSHIFT         reduce using rule 63 (expression -> BINNOT expression .)
    SEMICOLON       reduce using rule 63 (expression -> BINNOT expression .)
    BREAK           reduce using rule 63 (expression -> BINNOT expression .)
    CONTINUE        reduce using rule 63 (expression -> BINNOT expression .)
    RETURN          reduce using rule 63 (expression -> BINNOT expression .)
    CONSOLE         reduce using rule 63 (expression -> BINNOT expression .)
    VAR             reduce using rule 63 (expression -> BINNOT expression .)
    LEFTPAREN       reduce using rule 63 (expression -> BINNOT expression .)
    ID              reduce using rule 63 (expression -> BINNOT expression .)
    EVAL            reduce using rule 63 (expression -> BINNOT expression .)
    NOT             reduce using rule 63 (expression -> BINNOT expression .)
    BINNOT          reduce using rule 63 (expression -> BINNOT expression .)
    TYPEOF          reduce using rule 63 (expression -> BINNOT expression .)
    IF              reduce using rule 63 (expression -> BINNOT expression .)
    WHILE           reduce using rule 63 (expression -> BINNOT expression .)
    FOR             reduce using rule 63 (expression -> BINNOT expression .)
    FUNCTION        reduce using rule 63 (expression -> BINNOT expression .)
    NUMBER          reduce using rule 63 (expression -> BINNOT expression .)
    STRING          reduce using rule 63 (expression -> BINNOT expression .)
    UNDEFINED       reduce using rule 63 (expression -> BINNOT expression .)
    $end            reduce using rule 63 (expression -> BINNOT expression .)
    RIGHTBRACE      reduce using rule 63 (expression -> BINNOT expression .)
    RIGHTPAREN      reduce using rule 63 (expression -> BINNOT expression .)
    ELSE            reduce using rule 63 (expression -> BINNOT expression .)
    LEFTBRACE       reduce using rule 63 (expression -> BINNOT expression .)
    RIGHTBRACKET    reduce using rule 63 (expression -> BINNOT expression .)
    COMMA           reduce using rule 63 (expression -> BINNOT expression .)

  ! PLUS            [ shift and go to state 92 ]
  ! MINUS           [ shift and go to state 86 ]
  ! INTO            [ shift and go to state 97 ]
  ! DIVIDE          [ shift and go to state 96 ]
  ! MOD             [ shift and go to state 103 ]
  ! EXPO            [ shift and go to state 93 ]
  ! BINAND          [ shift and go to state 88 ]
  ! BINOR           [ shift and go to state 100 ]
  ! BINXOR          [ shift and go to state 94 ]
  ! LT              [ shift and go to state 91 ]
  ! GT              [ shift and go to state 95 ]
  ! DOUBLEEQ        [ shift and go to state 81 ]
  ! NOTEQUAL        [ shift and go to state 83 ]
  ! LTE             [ shift and go to state 98 ]
  ! GTE             [ shift and go to state 87 ]
  ! STREQUAL        [ shift and go to state 90 ]
  ! STRNEQUAL       [ shift and go to state 84 ]
  ! AND             [ shift and go to state 99 ]
  ! OR              [ shift and go to state 102 ]
  ! LSHIFT          [ shift and go to state 85 ]
  ! RSHIFT          [ shift and go to state 82 ]
  ! URSHIFT         [ shift and go to state 101 ]


state 76

    (9) statement -> BREAK SEMICOLON .

    ELSE            reduce using rule 9 (statement -> BREAK SEMICOLON .)
    BREAK           reduce using rule 9 (statement -> BREAK SEMICOLON .)
    CONTINUE        reduce using rule 9 (statement -> BREAK SEMICOLON .)
    RETURN          reduce using rule 9 (statement -> BREAK SEMICOLON .)
    CONSOLE         reduce using rule 9 (statement -> BREAK SEMICOLON .)
    VAR             reduce using rule 9 (statement -> BREAK SEMICOLON .)
    LEFTPAREN       reduce using rule 9 (statement -> BREAK SEMICOLON .)
    ID              reduce using rule 9 (statement -> BREAK SEMICOLON .)
    EVAL            reduce using rule 9 (statement -> BREAK SEMICOLON .)
    NOT             reduce using rule 9 (statement -> BREAK SEMICOLON .)
    BINNOT          reduce using rule 9 (statement -> BREAK SEMICOLON .)
    TYPEOF          reduce using rule 9 (statement -> BREAK SEMICOLON .)
    IF              reduce using rule 9 (statement -> BREAK SEMICOLON .)
    WHILE           reduce using rule 9 (statement -> BREAK SEMICOLON .)
    FOR             reduce using rule 9 (statement -> BREAK SEMICOLON .)
    FUNCTION        reduce using rule 9 (statement -> BREAK SEMICOLON .)
    NUMBER          reduce using rule 9 (statement -> BREAK SEMICOLON .)
    STRING          reduce using rule 9 (statement -> BREAK SEMICOLON .)
    UNDEFINED       reduce using rule 9 (statement -> BREAK SEMICOLON .)
    $end            reduce using rule 9 (statement -> BREAK SEMICOLON .)
    RIGHTBRACE      reduce using rule 9 (statement -> BREAK SEMICOLON .)
    RIGHTPAREN      reduce using rule 9 (statement -> BREAK SEMICOLON .)
    SEMICOLON       reduce using rule 9 (statement -> BREAK SEMICOLON .)


state 77

    (10) statement -> CONTINUE SEMICOLON .

    ELSE            reduce using rule 10 (statement -> CONTINUE SEMICOLON .)
    BREAK           reduce using rule 10 (statement -> CONTINUE SEMICOLON .)
    CONTINUE        reduce using rule 10 (statement -> CONTINUE SEMICOLON .)
    RETURN          reduce using rule 10 (statement -> CONTINUE SEMICOLON .)
    CONSOLE         reduce using rule 10 (statement -> CONTINUE SEMICOLON .)
    VAR             reduce using rule 10 (statement -> CONTINUE SEMICOLON .)
    LEFTPAREN       reduce using rule 10 (statement -> CONTINUE SEMICOLON .)
    ID              reduce using rule 10 (statement -> CONTINUE SEMICOLON .)
    EVAL            reduce using rule 10 (statement -> CONTINUE SEMICOLON .)
    NOT             reduce using rule 10 (statement -> CONTINUE SEMICOLON .)
    BINNOT          reduce using rule 10 (statement -> CONTINUE SEMICOLON .)
    TYPEOF          reduce using rule 10 (statement -> CONTINUE SEMICOLON .)
    IF              reduce using rule 10 (statement -> CONTINUE SEMICOLON .)
    WHILE           reduce using rule 10 (statement -> CONTINUE SEMICOLON .)
    FOR             reduce using rule 10 (statement -> CONTINUE SEMICOLON .)
    FUNCTION        reduce using rule 10 (statement -> CONTINUE SEMICOLON .)
    NUMBER          reduce using rule 10 (statement -> CONTINUE SEMICOLON .)
    STRING          reduce using rule 10 (statement -> CONTINUE SEMICOLON .)
    UNDEFINED       reduce using rule 10 (statement -> CONTINUE SEMICOLON .)
    $end            reduce using rule 10 (statement -> CONTINUE SEMICOLON .)
    RIGHTBRACE      reduce using rule 10 (statement -> CONTINUE SEMICOLON .)
    RIGHTPAREN      reduce using rule 10 (statement -> CONTINUE SEMICOLON .)
    SEMICOLON       reduce using rule 10 (statement -> CONTINUE SEMICOLON .)


state 78

    (14) statement -> functioncall SEMICOLON .

    ELSE            reduce using rule 14 (statement -> functioncall SEMICOLON .)
    BREAK           reduce using rule 14 (statement -> functioncall SEMICOLON .)
    CONTINUE        reduce using rule 14 (statement -> functioncall SEMICOLON .)
    RETURN          reduce using rule 14 (statement -> functioncall SEMICOLON .)
    CONSOLE         reduce using rule 14 (statement -> functioncall SEMICOLON .)
    VAR             reduce using rule 14 (statement -> functioncall SEMICOLON .)
    LEFTPAREN       reduce using rule 14 (statement -> functioncall SEMICOLON .)
    ID              reduce using rule 14 (statement -> functioncall SEMICOLON .)
    EVAL            reduce using rule 14 (statement -> functioncall SEMICOLON .)
    NOT             reduce using rule 14 (statement -> functioncall SEMICOLON .)
    BINNOT          reduce using rule 14 (statement -> functioncall SEMICOLON .)
    TYPEOF          reduce using rule 14 (statement -> functioncall SEMICOLON .)
    IF              reduce using rule 14 (statement -> functioncall SEMICOLON .)
    WHILE           reduce using rule 14 (statement -> functioncall SEMICOLON .)
    FOR             reduce using rule 14 (statement -> functioncall SEMICOLON .)
    FUNCTION        reduce using rule 14 (statement -> functioncall SEMICOLON .)
    NUMBER          reduce using rule 14 (statement -> functioncall SEMICOLON .)
    STRING          reduce using rule 14 (statement -> functioncall SEMICOLON .)
    UNDEFINED       reduce using rule 14 (statement -> functioncall SEMICOLON .)
    $end            reduce using rule 14 (statement -> functioncall SEMICOLON .)
    RIGHTBRACE      reduce using rule 14 (statement -> functioncall SEMICOLON .)
    RIGHTPAREN      reduce using rule 14 (statement -> functioncall SEMICOLON .)
    SEMICOLON       reduce using rule 14 (statement -> functioncall SEMICOLON .)


state 79

    (104) funcdecl -> FUNCTION ID . LEFTPAREN argList RIGHTPAREN cblock

    LEFTPAREN       shift and go to state 141


state 80

    (59) expression -> NOT expression .
    (52) expression -> expression . PLUS expression
    (53) expression -> expression . MINUS expression
    (54) expression -> expression . INTO expression
    (55) expression -> expression . DIVIDE expression
    (56) expression -> expression . MOD expression
    (57) expression -> expression . EXPO expression
    (60) expression -> expression . BINAND expression
    (61) expression -> expression . BINOR expression
    (62) expression -> expression . BINXOR expression
    (64) expression -> expression . LT expression
    (65) expression -> expression . GT expression
    (66) expression -> expression . DOUBLEEQ expression
    (67) expression -> expression . NOTEQUAL expression
    (68) expression -> expression . LTE expression
    (69) expression -> expression . GTE expression
    (70) expression -> expression . STREQUAL expression
    (71) expression -> expression . STRNEQUAL expression
    (72) expression -> expression . AND expression
    (73) expression -> expression . OR expression
    (74) expression -> expression . LSHIFT expression
    (75) expression -> expression . RSHIFT expression
    (76) expression -> expression . URSHIFT expression

    PLUS            reduce using rule 59 (expression -> NOT expression .)
    MINUS           reduce using rule 59 (expression -> NOT expression .)
    INTO            reduce using rule 59 (expression -> NOT expression .)
    DIVIDE          reduce using rule 59 (expression -> NOT expression .)
    MOD             reduce using rule 59 (expression -> NOT expression .)
    EXPO            reduce using rule 59 (expression -> NOT expression .)
    BINAND          reduce using rule 59 (expression -> NOT expression .)
    BINOR           reduce using rule 59 (expression -> NOT expression .)
    BINXOR          reduce using rule 59 (expression -> NOT expression .)
    LT              reduce using rule 59 (expression -> NOT expression .)
    GT              reduce using rule 59 (expression -> NOT expression .)
    DOUBLEEQ        reduce using rule 59 (expression -> NOT expression .)
    NOTEQUAL        reduce using rule 59 (expression -> NOT expression .)
    LTE             reduce using rule 59 (expression -> NOT expression .)
    GTE             reduce using rule 59 (expression -> NOT expression .)
    STREQUAL        reduce using rule 59 (expression -> NOT expression .)
    STRNEQUAL       reduce using rule 59 (expression -> NOT expression .)
    AND             reduce using rule 59 (expression -> NOT expression .)
    OR              reduce using rule 59 (expression -> NOT expression .)
    LSHIFT          reduce using rule 59 (expression -> NOT expression .)
    RSHIFT          reduce using rule 59 (expression -> NOT expression .)
    URSHIFT         reduce using rule 59 (expression -> NOT expression .)
    SEMICOLON       reduce using rule 59 (expression -> NOT expression .)
    BREAK           reduce using rule 59 (expression -> NOT expression .)
    CONTINUE        reduce using rule 59 (expression -> NOT expression .)
    RETURN          reduce using rule 59 (expression -> NOT expression .)
    CONSOLE         reduce using rule 59 (expression -> NOT expression .)
    VAR             reduce using rule 59 (expression -> NOT expression .)
    LEFTPAREN       reduce using rule 59 (expression -> NOT expression .)
    ID              reduce using rule 59 (expression -> NOT expression .)
    EVAL            reduce using rule 59 (expression -> NOT expression .)
    NOT             reduce using rule 59 (expression -> NOT expression .)
    BINNOT          reduce using rule 59 (expression -> NOT expression .)
    TYPEOF          reduce using rule 59 (expression -> NOT expression .)
    IF              reduce using rule 59 (expression -> NOT expression .)
    WHILE           reduce using rule 59 (expression -> NOT expression .)
    FOR             reduce using rule 59 (expression -> NOT expression .)
    FUNCTION        reduce using rule 59 (expression -> NOT expression .)
    NUMBER          reduce using rule 59 (expression -> NOT expression .)
    STRING          reduce using rule 59 (expression -> NOT expression .)
    UNDEFINED       reduce using rule 59 (expression -> NOT expression .)
    $end            reduce using rule 59 (expression -> NOT expression .)
    RIGHTBRACE      reduce using rule 59 (expression -> NOT expression .)
    RIGHTPAREN      reduce using rule 59 (expression -> NOT expression .)
    ELSE            reduce using rule 59 (expression -> NOT expression .)
    LEFTBRACE       reduce using rule 59 (expression -> NOT expression .)
    RIGHTBRACKET    reduce using rule 59 (expression -> NOT expression .)
    COMMA           reduce using rule 59 (expression -> NOT expression .)

  ! PLUS            [ shift and go to state 92 ]
  ! MINUS           [ shift and go to state 86 ]
  ! INTO            [ shift and go to state 97 ]
  ! DIVIDE          [ shift and go to state 96 ]
  ! MOD             [ shift and go to state 103 ]
  ! EXPO            [ shift and go to state 93 ]
  ! BINAND          [ shift and go to state 88 ]
  ! BINOR           [ shift and go to state 100 ]
  ! BINXOR          [ shift and go to state 94 ]
  ! LT              [ shift and go to state 91 ]
  ! GT              [ shift and go to state 95 ]
  ! DOUBLEEQ        [ shift and go to state 81 ]
  ! NOTEQUAL        [ shift and go to state 83 ]
  ! LTE             [ shift and go to state 98 ]
  ! GTE             [ shift and go to state 87 ]
  ! STREQUAL        [ shift and go to state 90 ]
  ! STRNEQUAL       [ shift and go to state 84 ]
  ! AND             [ shift and go to state 99 ]
  ! OR              [ shift and go to state 102 ]
  ! LSHIFT          [ shift and go to state 85 ]
  ! RSHIFT          [ shift and go to state 82 ]
  ! URSHIFT         [ shift and go to state 101 ]


state 81

    (66) expression -> expression DOUBLEEQ . expression
    (50) expression -> . EVAL LEFTPAREN statements RIGHTPAREN
    (51) expression -> . EVAL LEFTPAREN block RIGHTPAREN
    (52) expression -> . expression PLUS expression
    (53) expression -> . expression MINUS expression
    (54) expression -> . expression INTO expression
    (55) expression -> . expression DIVIDE expression
    (56) expression -> . expression MOD expression
    (57) expression -> . expression EXPO expression
    (58) expression -> . LEFTPAREN expression RIGHTPAREN
    (59) expression -> . NOT expression
    (60) expression -> . expression BINAND expression
    (61) expression -> . expression BINOR expression
    (62) expression -> . expression BINXOR expression
    (63) expression -> . BINNOT expression
    (64) expression -> . expression LT expression
    (65) expression -> . expression GT expression
    (66) expression -> . expression DOUBLEEQ expression
    (67) expression -> . expression NOTEQUAL expression
    (68) expression -> . expression LTE expression
    (69) expression -> . expression GTE expression
    (70) expression -> . expression STREQUAL expression
    (71) expression -> . expression STRNEQUAL expression
    (72) expression -> . expression AND expression
    (73) expression -> . expression OR expression
    (74) expression -> . expression LSHIFT expression
    (75) expression -> . expression RSHIFT expression
    (76) expression -> . expression URSHIFT expression
    (77) expression -> . basicTypes
    (78) expression -> . functioncall
    (79) expression -> . arrayCall
    (80) expression -> . TYPEOF expression
    (82) basicTypes -> . NUMBER
    (83) basicTypes -> . STRING
    (84) basicTypes -> . ID
    (85) basicTypes -> . UNDEFINED
    (86) functioncall -> . ID LEFTPAREN argList RIGHTPAREN
    (81) arrayCall -> . ID LEFTBRACKET expression RIGHTBRACKET

    EVAL            shift and go to state 20
    LEFTPAREN       shift and go to state 36
    NOT             shift and go to state 32
    BINNOT          shift and go to state 25
    TYPEOF          shift and go to state 15
    NUMBER          shift and go to state 2
    STRING          shift and go to state 14
    ID              shift and go to state 37
    UNDEFINED       shift and go to state 21

    arrayCall                      shift and go to state 10
    functioncall                   shift and go to state 38
    expression                     shift and go to state 142
    basicTypes                     shift and go to state 33

state 82

    (75) expression -> expression RSHIFT . expression
    (50) expression -> . EVAL LEFTPAREN statements RIGHTPAREN
    (51) expression -> . EVAL LEFTPAREN block RIGHTPAREN
    (52) expression -> . expression PLUS expression
    (53) expression -> . expression MINUS expression
    (54) expression -> . expression INTO expression
    (55) expression -> . expression DIVIDE expression
    (56) expression -> . expression MOD expression
    (57) expression -> . expression EXPO expression
    (58) expression -> . LEFTPAREN expression RIGHTPAREN
    (59) expression -> . NOT expression
    (60) expression -> . expression BINAND expression
    (61) expression -> . expression BINOR expression
    (62) expression -> . expression BINXOR expression
    (63) expression -> . BINNOT expression
    (64) expression -> . expression LT expression
    (65) expression -> . expression GT expression
    (66) expression -> . expression DOUBLEEQ expression
    (67) expression -> . expression NOTEQUAL expression
    (68) expression -> . expression LTE expression
    (69) expression -> . expression GTE expression
    (70) expression -> . expression STREQUAL expression
    (71) expression -> . expression STRNEQUAL expression
    (72) expression -> . expression AND expression
    (73) expression -> . expression OR expression
    (74) expression -> . expression LSHIFT expression
    (75) expression -> . expression RSHIFT expression
    (76) expression -> . expression URSHIFT expression
    (77) expression -> . basicTypes
    (78) expression -> . functioncall
    (79) expression -> . arrayCall
    (80) expression -> . TYPEOF expression
    (82) basicTypes -> . NUMBER
    (83) basicTypes -> . STRING
    (84) basicTypes -> . ID
    (85) basicTypes -> . UNDEFINED
    (86) functioncall -> . ID LEFTPAREN argList RIGHTPAREN
    (81) arrayCall -> . ID LEFTBRACKET expression RIGHTBRACKET

    EVAL            shift and go to state 20
    LEFTPAREN       shift and go to state 36
    NOT             shift and go to state 32
    BINNOT          shift and go to state 25
    TYPEOF          shift and go to state 15
    NUMBER          shift and go to state 2
    STRING          shift and go to state 14
    ID              shift and go to state 37
    UNDEFINED       shift and go to state 21

    arrayCall                      shift and go to state 10
    functioncall                   shift and go to state 38
    expression                     shift and go to state 143
    basicTypes                     shift and go to state 33

state 83

    (67) expression -> expression NOTEQUAL . expression
    (50) expression -> . EVAL LEFTPAREN statements RIGHTPAREN
    (51) expression -> . EVAL LEFTPAREN block RIGHTPAREN
    (52) expression -> . expression PLUS expression
    (53) expression -> . expression MINUS expression
    (54) expression -> . expression INTO expression
    (55) expression -> . expression DIVIDE expression
    (56) expression -> . expression MOD expression
    (57) expression -> . expression EXPO expression
    (58) expression -> . LEFTPAREN expression RIGHTPAREN
    (59) expression -> . NOT expression
    (60) expression -> . expression BINAND expression
    (61) expression -> . expression BINOR expression
    (62) expression -> . expression BINXOR expression
    (63) expression -> . BINNOT expression
    (64) expression -> . expression LT expression
    (65) expression -> . expression GT expression
    (66) expression -> . expression DOUBLEEQ expression
    (67) expression -> . expression NOTEQUAL expression
    (68) expression -> . expression LTE expression
    (69) expression -> . expression GTE expression
    (70) expression -> . expression STREQUAL expression
    (71) expression -> . expression STRNEQUAL expression
    (72) expression -> . expression AND expression
    (73) expression -> . expression OR expression
    (74) expression -> . expression LSHIFT expression
    (75) expression -> . expression RSHIFT expression
    (76) expression -> . expression URSHIFT expression
    (77) expression -> . basicTypes
    (78) expression -> . functioncall
    (79) expression -> . arrayCall
    (80) expression -> . TYPEOF expression
    (82) basicTypes -> . NUMBER
    (83) basicTypes -> . STRING
    (84) basicTypes -> . ID
    (85) basicTypes -> . UNDEFINED
    (86) functioncall -> . ID LEFTPAREN argList RIGHTPAREN
    (81) arrayCall -> . ID LEFTBRACKET expression RIGHTBRACKET

    EVAL            shift and go to state 20
    LEFTPAREN       shift and go to state 36
    NOT             shift and go to state 32
    BINNOT          shift and go to state 25
    TYPEOF          shift and go to state 15
    NUMBER          shift and go to state 2
    STRING          shift and go to state 14
    ID              shift and go to state 37
    UNDEFINED       shift and go to state 21

    arrayCall                      shift and go to state 10
    functioncall                   shift and go to state 38
    expression                     shift and go to state 144
    basicTypes                     shift and go to state 33

state 84

    (71) expression -> expression STRNEQUAL . expression
    (50) expression -> . EVAL LEFTPAREN statements RIGHTPAREN
    (51) expression -> . EVAL LEFTPAREN block RIGHTPAREN
    (52) expression -> . expression PLUS expression
    (53) expression -> . expression MINUS expression
    (54) expression -> . expression INTO expression
    (55) expression -> . expression DIVIDE expression
    (56) expression -> . expression MOD expression
    (57) expression -> . expression EXPO expression
    (58) expression -> . LEFTPAREN expression RIGHTPAREN
    (59) expression -> . NOT expression
    (60) expression -> . expression BINAND expression
    (61) expression -> . expression BINOR expression
    (62) expression -> . expression BINXOR expression
    (63) expression -> . BINNOT expression
    (64) expression -> . expression LT expression
    (65) expression -> . expression GT expression
    (66) expression -> . expression DOUBLEEQ expression
    (67) expression -> . expression NOTEQUAL expression
    (68) expression -> . expression LTE expression
    (69) expression -> . expression GTE expression
    (70) expression -> . expression STREQUAL expression
    (71) expression -> . expression STRNEQUAL expression
    (72) expression -> . expression AND expression
    (73) expression -> . expression OR expression
    (74) expression -> . expression LSHIFT expression
    (75) expression -> . expression RSHIFT expression
    (76) expression -> . expression URSHIFT expression
    (77) expression -> . basicTypes
    (78) expression -> . functioncall
    (79) expression -> . arrayCall
    (80) expression -> . TYPEOF expression
    (82) basicTypes -> . NUMBER
    (83) basicTypes -> . STRING
    (84) basicTypes -> . ID
    (85) basicTypes -> . UNDEFINED
    (86) functioncall -> . ID LEFTPAREN argList RIGHTPAREN
    (81) arrayCall -> . ID LEFTBRACKET expression RIGHTBRACKET

    EVAL            shift and go to state 20
    LEFTPAREN       shift and go to state 36
    NOT             shift and go to state 32
    BINNOT          shift and go to state 25
    TYPEOF          shift and go to state 15
    NUMBER          shift and go to state 2
    STRING          shift and go to state 14
    ID              shift and go to state 37
    UNDEFINED       shift and go to state 21

    arrayCall                      shift and go to state 10
    functioncall                   shift and go to state 38
    expression                     shift and go to state 145
    basicTypes                     shift and go to state 33

state 85

    (74) expression -> expression LSHIFT . expression
    (50) expression -> . EVAL LEFTPAREN statements RIGHTPAREN
    (51) expression -> . EVAL LEFTPAREN block RIGHTPAREN
    (52) expression -> . expression PLUS expression
    (53) expression -> . expression MINUS expression
    (54) expression -> . expression INTO expression
    (55) expression -> . expression DIVIDE expression
    (56) expression -> . expression MOD expression
    (57) expression -> . expression EXPO expression
    (58) expression -> . LEFTPAREN expression RIGHTPAREN
    (59) expression -> . NOT expression
    (60) expression -> . expression BINAND expression
    (61) expression -> . expression BINOR expression
    (62) expression -> . expression BINXOR expression
    (63) expression -> . BINNOT expression
    (64) expression -> . expression LT expression
    (65) expression -> . expression GT expression
    (66) expression -> . expression DOUBLEEQ expression
    (67) expression -> . expression NOTEQUAL expression
    (68) expression -> . expression LTE expression
    (69) expression -> . expression GTE expression
    (70) expression -> . expression STREQUAL expression
    (71) expression -> . expression STRNEQUAL expression
    (72) expression -> . expression AND expression
    (73) expression -> . expression OR expression
    (74) expression -> . expression LSHIFT expression
    (75) expression -> . expression RSHIFT expression
    (76) expression -> . expression URSHIFT expression
    (77) expression -> . basicTypes
    (78) expression -> . functioncall
    (79) expression -> . arrayCall
    (80) expression -> . TYPEOF expression
    (82) basicTypes -> . NUMBER
    (83) basicTypes -> . STRING
    (84) basicTypes -> . ID
    (85) basicTypes -> . UNDEFINED
    (86) functioncall -> . ID LEFTPAREN argList RIGHTPAREN
    (81) arrayCall -> . ID LEFTBRACKET expression RIGHTBRACKET

    EVAL            shift and go to state 20
    LEFTPAREN       shift and go to state 36
    NOT             shift and go to state 32
    BINNOT          shift and go to state 25
    TYPEOF          shift and go to state 15
    NUMBER          shift and go to state 2
    STRING          shift and go to state 14
    ID              shift and go to state 37
    UNDEFINED       shift and go to state 21

    arrayCall                      shift and go to state 10
    functioncall                   shift and go to state 38
    expression                     shift and go to state 146
    basicTypes                     shift and go to state 33

state 86

    (53) expression -> expression MINUS . expression
    (50) expression -> . EVAL LEFTPAREN statements RIGHTPAREN
    (51) expression -> . EVAL LEFTPAREN block RIGHTPAREN
    (52) expression -> . expression PLUS expression
    (53) expression -> . expression MINUS expression
    (54) expression -> . expression INTO expression
    (55) expression -> . expression DIVIDE expression
    (56) expression -> . expression MOD expression
    (57) expression -> . expression EXPO expression
    (58) expression -> . LEFTPAREN expression RIGHTPAREN
    (59) expression -> . NOT expression
    (60) expression -> . expression BINAND expression
    (61) expression -> . expression BINOR expression
    (62) expression -> . expression BINXOR expression
    (63) expression -> . BINNOT expression
    (64) expression -> . expression LT expression
    (65) expression -> . expression GT expression
    (66) expression -> . expression DOUBLEEQ expression
    (67) expression -> . expression NOTEQUAL expression
    (68) expression -> . expression LTE expression
    (69) expression -> . expression GTE expression
    (70) expression -> . expression STREQUAL expression
    (71) expression -> . expression STRNEQUAL expression
    (72) expression -> . expression AND expression
    (73) expression -> . expression OR expression
    (74) expression -> . expression LSHIFT expression
    (75) expression -> . expression RSHIFT expression
    (76) expression -> . expression URSHIFT expression
    (77) expression -> . basicTypes
    (78) expression -> . functioncall
    (79) expression -> . arrayCall
    (80) expression -> . TYPEOF expression
    (82) basicTypes -> . NUMBER
    (83) basicTypes -> . STRING
    (84) basicTypes -> . ID
    (85) basicTypes -> . UNDEFINED
    (86) functioncall -> . ID LEFTPAREN argList RIGHTPAREN
    (81) arrayCall -> . ID LEFTBRACKET expression RIGHTBRACKET

    EVAL            shift and go to state 20
    LEFTPAREN       shift and go to state 36
    NOT             shift and go to state 32
    BINNOT          shift and go to state 25
    TYPEOF          shift and go to state 15
    NUMBER          shift and go to state 2
    STRING          shift and go to state 14
    ID              shift and go to state 37
    UNDEFINED       shift and go to state 21

    arrayCall                      shift and go to state 10
    functioncall                   shift and go to state 38
    expression                     shift and go to state 147
    basicTypes                     shift and go to state 33

state 87

    (69) expression -> expression GTE . expression
    (50) expression -> . EVAL LEFTPAREN statements RIGHTPAREN
    (51) expression -> . EVAL LEFTPAREN block RIGHTPAREN
    (52) expression -> . expression PLUS expression
    (53) expression -> . expression MINUS expression
    (54) expression -> . expression INTO expression
    (55) expression -> . expression DIVIDE expression
    (56) expression -> . expression MOD expression
    (57) expression -> . expression EXPO expression
    (58) expression -> . LEFTPAREN expression RIGHTPAREN
    (59) expression -> . NOT expression
    (60) expression -> . expression BINAND expression
    (61) expression -> . expression BINOR expression
    (62) expression -> . expression BINXOR expression
    (63) expression -> . BINNOT expression
    (64) expression -> . expression LT expression
    (65) expression -> . expression GT expression
    (66) expression -> . expression DOUBLEEQ expression
    (67) expression -> . expression NOTEQUAL expression
    (68) expression -> . expression LTE expression
    (69) expression -> . expression GTE expression
    (70) expression -> . expression STREQUAL expression
    (71) expression -> . expression STRNEQUAL expression
    (72) expression -> . expression AND expression
    (73) expression -> . expression OR expression
    (74) expression -> . expression LSHIFT expression
    (75) expression -> . expression RSHIFT expression
    (76) expression -> . expression URSHIFT expression
    (77) expression -> . basicTypes
    (78) expression -> . functioncall
    (79) expression -> . arrayCall
    (80) expression -> . TYPEOF expression
    (82) basicTypes -> . NUMBER
    (83) basicTypes -> . STRING
    (84) basicTypes -> . ID
    (85) basicTypes -> . UNDEFINED
    (86) functioncall -> . ID LEFTPAREN argList RIGHTPAREN
    (81) arrayCall -> . ID LEFTBRACKET expression RIGHTBRACKET

    EVAL            shift and go to state 20
    LEFTPAREN       shift and go to state 36
    NOT             shift and go to state 32
    BINNOT          shift and go to state 25
    TYPEOF          shift and go to state 15
    NUMBER          shift and go to state 2
    STRING          shift and go to state 14
    ID              shift and go to state 37
    UNDEFINED       shift and go to state 21

    arrayCall                      shift and go to state 10
    functioncall                   shift and go to state 38
    expression                     shift and go to state 148
    basicTypes                     shift and go to state 33

state 88

    (60) expression -> expression BINAND . expression
    (50) expression -> . EVAL LEFTPAREN statements RIGHTPAREN
    (51) expression -> . EVAL LEFTPAREN block RIGHTPAREN
    (52) expression -> . expression PLUS expression
    (53) expression -> . expression MINUS expression
    (54) expression -> . expression INTO expression
    (55) expression -> . expression DIVIDE expression
    (56) expression -> . expression MOD expression
    (57) expression -> . expression EXPO expression
    (58) expression -> . LEFTPAREN expression RIGHTPAREN
    (59) expression -> . NOT expression
    (60) expression -> . expression BINAND expression
    (61) expression -> . expression BINOR expression
    (62) expression -> . expression BINXOR expression
    (63) expression -> . BINNOT expression
    (64) expression -> . expression LT expression
    (65) expression -> . expression GT expression
    (66) expression -> . expression DOUBLEEQ expression
    (67) expression -> . expression NOTEQUAL expression
    (68) expression -> . expression LTE expression
    (69) expression -> . expression GTE expression
    (70) expression -> . expression STREQUAL expression
    (71) expression -> . expression STRNEQUAL expression
    (72) expression -> . expression AND expression
    (73) expression -> . expression OR expression
    (74) expression -> . expression LSHIFT expression
    (75) expression -> . expression RSHIFT expression
    (76) expression -> . expression URSHIFT expression
    (77) expression -> . basicTypes
    (78) expression -> . functioncall
    (79) expression -> . arrayCall
    (80) expression -> . TYPEOF expression
    (82) basicTypes -> . NUMBER
    (83) basicTypes -> . STRING
    (84) basicTypes -> . ID
    (85) basicTypes -> . UNDEFINED
    (86) functioncall -> . ID LEFTPAREN argList RIGHTPAREN
    (81) arrayCall -> . ID LEFTBRACKET expression RIGHTBRACKET

    EVAL            shift and go to state 20
    LEFTPAREN       shift and go to state 36
    NOT             shift and go to state 32
    BINNOT          shift and go to state 25
    TYPEOF          shift and go to state 15
    NUMBER          shift and go to state 2
    STRING          shift and go to state 14
    ID              shift and go to state 37
    UNDEFINED       shift and go to state 21

    arrayCall                      shift and go to state 10
    functioncall                   shift and go to state 38
    expression                     shift and go to state 149
    basicTypes                     shift and go to state 33

state 89

    (12) statement -> expression SEMICOLON .

    ELSE            reduce using rule 12 (statement -> expression SEMICOLON .)
    BREAK           reduce using rule 12 (statement -> expression SEMICOLON .)
    CONTINUE        reduce using rule 12 (statement -> expression SEMICOLON .)
    RETURN          reduce using rule 12 (statement -> expression SEMICOLON .)
    CONSOLE         reduce using rule 12 (statement -> expression SEMICOLON .)
    VAR             reduce using rule 12 (statement -> expression SEMICOLON .)
    LEFTPAREN       reduce using rule 12 (statement -> expression SEMICOLON .)
    ID              reduce using rule 12 (statement -> expression SEMICOLON .)
    EVAL            reduce using rule 12 (statement -> expression SEMICOLON .)
    NOT             reduce using rule 12 (statement -> expression SEMICOLON .)
    BINNOT          reduce using rule 12 (statement -> expression SEMICOLON .)
    TYPEOF          reduce using rule 12 (statement -> expression SEMICOLON .)
    IF              reduce using rule 12 (statement -> expression SEMICOLON .)
    WHILE           reduce using rule 12 (statement -> expression SEMICOLON .)
    FOR             reduce using rule 12 (statement -> expression SEMICOLON .)
    FUNCTION        reduce using rule 12 (statement -> expression SEMICOLON .)
    NUMBER          reduce using rule 12 (statement -> expression SEMICOLON .)
    STRING          reduce using rule 12 (statement -> expression SEMICOLON .)
    UNDEFINED       reduce using rule 12 (statement -> expression SEMICOLON .)
    $end            reduce using rule 12 (statement -> expression SEMICOLON .)
    RIGHTBRACE      reduce using rule 12 (statement -> expression SEMICOLON .)
    RIGHTPAREN      reduce using rule 12 (statement -> expression SEMICOLON .)
    SEMICOLON       reduce using rule 12 (statement -> expression SEMICOLON .)


state 90

    (70) expression -> expression STREQUAL . expression
    (50) expression -> . EVAL LEFTPAREN statements RIGHTPAREN
    (51) expression -> . EVAL LEFTPAREN block RIGHTPAREN
    (52) expression -> . expression PLUS expression
    (53) expression -> . expression MINUS expression
    (54) expression -> . expression INTO expression
    (55) expression -> . expression DIVIDE expression
    (56) expression -> . expression MOD expression
    (57) expression -> . expression EXPO expression
    (58) expression -> . LEFTPAREN expression RIGHTPAREN
    (59) expression -> . NOT expression
    (60) expression -> . expression BINAND expression
    (61) expression -> . expression BINOR expression
    (62) expression -> . expression BINXOR expression
    (63) expression -> . BINNOT expression
    (64) expression -> . expression LT expression
    (65) expression -> . expression GT expression
    (66) expression -> . expression DOUBLEEQ expression
    (67) expression -> . expression NOTEQUAL expression
    (68) expression -> . expression LTE expression
    (69) expression -> . expression GTE expression
    (70) expression -> . expression STREQUAL expression
    (71) expression -> . expression STRNEQUAL expression
    (72) expression -> . expression AND expression
    (73) expression -> . expression OR expression
    (74) expression -> . expression LSHIFT expression
    (75) expression -> . expression RSHIFT expression
    (76) expression -> . expression URSHIFT expression
    (77) expression -> . basicTypes
    (78) expression -> . functioncall
    (79) expression -> . arrayCall
    (80) expression -> . TYPEOF expression
    (82) basicTypes -> . NUMBER
    (83) basicTypes -> . STRING
    (84) basicTypes -> . ID
    (85) basicTypes -> . UNDEFINED
    (86) functioncall -> . ID LEFTPAREN argList RIGHTPAREN
    (81) arrayCall -> . ID LEFTBRACKET expression RIGHTBRACKET

    EVAL            shift and go to state 20
    LEFTPAREN       shift and go to state 36
    NOT             shift and go to state 32
    BINNOT          shift and go to state 25
    TYPEOF          shift and go to state 15
    NUMBER          shift and go to state 2
    STRING          shift and go to state 14
    ID              shift and go to state 37
    UNDEFINED       shift and go to state 21

    arrayCall                      shift and go to state 10
    functioncall                   shift and go to state 38
    expression                     shift and go to state 150
    basicTypes                     shift and go to state 33

state 91

    (64) expression -> expression LT . expression
    (50) expression -> . EVAL LEFTPAREN statements RIGHTPAREN
    (51) expression -> . EVAL LEFTPAREN block RIGHTPAREN
    (52) expression -> . expression PLUS expression
    (53) expression -> . expression MINUS expression
    (54) expression -> . expression INTO expression
    (55) expression -> . expression DIVIDE expression
    (56) expression -> . expression MOD expression
    (57) expression -> . expression EXPO expression
    (58) expression -> . LEFTPAREN expression RIGHTPAREN
    (59) expression -> . NOT expression
    (60) expression -> . expression BINAND expression
    (61) expression -> . expression BINOR expression
    (62) expression -> . expression BINXOR expression
    (63) expression -> . BINNOT expression
    (64) expression -> . expression LT expression
    (65) expression -> . expression GT expression
    (66) expression -> . expression DOUBLEEQ expression
    (67) expression -> . expression NOTEQUAL expression
    (68) expression -> . expression LTE expression
    (69) expression -> . expression GTE expression
    (70) expression -> . expression STREQUAL expression
    (71) expression -> . expression STRNEQUAL expression
    (72) expression -> . expression AND expression
    (73) expression -> . expression OR expression
    (74) expression -> . expression LSHIFT expression
    (75) expression -> . expression RSHIFT expression
    (76) expression -> . expression URSHIFT expression
    (77) expression -> . basicTypes
    (78) expression -> . functioncall
    (79) expression -> . arrayCall
    (80) expression -> . TYPEOF expression
    (82) basicTypes -> . NUMBER
    (83) basicTypes -> . STRING
    (84) basicTypes -> . ID
    (85) basicTypes -> . UNDEFINED
    (86) functioncall -> . ID LEFTPAREN argList RIGHTPAREN
    (81) arrayCall -> . ID LEFTBRACKET expression RIGHTBRACKET

    EVAL            shift and go to state 20
    LEFTPAREN       shift and go to state 36
    NOT             shift and go to state 32
    BINNOT          shift and go to state 25
    TYPEOF          shift and go to state 15
    NUMBER          shift and go to state 2
    STRING          shift and go to state 14
    ID              shift and go to state 37
    UNDEFINED       shift and go to state 21

    arrayCall                      shift and go to state 10
    functioncall                   shift and go to state 38
    expression                     shift and go to state 151
    basicTypes                     shift and go to state 33

state 92

    (52) expression -> expression PLUS . expression
    (50) expression -> . EVAL LEFTPAREN statements RIGHTPAREN
    (51) expression -> . EVAL LEFTPAREN block RIGHTPAREN
    (52) expression -> . expression PLUS expression
    (53) expression -> . expression MINUS expression
    (54) expression -> . expression INTO expression
    (55) expression -> . expression DIVIDE expression
    (56) expression -> . expression MOD expression
    (57) expression -> . expression EXPO expression
    (58) expression -> . LEFTPAREN expression RIGHTPAREN
    (59) expression -> . NOT expression
    (60) expression -> . expression BINAND expression
    (61) expression -> . expression BINOR expression
    (62) expression -> . expression BINXOR expression
    (63) expression -> . BINNOT expression
    (64) expression -> . expression LT expression
    (65) expression -> . expression GT expression
    (66) expression -> . expression DOUBLEEQ expression
    (67) expression -> . expression NOTEQUAL expression
    (68) expression -> . expression LTE expression
    (69) expression -> . expression GTE expression
    (70) expression -> . expression STREQUAL expression
    (71) expression -> . expression STRNEQUAL expression
    (72) expression -> . expression AND expression
    (73) expression -> . expression OR expression
    (74) expression -> . expression LSHIFT expression
    (75) expression -> . expression RSHIFT expression
    (76) expression -> . expression URSHIFT expression
    (77) expression -> . basicTypes
    (78) expression -> . functioncall
    (79) expression -> . arrayCall
    (80) expression -> . TYPEOF expression
    (82) basicTypes -> . NUMBER
    (83) basicTypes -> . STRING
    (84) basicTypes -> . ID
    (85) basicTypes -> . UNDEFINED
    (86) functioncall -> . ID LEFTPAREN argList RIGHTPAREN
    (81) arrayCall -> . ID LEFTBRACKET expression RIGHTBRACKET

    EVAL            shift and go to state 20
    LEFTPAREN       shift and go to state 36
    NOT             shift and go to state 32
    BINNOT          shift and go to state 25
    TYPEOF          shift and go to state 15
    NUMBER          shift and go to state 2
    STRING          shift and go to state 14
    ID              shift and go to state 37
    UNDEFINED       shift and go to state 21

    arrayCall                      shift and go to state 10
    functioncall                   shift and go to state 38
    expression                     shift and go to state 152
    basicTypes                     shift and go to state 33

state 93

    (57) expression -> expression EXPO . expression
    (50) expression -> . EVAL LEFTPAREN statements RIGHTPAREN
    (51) expression -> . EVAL LEFTPAREN block RIGHTPAREN
    (52) expression -> . expression PLUS expression
    (53) expression -> . expression MINUS expression
    (54) expression -> . expression INTO expression
    (55) expression -> . expression DIVIDE expression
    (56) expression -> . expression MOD expression
    (57) expression -> . expression EXPO expression
    (58) expression -> . LEFTPAREN expression RIGHTPAREN
    (59) expression -> . NOT expression
    (60) expression -> . expression BINAND expression
    (61) expression -> . expression BINOR expression
    (62) expression -> . expression BINXOR expression
    (63) expression -> . BINNOT expression
    (64) expression -> . expression LT expression
    (65) expression -> . expression GT expression
    (66) expression -> . expression DOUBLEEQ expression
    (67) expression -> . expression NOTEQUAL expression
    (68) expression -> . expression LTE expression
    (69) expression -> . expression GTE expression
    (70) expression -> . expression STREQUAL expression
    (71) expression -> . expression STRNEQUAL expression
    (72) expression -> . expression AND expression
    (73) expression -> . expression OR expression
    (74) expression -> . expression LSHIFT expression
    (75) expression -> . expression RSHIFT expression
    (76) expression -> . expression URSHIFT expression
    (77) expression -> . basicTypes
    (78) expression -> . functioncall
    (79) expression -> . arrayCall
    (80) expression -> . TYPEOF expression
    (82) basicTypes -> . NUMBER
    (83) basicTypes -> . STRING
    (84) basicTypes -> . ID
    (85) basicTypes -> . UNDEFINED
    (86) functioncall -> . ID LEFTPAREN argList RIGHTPAREN
    (81) arrayCall -> . ID LEFTBRACKET expression RIGHTBRACKET

    EVAL            shift and go to state 20
    LEFTPAREN       shift and go to state 36
    NOT             shift and go to state 32
    BINNOT          shift and go to state 25
    TYPEOF          shift and go to state 15
    NUMBER          shift and go to state 2
    STRING          shift and go to state 14
    ID              shift and go to state 37
    UNDEFINED       shift and go to state 21

    arrayCall                      shift and go to state 10
    functioncall                   shift and go to state 38
    expression                     shift and go to state 153
    basicTypes                     shift and go to state 33

state 94

    (62) expression -> expression BINXOR . expression
    (50) expression -> . EVAL LEFTPAREN statements RIGHTPAREN
    (51) expression -> . EVAL LEFTPAREN block RIGHTPAREN
    (52) expression -> . expression PLUS expression
    (53) expression -> . expression MINUS expression
    (54) expression -> . expression INTO expression
    (55) expression -> . expression DIVIDE expression
    (56) expression -> . expression MOD expression
    (57) expression -> . expression EXPO expression
    (58) expression -> . LEFTPAREN expression RIGHTPAREN
    (59) expression -> . NOT expression
    (60) expression -> . expression BINAND expression
    (61) expression -> . expression BINOR expression
    (62) expression -> . expression BINXOR expression
    (63) expression -> . BINNOT expression
    (64) expression -> . expression LT expression
    (65) expression -> . expression GT expression
    (66) expression -> . expression DOUBLEEQ expression
    (67) expression -> . expression NOTEQUAL expression
    (68) expression -> . expression LTE expression
    (69) expression -> . expression GTE expression
    (70) expression -> . expression STREQUAL expression
    (71) expression -> . expression STRNEQUAL expression
    (72) expression -> . expression AND expression
    (73) expression -> . expression OR expression
    (74) expression -> . expression LSHIFT expression
    (75) expression -> . expression RSHIFT expression
    (76) expression -> . expression URSHIFT expression
    (77) expression -> . basicTypes
    (78) expression -> . functioncall
    (79) expression -> . arrayCall
    (80) expression -> . TYPEOF expression
    (82) basicTypes -> . NUMBER
    (83) basicTypes -> . STRING
    (84) basicTypes -> . ID
    (85) basicTypes -> . UNDEFINED
    (86) functioncall -> . ID LEFTPAREN argList RIGHTPAREN
    (81) arrayCall -> . ID LEFTBRACKET expression RIGHTBRACKET

    EVAL            shift and go to state 20
    LEFTPAREN       shift and go to state 36
    NOT             shift and go to state 32
    BINNOT          shift and go to state 25
    TYPEOF          shift and go to state 15
    NUMBER          shift and go to state 2
    STRING          shift and go to state 14
    ID              shift and go to state 37
    UNDEFINED       shift and go to state 21

    arrayCall                      shift and go to state 10
    functioncall                   shift and go to state 38
    expression                     shift and go to state 154
    basicTypes                     shift and go to state 33

state 95

    (65) expression -> expression GT . expression
    (50) expression -> . EVAL LEFTPAREN statements RIGHTPAREN
    (51) expression -> . EVAL LEFTPAREN block RIGHTPAREN
    (52) expression -> . expression PLUS expression
    (53) expression -> . expression MINUS expression
    (54) expression -> . expression INTO expression
    (55) expression -> . expression DIVIDE expression
    (56) expression -> . expression MOD expression
    (57) expression -> . expression EXPO expression
    (58) expression -> . LEFTPAREN expression RIGHTPAREN
    (59) expression -> . NOT expression
    (60) expression -> . expression BINAND expression
    (61) expression -> . expression BINOR expression
    (62) expression -> . expression BINXOR expression
    (63) expression -> . BINNOT expression
    (64) expression -> . expression LT expression
    (65) expression -> . expression GT expression
    (66) expression -> . expression DOUBLEEQ expression
    (67) expression -> . expression NOTEQUAL expression
    (68) expression -> . expression LTE expression
    (69) expression -> . expression GTE expression
    (70) expression -> . expression STREQUAL expression
    (71) expression -> . expression STRNEQUAL expression
    (72) expression -> . expression AND expression
    (73) expression -> . expression OR expression
    (74) expression -> . expression LSHIFT expression
    (75) expression -> . expression RSHIFT expression
    (76) expression -> . expression URSHIFT expression
    (77) expression -> . basicTypes
    (78) expression -> . functioncall
    (79) expression -> . arrayCall
    (80) expression -> . TYPEOF expression
    (82) basicTypes -> . NUMBER
    (83) basicTypes -> . STRING
    (84) basicTypes -> . ID
    (85) basicTypes -> . UNDEFINED
    (86) functioncall -> . ID LEFTPAREN argList RIGHTPAREN
    (81) arrayCall -> . ID LEFTBRACKET expression RIGHTBRACKET

    EVAL            shift and go to state 20
    LEFTPAREN       shift and go to state 36
    NOT             shift and go to state 32
    BINNOT          shift and go to state 25
    TYPEOF          shift and go to state 15
    NUMBER          shift and go to state 2
    STRING          shift and go to state 14
    ID              shift and go to state 37
    UNDEFINED       shift and go to state 21

    arrayCall                      shift and go to state 10
    functioncall                   shift and go to state 38
    expression                     shift and go to state 155
    basicTypes                     shift and go to state 33

state 96

    (55) expression -> expression DIVIDE . expression
    (50) expression -> . EVAL LEFTPAREN statements RIGHTPAREN
    (51) expression -> . EVAL LEFTPAREN block RIGHTPAREN
    (52) expression -> . expression PLUS expression
    (53) expression -> . expression MINUS expression
    (54) expression -> . expression INTO expression
    (55) expression -> . expression DIVIDE expression
    (56) expression -> . expression MOD expression
    (57) expression -> . expression EXPO expression
    (58) expression -> . LEFTPAREN expression RIGHTPAREN
    (59) expression -> . NOT expression
    (60) expression -> . expression BINAND expression
    (61) expression -> . expression BINOR expression
    (62) expression -> . expression BINXOR expression
    (63) expression -> . BINNOT expression
    (64) expression -> . expression LT expression
    (65) expression -> . expression GT expression
    (66) expression -> . expression DOUBLEEQ expression
    (67) expression -> . expression NOTEQUAL expression
    (68) expression -> . expression LTE expression
    (69) expression -> . expression GTE expression
    (70) expression -> . expression STREQUAL expression
    (71) expression -> . expression STRNEQUAL expression
    (72) expression -> . expression AND expression
    (73) expression -> . expression OR expression
    (74) expression -> . expression LSHIFT expression
    (75) expression -> . expression RSHIFT expression
    (76) expression -> . expression URSHIFT expression
    (77) expression -> . basicTypes
    (78) expression -> . functioncall
    (79) expression -> . arrayCall
    (80) expression -> . TYPEOF expression
    (82) basicTypes -> . NUMBER
    (83) basicTypes -> . STRING
    (84) basicTypes -> . ID
    (85) basicTypes -> . UNDEFINED
    (86) functioncall -> . ID LEFTPAREN argList RIGHTPAREN
    (81) arrayCall -> . ID LEFTBRACKET expression RIGHTBRACKET

    EVAL            shift and go to state 20
    LEFTPAREN       shift and go to state 36
    NOT             shift and go to state 32
    BINNOT          shift and go to state 25
    TYPEOF          shift and go to state 15
    NUMBER          shift and go to state 2
    STRING          shift and go to state 14
    ID              shift and go to state 37
    UNDEFINED       shift and go to state 21

    arrayCall                      shift and go to state 10
    functioncall                   shift and go to state 38
    expression                     shift and go to state 156
    basicTypes                     shift and go to state 33

state 97

    (54) expression -> expression INTO . expression
    (50) expression -> . EVAL LEFTPAREN statements RIGHTPAREN
    (51) expression -> . EVAL LEFTPAREN block RIGHTPAREN
    (52) expression -> . expression PLUS expression
    (53) expression -> . expression MINUS expression
    (54) expression -> . expression INTO expression
    (55) expression -> . expression DIVIDE expression
    (56) expression -> . expression MOD expression
    (57) expression -> . expression EXPO expression
    (58) expression -> . LEFTPAREN expression RIGHTPAREN
    (59) expression -> . NOT expression
    (60) expression -> . expression BINAND expression
    (61) expression -> . expression BINOR expression
    (62) expression -> . expression BINXOR expression
    (63) expression -> . BINNOT expression
    (64) expression -> . expression LT expression
    (65) expression -> . expression GT expression
    (66) expression -> . expression DOUBLEEQ expression
    (67) expression -> . expression NOTEQUAL expression
    (68) expression -> . expression LTE expression
    (69) expression -> . expression GTE expression
    (70) expression -> . expression STREQUAL expression
    (71) expression -> . expression STRNEQUAL expression
    (72) expression -> . expression AND expression
    (73) expression -> . expression OR expression
    (74) expression -> . expression LSHIFT expression
    (75) expression -> . expression RSHIFT expression
    (76) expression -> . expression URSHIFT expression
    (77) expression -> . basicTypes
    (78) expression -> . functioncall
    (79) expression -> . arrayCall
    (80) expression -> . TYPEOF expression
    (82) basicTypes -> . NUMBER
    (83) basicTypes -> . STRING
    (84) basicTypes -> . ID
    (85) basicTypes -> . UNDEFINED
    (86) functioncall -> . ID LEFTPAREN argList RIGHTPAREN
    (81) arrayCall -> . ID LEFTBRACKET expression RIGHTBRACKET

    EVAL            shift and go to state 20
    LEFTPAREN       shift and go to state 36
    NOT             shift and go to state 32
    BINNOT          shift and go to state 25
    TYPEOF          shift and go to state 15
    NUMBER          shift and go to state 2
    STRING          shift and go to state 14
    ID              shift and go to state 37
    UNDEFINED       shift and go to state 21

    arrayCall                      shift and go to state 10
    functioncall                   shift and go to state 38
    expression                     shift and go to state 157
    basicTypes                     shift and go to state 33

state 98

    (68) expression -> expression LTE . expression
    (50) expression -> . EVAL LEFTPAREN statements RIGHTPAREN
    (51) expression -> . EVAL LEFTPAREN block RIGHTPAREN
    (52) expression -> . expression PLUS expression
    (53) expression -> . expression MINUS expression
    (54) expression -> . expression INTO expression
    (55) expression -> . expression DIVIDE expression
    (56) expression -> . expression MOD expression
    (57) expression -> . expression EXPO expression
    (58) expression -> . LEFTPAREN expression RIGHTPAREN
    (59) expression -> . NOT expression
    (60) expression -> . expression BINAND expression
    (61) expression -> . expression BINOR expression
    (62) expression -> . expression BINXOR expression
    (63) expression -> . BINNOT expression
    (64) expression -> . expression LT expression
    (65) expression -> . expression GT expression
    (66) expression -> . expression DOUBLEEQ expression
    (67) expression -> . expression NOTEQUAL expression
    (68) expression -> . expression LTE expression
    (69) expression -> . expression GTE expression
    (70) expression -> . expression STREQUAL expression
    (71) expression -> . expression STRNEQUAL expression
    (72) expression -> . expression AND expression
    (73) expression -> . expression OR expression
    (74) expression -> . expression LSHIFT expression
    (75) expression -> . expression RSHIFT expression
    (76) expression -> . expression URSHIFT expression
    (77) expression -> . basicTypes
    (78) expression -> . functioncall
    (79) expression -> . arrayCall
    (80) expression -> . TYPEOF expression
    (82) basicTypes -> . NUMBER
    (83) basicTypes -> . STRING
    (84) basicTypes -> . ID
    (85) basicTypes -> . UNDEFINED
    (86) functioncall -> . ID LEFTPAREN argList RIGHTPAREN
    (81) arrayCall -> . ID LEFTBRACKET expression RIGHTBRACKET

    EVAL            shift and go to state 20
    LEFTPAREN       shift and go to state 36
    NOT             shift and go to state 32
    BINNOT          shift and go to state 25
    TYPEOF          shift and go to state 15
    NUMBER          shift and go to state 2
    STRING          shift and go to state 14
    ID              shift and go to state 37
    UNDEFINED       shift and go to state 21

    arrayCall                      shift and go to state 10
    functioncall                   shift and go to state 38
    expression                     shift and go to state 158
    basicTypes                     shift and go to state 33

state 99

    (72) expression -> expression AND . expression
    (50) expression -> . EVAL LEFTPAREN statements RIGHTPAREN
    (51) expression -> . EVAL LEFTPAREN block RIGHTPAREN
    (52) expression -> . expression PLUS expression
    (53) expression -> . expression MINUS expression
    (54) expression -> . expression INTO expression
    (55) expression -> . expression DIVIDE expression
    (56) expression -> . expression MOD expression
    (57) expression -> . expression EXPO expression
    (58) expression -> . LEFTPAREN expression RIGHTPAREN
    (59) expression -> . NOT expression
    (60) expression -> . expression BINAND expression
    (61) expression -> . expression BINOR expression
    (62) expression -> . expression BINXOR expression
    (63) expression -> . BINNOT expression
    (64) expression -> . expression LT expression
    (65) expression -> . expression GT expression
    (66) expression -> . expression DOUBLEEQ expression
    (67) expression -> . expression NOTEQUAL expression
    (68) expression -> . expression LTE expression
    (69) expression -> . expression GTE expression
    (70) expression -> . expression STREQUAL expression
    (71) expression -> . expression STRNEQUAL expression
    (72) expression -> . expression AND expression
    (73) expression -> . expression OR expression
    (74) expression -> . expression LSHIFT expression
    (75) expression -> . expression RSHIFT expression
    (76) expression -> . expression URSHIFT expression
    (77) expression -> . basicTypes
    (78) expression -> . functioncall
    (79) expression -> . arrayCall
    (80) expression -> . TYPEOF expression
    (82) basicTypes -> . NUMBER
    (83) basicTypes -> . STRING
    (84) basicTypes -> . ID
    (85) basicTypes -> . UNDEFINED
    (86) functioncall -> . ID LEFTPAREN argList RIGHTPAREN
    (81) arrayCall -> . ID LEFTBRACKET expression RIGHTBRACKET

    EVAL            shift and go to state 20
    LEFTPAREN       shift and go to state 36
    NOT             shift and go to state 32
    BINNOT          shift and go to state 25
    TYPEOF          shift and go to state 15
    NUMBER          shift and go to state 2
    STRING          shift and go to state 14
    ID              shift and go to state 37
    UNDEFINED       shift and go to state 21

    arrayCall                      shift and go to state 10
    functioncall                   shift and go to state 38
    expression                     shift and go to state 159
    basicTypes                     shift and go to state 33

state 100

    (61) expression -> expression BINOR . expression
    (50) expression -> . EVAL LEFTPAREN statements RIGHTPAREN
    (51) expression -> . EVAL LEFTPAREN block RIGHTPAREN
    (52) expression -> . expression PLUS expression
    (53) expression -> . expression MINUS expression
    (54) expression -> . expression INTO expression
    (55) expression -> . expression DIVIDE expression
    (56) expression -> . expression MOD expression
    (57) expression -> . expression EXPO expression
    (58) expression -> . LEFTPAREN expression RIGHTPAREN
    (59) expression -> . NOT expression
    (60) expression -> . expression BINAND expression
    (61) expression -> . expression BINOR expression
    (62) expression -> . expression BINXOR expression
    (63) expression -> . BINNOT expression
    (64) expression -> . expression LT expression
    (65) expression -> . expression GT expression
    (66) expression -> . expression DOUBLEEQ expression
    (67) expression -> . expression NOTEQUAL expression
    (68) expression -> . expression LTE expression
    (69) expression -> . expression GTE expression
    (70) expression -> . expression STREQUAL expression
    (71) expression -> . expression STRNEQUAL expression
    (72) expression -> . expression AND expression
    (73) expression -> . expression OR expression
    (74) expression -> . expression LSHIFT expression
    (75) expression -> . expression RSHIFT expression
    (76) expression -> . expression URSHIFT expression
    (77) expression -> . basicTypes
    (78) expression -> . functioncall
    (79) expression -> . arrayCall
    (80) expression -> . TYPEOF expression
    (82) basicTypes -> . NUMBER
    (83) basicTypes -> . STRING
    (84) basicTypes -> . ID
    (85) basicTypes -> . UNDEFINED
    (86) functioncall -> . ID LEFTPAREN argList RIGHTPAREN
    (81) arrayCall -> . ID LEFTBRACKET expression RIGHTBRACKET

    EVAL            shift and go to state 20
    LEFTPAREN       shift and go to state 36
    NOT             shift and go to state 32
    BINNOT          shift and go to state 25
    TYPEOF          shift and go to state 15
    NUMBER          shift and go to state 2
    STRING          shift and go to state 14
    ID              shift and go to state 37
    UNDEFINED       shift and go to state 21

    arrayCall                      shift and go to state 10
    functioncall                   shift and go to state 38
    expression                     shift and go to state 160
    basicTypes                     shift and go to state 33

state 101

    (76) expression -> expression URSHIFT . expression
    (50) expression -> . EVAL LEFTPAREN statements RIGHTPAREN
    (51) expression -> . EVAL LEFTPAREN block RIGHTPAREN
    (52) expression -> . expression PLUS expression
    (53) expression -> . expression MINUS expression
    (54) expression -> . expression INTO expression
    (55) expression -> . expression DIVIDE expression
    (56) expression -> . expression MOD expression
    (57) expression -> . expression EXPO expression
    (58) expression -> . LEFTPAREN expression RIGHTPAREN
    (59) expression -> . NOT expression
    (60) expression -> . expression BINAND expression
    (61) expression -> . expression BINOR expression
    (62) expression -> . expression BINXOR expression
    (63) expression -> . BINNOT expression
    (64) expression -> . expression LT expression
    (65) expression -> . expression GT expression
    (66) expression -> . expression DOUBLEEQ expression
    (67) expression -> . expression NOTEQUAL expression
    (68) expression -> . expression LTE expression
    (69) expression -> . expression GTE expression
    (70) expression -> . expression STREQUAL expression
    (71) expression -> . expression STRNEQUAL expression
    (72) expression -> . expression AND expression
    (73) expression -> . expression OR expression
    (74) expression -> . expression LSHIFT expression
    (75) expression -> . expression RSHIFT expression
    (76) expression -> . expression URSHIFT expression
    (77) expression -> . basicTypes
    (78) expression -> . functioncall
    (79) expression -> . arrayCall
    (80) expression -> . TYPEOF expression
    (82) basicTypes -> . NUMBER
    (83) basicTypes -> . STRING
    (84) basicTypes -> . ID
    (85) basicTypes -> . UNDEFINED
    (86) functioncall -> . ID LEFTPAREN argList RIGHTPAREN
    (81) arrayCall -> . ID LEFTBRACKET expression RIGHTBRACKET

    EVAL            shift and go to state 20
    LEFTPAREN       shift and go to state 36
    NOT             shift and go to state 32
    BINNOT          shift and go to state 25
    TYPEOF          shift and go to state 15
    NUMBER          shift and go to state 2
    STRING          shift and go to state 14
    ID              shift and go to state 37
    UNDEFINED       shift and go to state 21

    arrayCall                      shift and go to state 10
    functioncall                   shift and go to state 38
    expression                     shift and go to state 161
    basicTypes                     shift and go to state 33

state 102

    (73) expression -> expression OR . expression
    (50) expression -> . EVAL LEFTPAREN statements RIGHTPAREN
    (51) expression -> . EVAL LEFTPAREN block RIGHTPAREN
    (52) expression -> . expression PLUS expression
    (53) expression -> . expression MINUS expression
    (54) expression -> . expression INTO expression
    (55) expression -> . expression DIVIDE expression
    (56) expression -> . expression MOD expression
    (57) expression -> . expression EXPO expression
    (58) expression -> . LEFTPAREN expression RIGHTPAREN
    (59) expression -> . NOT expression
    (60) expression -> . expression BINAND expression
    (61) expression -> . expression BINOR expression
    (62) expression -> . expression BINXOR expression
    (63) expression -> . BINNOT expression
    (64) expression -> . expression LT expression
    (65) expression -> . expression GT expression
    (66) expression -> . expression DOUBLEEQ expression
    (67) expression -> . expression NOTEQUAL expression
    (68) expression -> . expression LTE expression
    (69) expression -> . expression GTE expression
    (70) expression -> . expression STREQUAL expression
    (71) expression -> . expression STRNEQUAL expression
    (72) expression -> . expression AND expression
    (73) expression -> . expression OR expression
    (74) expression -> . expression LSHIFT expression
    (75) expression -> . expression RSHIFT expression
    (76) expression -> . expression URSHIFT expression
    (77) expression -> . basicTypes
    (78) expression -> . functioncall
    (79) expression -> . arrayCall
    (80) expression -> . TYPEOF expression
    (82) basicTypes -> . NUMBER
    (83) basicTypes -> . STRING
    (84) basicTypes -> . ID
    (85) basicTypes -> . UNDEFINED
    (86) functioncall -> . ID LEFTPAREN argList RIGHTPAREN
    (81) arrayCall -> . ID LEFTBRACKET expression RIGHTBRACKET

    EVAL            shift and go to state 20
    LEFTPAREN       shift and go to state 36
    NOT             shift and go to state 32
    BINNOT          shift and go to state 25
    TYPEOF          shift and go to state 15
    NUMBER          shift and go to state 2
    STRING          shift and go to state 14
    ID              shift and go to state 37
    UNDEFINED       shift and go to state 21

    arrayCall                      shift and go to state 10
    functioncall                   shift and go to state 38
    expression                     shift and go to state 162
    basicTypes                     shift and go to state 33

state 103

    (56) expression -> expression MOD . expression
    (50) expression -> . EVAL LEFTPAREN statements RIGHTPAREN
    (51) expression -> . EVAL LEFTPAREN block RIGHTPAREN
    (52) expression -> . expression PLUS expression
    (53) expression -> . expression MINUS expression
    (54) expression -> . expression INTO expression
    (55) expression -> . expression DIVIDE expression
    (56) expression -> . expression MOD expression
    (57) expression -> . expression EXPO expression
    (58) expression -> . LEFTPAREN expression RIGHTPAREN
    (59) expression -> . NOT expression
    (60) expression -> . expression BINAND expression
    (61) expression -> . expression BINOR expression
    (62) expression -> . expression BINXOR expression
    (63) expression -> . BINNOT expression
    (64) expression -> . expression LT expression
    (65) expression -> . expression GT expression
    (66) expression -> . expression DOUBLEEQ expression
    (67) expression -> . expression NOTEQUAL expression
    (68) expression -> . expression LTE expression
    (69) expression -> . expression GTE expression
    (70) expression -> . expression STREQUAL expression
    (71) expression -> . expression STRNEQUAL expression
    (72) expression -> . expression AND expression
    (73) expression -> . expression OR expression
    (74) expression -> . expression LSHIFT expression
    (75) expression -> . expression RSHIFT expression
    (76) expression -> . expression URSHIFT expression
    (77) expression -> . basicTypes
    (78) expression -> . functioncall
    (79) expression -> . arrayCall
    (80) expression -> . TYPEOF expression
    (82) basicTypes -> . NUMBER
    (83) basicTypes -> . STRING
    (84) basicTypes -> . ID
    (85) basicTypes -> . UNDEFINED
    (86) functioncall -> . ID LEFTPAREN argList RIGHTPAREN
    (81) arrayCall -> . ID LEFTBRACKET expression RIGHTBRACKET

    EVAL            shift and go to state 20
    LEFTPAREN       shift and go to state 36
    NOT             shift and go to state 32
    BINNOT          shift and go to state 25
    TYPEOF          shift and go to state 15
    NUMBER          shift and go to state 2
    STRING          shift and go to state 14
    ID              shift and go to state 37
    UNDEFINED       shift and go to state 21

    arrayCall                      shift and go to state 10
    functioncall                   shift and go to state 38
    expression                     shift and go to state 163
    basicTypes                     shift and go to state 33

state 104

    (95) cblock -> statement .

    ELSE            reduce using rule 95 (cblock -> statement .)
    BREAK           reduce using rule 95 (cblock -> statement .)
    CONTINUE        reduce using rule 95 (cblock -> statement .)
    RETURN          reduce using rule 95 (cblock -> statement .)
    CONSOLE         reduce using rule 95 (cblock -> statement .)
    VAR             reduce using rule 95 (cblock -> statement .)
    LEFTPAREN       reduce using rule 95 (cblock -> statement .)
    ID              reduce using rule 95 (cblock -> statement .)
    EVAL            reduce using rule 95 (cblock -> statement .)
    NOT             reduce using rule 95 (cblock -> statement .)
    BINNOT          reduce using rule 95 (cblock -> statement .)
    TYPEOF          reduce using rule 95 (cblock -> statement .)
    IF              reduce using rule 95 (cblock -> statement .)
    WHILE           reduce using rule 95 (cblock -> statement .)
    FOR             reduce using rule 95 (cblock -> statement .)
    FUNCTION        reduce using rule 95 (cblock -> statement .)
    NUMBER          reduce using rule 95 (cblock -> statement .)
    STRING          reduce using rule 95 (cblock -> statement .)
    UNDEFINED       reduce using rule 95 (cblock -> statement .)
    $end            reduce using rule 95 (cblock -> statement .)
    RIGHTBRACE      reduce using rule 95 (cblock -> statement .)
    RIGHTPAREN      reduce using rule 95 (cblock -> statement .)
    SEMICOLON       reduce using rule 95 (cblock -> statement .)


state 105

    (90) if -> IF expression cblock .
    (91) ifelse -> IF expression cblock . ELSE cblock
    (92) ifelse -> IF expression cblock . ELSE if
    (93) ifelse -> IF expression cblock . ELSE ifelse

  ! shift/reduce conflict for ELSE resolved as shift
    BREAK           reduce using rule 90 (if -> IF expression cblock .)
    CONTINUE        reduce using rule 90 (if -> IF expression cblock .)
    RETURN          reduce using rule 90 (if -> IF expression cblock .)
    CONSOLE         reduce using rule 90 (if -> IF expression cblock .)
    VAR             reduce using rule 90 (if -> IF expression cblock .)
    LEFTPAREN       reduce using rule 90 (if -> IF expression cblock .)
    ID              reduce using rule 90 (if -> IF expression cblock .)
    EVAL            reduce using rule 90 (if -> IF expression cblock .)
    NOT             reduce using rule 90 (if -> IF expression cblock .)
    BINNOT          reduce using rule 90 (if -> IF expression cblock .)
    TYPEOF          reduce using rule 90 (if -> IF expression cblock .)
    IF              reduce using rule 90 (if -> IF expression cblock .)
    WHILE           reduce using rule 90 (if -> IF expression cblock .)
    FOR             reduce using rule 90 (if -> IF expression cblock .)
    FUNCTION        reduce using rule 90 (if -> IF expression cblock .)
    NUMBER          reduce using rule 90 (if -> IF expression cblock .)
    STRING          reduce using rule 90 (if -> IF expression cblock .)
    UNDEFINED       reduce using rule 90 (if -> IF expression cblock .)
    $end            reduce using rule 90 (if -> IF expression cblock .)
    RIGHTBRACE      reduce using rule 90 (if -> IF expression cblock .)
    RIGHTPAREN      reduce using rule 90 (if -> IF expression cblock .)
    SEMICOLON       reduce using rule 90 (if -> IF expression cblock .)
    ELSE            shift and go to state 164

  ! ELSE            [ reduce using rule 90 (if -> IF expression cblock .) ]


state 106

    (94) cblock -> block .

    ELSE            reduce using rule 94 (cblock -> block .)
    BREAK           reduce using rule 94 (cblock -> block .)
    CONTINUE        reduce using rule 94 (cblock -> block .)
    RETURN          reduce using rule 94 (cblock -> block .)
    CONSOLE         reduce using rule 94 (cblock -> block .)
    VAR             reduce using rule 94 (cblock -> block .)
    LEFTPAREN       reduce using rule 94 (cblock -> block .)
    ID              reduce using rule 94 (cblock -> block .)
    EVAL            reduce using rule 94 (cblock -> block .)
    NOT             reduce using rule 94 (cblock -> block .)
    BINNOT          reduce using rule 94 (cblock -> block .)
    TYPEOF          reduce using rule 94 (cblock -> block .)
    IF              reduce using rule 94 (cblock -> block .)
    WHILE           reduce using rule 94 (cblock -> block .)
    FOR             reduce using rule 94 (cblock -> block .)
    FUNCTION        reduce using rule 94 (cblock -> block .)
    NUMBER          reduce using rule 94 (cblock -> block .)
    STRING          reduce using rule 94 (cblock -> block .)
    UNDEFINED       reduce using rule 94 (cblock -> block .)
    $end            reduce using rule 94 (cblock -> block .)
    RIGHTBRACE      reduce using rule 94 (cblock -> block .)
    RIGHTPAREN      reduce using rule 94 (cblock -> block .)
    SEMICOLON       reduce using rule 94 (cblock -> block .)


state 107

    (96) whileloop -> WHILE LEFTPAREN expression . RIGHTPAREN cblock
    (52) expression -> expression . PLUS expression
    (53) expression -> expression . MINUS expression
    (54) expression -> expression . INTO expression
    (55) expression -> expression . DIVIDE expression
    (56) expression -> expression . MOD expression
    (57) expression -> expression . EXPO expression
    (60) expression -> expression . BINAND expression
    (61) expression -> expression . BINOR expression
    (62) expression -> expression . BINXOR expression
    (64) expression -> expression . LT expression
    (65) expression -> expression . GT expression
    (66) expression -> expression . DOUBLEEQ expression
    (67) expression -> expression . NOTEQUAL expression
    (68) expression -> expression . LTE expression
    (69) expression -> expression . GTE expression
    (70) expression -> expression . STREQUAL expression
    (71) expression -> expression . STRNEQUAL expression
    (72) expression -> expression . AND expression
    (73) expression -> expression . OR expression
    (74) expression -> expression . LSHIFT expression
    (75) expression -> expression . RSHIFT expression
    (76) expression -> expression . URSHIFT expression

    RIGHTPAREN      shift and go to state 165
    PLUS            shift and go to state 92
    MINUS           shift and go to state 86
    INTO            shift and go to state 97
    DIVIDE          shift and go to state 96
    MOD             shift and go to state 103
    EXPO            shift and go to state 93
    BINAND          shift and go to state 88
    BINOR           shift and go to state 100
    BINXOR          shift and go to state 94
    LT              shift and go to state 91
    GT              shift and go to state 95
    DOUBLEEQ        shift and go to state 81
    NOTEQUAL        shift and go to state 83
    LTE             shift and go to state 98
    GTE             shift and go to state 87
    STREQUAL        shift and go to state 90
    STRNEQUAL       shift and go to state 84
    AND             shift and go to state 99
    OR              shift and go to state 102
    LSHIFT          shift and go to state 85
    RSHIFT          shift and go to state 82
    URSHIFT         shift and go to state 101


state 108

    (11) statement -> RETURN expression SEMICOLON .

    ELSE            reduce using rule 11 (statement -> RETURN expression SEMICOLON .)
    BREAK           reduce using rule 11 (statement -> RETURN expression SEMICOLON .)
    CONTINUE        reduce using rule 11 (statement -> RETURN expression SEMICOLON .)
    RETURN          reduce using rule 11 (statement -> RETURN expression SEMICOLON .)
    CONSOLE         reduce using rule 11 (statement -> RETURN expression SEMICOLON .)
    VAR             reduce using rule 11 (statement -> RETURN expression SEMICOLON .)
    LEFTPAREN       reduce using rule 11 (statement -> RETURN expression SEMICOLON .)
    ID              reduce using rule 11 (statement -> RETURN expression SEMICOLON .)
    EVAL            reduce using rule 11 (statement -> RETURN expression SEMICOLON .)
    NOT             reduce using rule 11 (statement -> RETURN expression SEMICOLON .)
    BINNOT          reduce using rule 11 (statement -> RETURN expression SEMICOLON .)
    TYPEOF          reduce using rule 11 (statement -> RETURN expression SEMICOLON .)
    IF              reduce using rule 11 (statement -> RETURN expression SEMICOLON .)
    WHILE           reduce using rule 11 (statement -> RETURN expression SEMICOLON .)
    FOR             reduce using rule 11 (statement -> RETURN expression SEMICOLON .)
    FUNCTION        reduce using rule 11 (statement -> RETURN expression SEMICOLON .)
    NUMBER          reduce using rule 11 (statement -> RETURN expression SEMICOLON .)
    STRING          reduce using rule 11 (statement -> RETURN expression SEMICOLON .)
    UNDEFINED       reduce using rule 11 (statement -> RETURN expression SEMICOLON .)
    $end            reduce using rule 11 (statement -> RETURN expression SEMICOLON .)
    RIGHTBRACE      reduce using rule 11 (statement -> RETURN expression SEMICOLON .)
    RIGHTPAREN      reduce using rule 11 (statement -> RETURN expression SEMICOLON .)
    SEMICOLON       reduce using rule 11 (statement -> RETURN expression SEMICOLON .)


state 109

    (98) initialization -> assignment . SEMICOLON initialization
    (100) initialization -> assignment .

  ! shift/reduce conflict for SEMICOLON resolved as shift
    SEMICOLON       shift and go to state 166

  ! SEMICOLON       [ reduce using rule 100 (initialization -> assignment .) ]


state 110

    (97) forloop -> FOR LEFTPAREN initialization . SEMICOLON expression SEMICOLON increment RIGHTPAREN cblock

    SEMICOLON       shift and go to state 167


state 111

    (21) assignment -> LEFTPAREN . assignment RIGHTPAREN
    (43) reassignment -> LEFTPAREN . reassignment RIGHTPAREN
    (20) assignment -> . VAR assignlist
    (21) assignment -> . LEFTPAREN assignment RIGHTPAREN
    (28) reassignment -> . ID EQ expression
    (29) reassignment -> . ID PLUSEQ expression
    (30) reassignment -> . ID MINUSEQ expression
    (31) reassignment -> . ID INTOEQ expression
    (32) reassignment -> . ID DIVEQ expression
    (33) reassignment -> . ID INCR
    (34) reassignment -> . ID DECR
    (35) reassignment -> . ID LSHIFTEQ expression
    (36) reassignment -> . ID RSHIFTEQ expression
    (37) reassignment -> . ID URSHIFTEQ expression
    (38) reassignment -> . ID ANDEQ expression
    (39) reassignment -> . ID OREQ expression
    (40) reassignment -> . ID XOREQ expression
    (41) reassignment -> . ID MODEQ expression
    (42) reassignment -> . arraydecl
    (43) reassignment -> . LEFTPAREN reassignment RIGHTPAREN
    (44) arraydecl -> . ID EQ LEFTBRACKET arrayList RIGHTBRACKET

    VAR             shift and go to state 49
    LEFTPAREN       shift and go to state 111
    ID              shift and go to state 112

    assignment                     shift and go to state 48
    reassignment                   shift and go to state 51
    arraydecl                      shift and go to state 30

state 112

    (28) reassignment -> ID . EQ expression
    (29) reassignment -> ID . PLUSEQ expression
    (30) reassignment -> ID . MINUSEQ expression
    (31) reassignment -> ID . INTOEQ expression
    (32) reassignment -> ID . DIVEQ expression
    (33) reassignment -> ID . INCR
    (34) reassignment -> ID . DECR
    (35) reassignment -> ID . LSHIFTEQ expression
    (36) reassignment -> ID . RSHIFTEQ expression
    (37) reassignment -> ID . URSHIFTEQ expression
    (38) reassignment -> ID . ANDEQ expression
    (39) reassignment -> ID . OREQ expression
    (40) reassignment -> ID . XOREQ expression
    (41) reassignment -> ID . MODEQ expression
    (44) arraydecl -> ID . EQ LEFTBRACKET arrayList RIGHTBRACKET

    EQ              shift and go to state 70
    PLUSEQ          shift and go to state 72
    MINUSEQ         shift and go to state 63
    INTOEQ          shift and go to state 58
    DIVEQ           shift and go to state 66
    INCR            shift and go to state 60
    DECR            shift and go to state 59
    LSHIFTEQ        shift and go to state 67
    RSHIFTEQ        shift and go to state 71
    URSHIFTEQ       shift and go to state 62
    ANDEQ           shift and go to state 69
    OREQ            shift and go to state 65
    XOREQ           shift and go to state 61
    MODEQ           shift and go to state 57


state 113

    (99) initialization -> reassignment . SEMICOLON initialization
    (101) initialization -> reassignment .

  ! shift/reduce conflict for SEMICOLON resolved as shift
    SEMICOLON       shift and go to state 168

  ! SEMICOLON       [ reduce using rule 101 (initialization -> reassignment .) ]


state 114

    (13) statement -> CONSOLE DOT LOG . LEFTPAREN expression RIGHTPAREN SEMICOLON
    (111) statement -> CONSOLE DOT LOG . LEFTPAREN expression RIGHTPAREN

    LEFTPAREN       shift and go to state 169


state 115

    (21) assignment -> LEFTPAREN assignment RIGHTPAREN .

    SEMICOLON       reduce using rule 21 (assignment -> LEFTPAREN assignment RIGHTPAREN .)
    ELSE            reduce using rule 21 (assignment -> LEFTPAREN assignment RIGHTPAREN .)
    BREAK           reduce using rule 21 (assignment -> LEFTPAREN assignment RIGHTPAREN .)
    CONTINUE        reduce using rule 21 (assignment -> LEFTPAREN assignment RIGHTPAREN .)
    RETURN          reduce using rule 21 (assignment -> LEFTPAREN assignment RIGHTPAREN .)
    CONSOLE         reduce using rule 21 (assignment -> LEFTPAREN assignment RIGHTPAREN .)
    VAR             reduce using rule 21 (assignment -> LEFTPAREN assignment RIGHTPAREN .)
    LEFTPAREN       reduce using rule 21 (assignment -> LEFTPAREN assignment RIGHTPAREN .)
    ID              reduce using rule 21 (assignment -> LEFTPAREN assignment RIGHTPAREN .)
    EVAL            reduce using rule 21 (assignment -> LEFTPAREN assignment RIGHTPAREN .)
    NOT             reduce using rule 21 (assignment -> LEFTPAREN assignment RIGHTPAREN .)
    BINNOT          reduce using rule 21 (assignment -> LEFTPAREN assignment RIGHTPAREN .)
    TYPEOF          reduce using rule 21 (assignment -> LEFTPAREN assignment RIGHTPAREN .)
    IF              reduce using rule 21 (assignment -> LEFTPAREN assignment RIGHTPAREN .)
    WHILE           reduce using rule 21 (assignment -> LEFTPAREN assignment RIGHTPAREN .)
    FOR             reduce using rule 21 (assignment -> LEFTPAREN assignment RIGHTPAREN .)
    FUNCTION        reduce using rule 21 (assignment -> LEFTPAREN assignment RIGHTPAREN .)
    NUMBER          reduce using rule 21 (assignment -> LEFTPAREN assignment RIGHTPAREN .)
    STRING          reduce using rule 21 (assignment -> LEFTPAREN assignment RIGHTPAREN .)
    UNDEFINED       reduce using rule 21 (assignment -> LEFTPAREN assignment RIGHTPAREN .)
    $end            reduce using rule 21 (assignment -> LEFTPAREN assignment RIGHTPAREN .)
    RIGHTBRACE      reduce using rule 21 (assignment -> LEFTPAREN assignment RIGHTPAREN .)
    RIGHTPAREN      reduce using rule 21 (assignment -> LEFTPAREN assignment RIGHTPAREN .)


state 116

    (22) assignlist -> ID . EQ expression COMMA assignlist
    (23) assignlist -> ID . COMMA assignlist
    (25) assignlist -> ID . EQ expression
    (26) assignlist -> ID .
    (44) arraydecl -> ID . EQ LEFTBRACKET arrayList RIGHTBRACKET

    EQ              shift and go to state 170
    COMMA           shift and go to state 121
    RIGHTPAREN      reduce using rule 26 (assignlist -> ID .)
    SEMICOLON       reduce using rule 26 (assignlist -> ID .)
    BREAK           reduce using rule 26 (assignlist -> ID .)
    CONTINUE        reduce using rule 26 (assignlist -> ID .)
    RETURN          reduce using rule 26 (assignlist -> ID .)
    CONSOLE         reduce using rule 26 (assignlist -> ID .)
    VAR             reduce using rule 26 (assignlist -> ID .)
    LEFTPAREN       reduce using rule 26 (assignlist -> ID .)
    ID              reduce using rule 26 (assignlist -> ID .)
    EVAL            reduce using rule 26 (assignlist -> ID .)
    NOT             reduce using rule 26 (assignlist -> ID .)
    BINNOT          reduce using rule 26 (assignlist -> ID .)
    TYPEOF          reduce using rule 26 (assignlist -> ID .)
    IF              reduce using rule 26 (assignlist -> ID .)
    WHILE           reduce using rule 26 (assignlist -> ID .)
    FOR             reduce using rule 26 (assignlist -> ID .)
    FUNCTION        reduce using rule 26 (assignlist -> ID .)
    NUMBER          reduce using rule 26 (assignlist -> ID .)
    STRING          reduce using rule 26 (assignlist -> ID .)
    UNDEFINED       reduce using rule 26 (assignlist -> ID .)
    $end            reduce using rule 26 (assignlist -> ID .)
    RIGHTBRACE      reduce using rule 26 (assignlist -> ID .)
    ELSE            reduce using rule 26 (assignlist -> ID .)


state 117

    (43) reassignment -> LEFTPAREN reassignment RIGHTPAREN .

    SEMICOLON       reduce using rule 43 (reassignment -> LEFTPAREN reassignment RIGHTPAREN .)
    BREAK           reduce using rule 43 (reassignment -> LEFTPAREN reassignment RIGHTPAREN .)
    CONTINUE        reduce using rule 43 (reassignment -> LEFTPAREN reassignment RIGHTPAREN .)
    RETURN          reduce using rule 43 (reassignment -> LEFTPAREN reassignment RIGHTPAREN .)
    CONSOLE         reduce using rule 43 (reassignment -> LEFTPAREN reassignment RIGHTPAREN .)
    VAR             reduce using rule 43 (reassignment -> LEFTPAREN reassignment RIGHTPAREN .)
    LEFTPAREN       reduce using rule 43 (reassignment -> LEFTPAREN reassignment RIGHTPAREN .)
    ID              reduce using rule 43 (reassignment -> LEFTPAREN reassignment RIGHTPAREN .)
    EVAL            reduce using rule 43 (reassignment -> LEFTPAREN reassignment RIGHTPAREN .)
    NOT             reduce using rule 43 (reassignment -> LEFTPAREN reassignment RIGHTPAREN .)
    BINNOT          reduce using rule 43 (reassignment -> LEFTPAREN reassignment RIGHTPAREN .)
    TYPEOF          reduce using rule 43 (reassignment -> LEFTPAREN reassignment RIGHTPAREN .)
    IF              reduce using rule 43 (reassignment -> LEFTPAREN reassignment RIGHTPAREN .)
    WHILE           reduce using rule 43 (reassignment -> LEFTPAREN reassignment RIGHTPAREN .)
    FOR             reduce using rule 43 (reassignment -> LEFTPAREN reassignment RIGHTPAREN .)
    FUNCTION        reduce using rule 43 (reassignment -> LEFTPAREN reassignment RIGHTPAREN .)
    NUMBER          reduce using rule 43 (reassignment -> LEFTPAREN reassignment RIGHTPAREN .)
    STRING          reduce using rule 43 (reassignment -> LEFTPAREN reassignment RIGHTPAREN .)
    UNDEFINED       reduce using rule 43 (reassignment -> LEFTPAREN reassignment RIGHTPAREN .)
    $end            reduce using rule 43 (reassignment -> LEFTPAREN reassignment RIGHTPAREN .)
    RIGHTBRACE      reduce using rule 43 (reassignment -> LEFTPAREN reassignment RIGHTPAREN .)
    RIGHTPAREN      reduce using rule 43 (reassignment -> LEFTPAREN reassignment RIGHTPAREN .)
    ELSE            reduce using rule 43 (reassignment -> LEFTPAREN reassignment RIGHTPAREN .)


state 118

    (58) expression -> LEFTPAREN expression RIGHTPAREN .

    PLUS            reduce using rule 58 (expression -> LEFTPAREN expression RIGHTPAREN .)
    MINUS           reduce using rule 58 (expression -> LEFTPAREN expression RIGHTPAREN .)
    INTO            reduce using rule 58 (expression -> LEFTPAREN expression RIGHTPAREN .)
    DIVIDE          reduce using rule 58 (expression -> LEFTPAREN expression RIGHTPAREN .)
    MOD             reduce using rule 58 (expression -> LEFTPAREN expression RIGHTPAREN .)
    EXPO            reduce using rule 58 (expression -> LEFTPAREN expression RIGHTPAREN .)
    BINAND          reduce using rule 58 (expression -> LEFTPAREN expression RIGHTPAREN .)
    BINOR           reduce using rule 58 (expression -> LEFTPAREN expression RIGHTPAREN .)
    BINXOR          reduce using rule 58 (expression -> LEFTPAREN expression RIGHTPAREN .)
    LT              reduce using rule 58 (expression -> LEFTPAREN expression RIGHTPAREN .)
    GT              reduce using rule 58 (expression -> LEFTPAREN expression RIGHTPAREN .)
    DOUBLEEQ        reduce using rule 58 (expression -> LEFTPAREN expression RIGHTPAREN .)
    NOTEQUAL        reduce using rule 58 (expression -> LEFTPAREN expression RIGHTPAREN .)
    LTE             reduce using rule 58 (expression -> LEFTPAREN expression RIGHTPAREN .)
    GTE             reduce using rule 58 (expression -> LEFTPAREN expression RIGHTPAREN .)
    STREQUAL        reduce using rule 58 (expression -> LEFTPAREN expression RIGHTPAREN .)
    STRNEQUAL       reduce using rule 58 (expression -> LEFTPAREN expression RIGHTPAREN .)
    AND             reduce using rule 58 (expression -> LEFTPAREN expression RIGHTPAREN .)
    OR              reduce using rule 58 (expression -> LEFTPAREN expression RIGHTPAREN .)
    LSHIFT          reduce using rule 58 (expression -> LEFTPAREN expression RIGHTPAREN .)
    RSHIFT          reduce using rule 58 (expression -> LEFTPAREN expression RIGHTPAREN .)
    URSHIFT         reduce using rule 58 (expression -> LEFTPAREN expression RIGHTPAREN .)
    SEMICOLON       reduce using rule 58 (expression -> LEFTPAREN expression RIGHTPAREN .)
    BREAK           reduce using rule 58 (expression -> LEFTPAREN expression RIGHTPAREN .)
    CONTINUE        reduce using rule 58 (expression -> LEFTPAREN expression RIGHTPAREN .)
    RETURN          reduce using rule 58 (expression -> LEFTPAREN expression RIGHTPAREN .)
    CONSOLE         reduce using rule 58 (expression -> LEFTPAREN expression RIGHTPAREN .)
    VAR             reduce using rule 58 (expression -> LEFTPAREN expression RIGHTPAREN .)
    LEFTPAREN       reduce using rule 58 (expression -> LEFTPAREN expression RIGHTPAREN .)
    ID              reduce using rule 58 (expression -> LEFTPAREN expression RIGHTPAREN .)
    EVAL            reduce using rule 58 (expression -> LEFTPAREN expression RIGHTPAREN .)
    NOT             reduce using rule 58 (expression -> LEFTPAREN expression RIGHTPAREN .)
    BINNOT          reduce using rule 58 (expression -> LEFTPAREN expression RIGHTPAREN .)
    TYPEOF          reduce using rule 58 (expression -> LEFTPAREN expression RIGHTPAREN .)
    IF              reduce using rule 58 (expression -> LEFTPAREN expression RIGHTPAREN .)
    WHILE           reduce using rule 58 (expression -> LEFTPAREN expression RIGHTPAREN .)
    FOR             reduce using rule 58 (expression -> LEFTPAREN expression RIGHTPAREN .)
    FUNCTION        reduce using rule 58 (expression -> LEFTPAREN expression RIGHTPAREN .)
    NUMBER          reduce using rule 58 (expression -> LEFTPAREN expression RIGHTPAREN .)
    STRING          reduce using rule 58 (expression -> LEFTPAREN expression RIGHTPAREN .)
    UNDEFINED       reduce using rule 58 (expression -> LEFTPAREN expression RIGHTPAREN .)
    $end            reduce using rule 58 (expression -> LEFTPAREN expression RIGHTPAREN .)
    RIGHTBRACE      reduce using rule 58 (expression -> LEFTPAREN expression RIGHTPAREN .)
    RIGHTPAREN      reduce using rule 58 (expression -> LEFTPAREN expression RIGHTPAREN .)
    ELSE            reduce using rule 58 (expression -> LEFTPAREN expression RIGHTPAREN .)
    LEFTBRACE       reduce using rule 58 (expression -> LEFTPAREN expression RIGHTPAREN .)
    RIGHTBRACKET    reduce using rule 58 (expression -> LEFTPAREN expression RIGHTPAREN .)
    COMMA           reduce using rule 58 (expression -> LEFTPAREN expression RIGHTPAREN .)


state 119

    (50) expression -> EVAL LEFTPAREN statements . RIGHTPAREN

    RIGHTPAREN      shift and go to state 171


state 120

    (51) expression -> EVAL LEFTPAREN block . RIGHTPAREN

    RIGHTPAREN      shift and go to state 172


state 121

    (23) assignlist -> ID COMMA . assignlist
    (22) assignlist -> . ID EQ expression COMMA assignlist
    (23) assignlist -> . ID COMMA assignlist
    (24) assignlist -> . arraydecl COMMA assignlist
    (25) assignlist -> . ID EQ expression
    (26) assignlist -> . ID
    (27) assignlist -> . arraydecl
    (44) arraydecl -> . ID EQ LEFTBRACKET arrayList RIGHTBRACKET

    ID              shift and go to state 116

    assignlist                     shift and go to state 173
    arraydecl                      shift and go to state 56

state 122

    (105) funcdecl -> VAR ID EQ . FUNCTION LEFTPAREN argList RIGHTPAREN cblock SEMICOLON
    (22) assignlist -> ID EQ . expression COMMA assignlist
    (25) assignlist -> ID EQ . expression
    (44) arraydecl -> ID EQ . LEFTBRACKET arrayList RIGHTBRACKET
    (50) expression -> . EVAL LEFTPAREN statements RIGHTPAREN
    (51) expression -> . EVAL LEFTPAREN block RIGHTPAREN
    (52) expression -> . expression PLUS expression
    (53) expression -> . expression MINUS expression
    (54) expression -> . expression INTO expression
    (55) expression -> . expression DIVIDE expression
    (56) expression -> . expression MOD expression
    (57) expression -> . expression EXPO expression
    (58) expression -> . LEFTPAREN expression RIGHTPAREN
    (59) expression -> . NOT expression
    (60) expression -> . expression BINAND expression
    (61) expression -> . expression BINOR expression
    (62) expression -> . expression BINXOR expression
    (63) expression -> . BINNOT expression
    (64) expression -> . expression LT expression
    (65) expression -> . expression GT expression
    (66) expression -> . expression DOUBLEEQ expression
    (67) expression -> . expression NOTEQUAL expression
    (68) expression -> . expression LTE expression
    (69) expression -> . expression GTE expression
    (70) expression -> . expression STREQUAL expression
    (71) expression -> . expression STRNEQUAL expression
    (72) expression -> . expression AND expression
    (73) expression -> . expression OR expression
    (74) expression -> . expression LSHIFT expression
    (75) expression -> . expression RSHIFT expression
    (76) expression -> . expression URSHIFT expression
    (77) expression -> . basicTypes
    (78) expression -> . functioncall
    (79) expression -> . arrayCall
    (80) expression -> . TYPEOF expression
    (82) basicTypes -> . NUMBER
    (83) basicTypes -> . STRING
    (84) basicTypes -> . ID
    (85) basicTypes -> . UNDEFINED
    (86) functioncall -> . ID LEFTPAREN argList RIGHTPAREN
    (81) arrayCall -> . ID LEFTBRACKET expression RIGHTBRACKET

    FUNCTION        shift and go to state 174
    LEFTBRACKET     shift and go to state 136
    EVAL            shift and go to state 20
    LEFTPAREN       shift and go to state 36
    NOT             shift and go to state 32
    BINNOT          shift and go to state 25
    TYPEOF          shift and go to state 15
    NUMBER          shift and go to state 2
    STRING          shift and go to state 14
    ID              shift and go to state 37
    UNDEFINED       shift and go to state 21

    arrayCall                      shift and go to state 10
    functioncall                   shift and go to state 38
    expression                     shift and go to state 175
    basicTypes                     shift and go to state 33

state 123

    (24) assignlist -> arraydecl COMMA . assignlist
    (22) assignlist -> . ID EQ expression COMMA assignlist
    (23) assignlist -> . ID COMMA assignlist
    (24) assignlist -> . arraydecl COMMA assignlist
    (25) assignlist -> . ID EQ expression
    (26) assignlist -> . ID
    (27) assignlist -> . arraydecl
    (44) arraydecl -> . ID EQ LEFTBRACKET arrayList RIGHTBRACKET

    ID              shift and go to state 116

    assignlist                     shift and go to state 176
    arraydecl                      shift and go to state 56

state 124

    (41) reassignment -> ID MODEQ expression .
    (52) expression -> expression . PLUS expression
    (53) expression -> expression . MINUS expression
    (54) expression -> expression . INTO expression
    (55) expression -> expression . DIVIDE expression
    (56) expression -> expression . MOD expression
    (57) expression -> expression . EXPO expression
    (60) expression -> expression . BINAND expression
    (61) expression -> expression . BINOR expression
    (62) expression -> expression . BINXOR expression
    (64) expression -> expression . LT expression
    (65) expression -> expression . GT expression
    (66) expression -> expression . DOUBLEEQ expression
    (67) expression -> expression . NOTEQUAL expression
    (68) expression -> expression . LTE expression
    (69) expression -> expression . GTE expression
    (70) expression -> expression . STREQUAL expression
    (71) expression -> expression . STRNEQUAL expression
    (72) expression -> expression . AND expression
    (73) expression -> expression . OR expression
    (74) expression -> expression . LSHIFT expression
    (75) expression -> expression . RSHIFT expression
    (76) expression -> expression . URSHIFT expression

    SEMICOLON       reduce using rule 41 (reassignment -> ID MODEQ expression .)
    BREAK           reduce using rule 41 (reassignment -> ID MODEQ expression .)
    CONTINUE        reduce using rule 41 (reassignment -> ID MODEQ expression .)
    RETURN          reduce using rule 41 (reassignment -> ID MODEQ expression .)
    CONSOLE         reduce using rule 41 (reassignment -> ID MODEQ expression .)
    VAR             reduce using rule 41 (reassignment -> ID MODEQ expression .)
    LEFTPAREN       reduce using rule 41 (reassignment -> ID MODEQ expression .)
    ID              reduce using rule 41 (reassignment -> ID MODEQ expression .)
    EVAL            reduce using rule 41 (reassignment -> ID MODEQ expression .)
    NOT             reduce using rule 41 (reassignment -> ID MODEQ expression .)
    BINNOT          reduce using rule 41 (reassignment -> ID MODEQ expression .)
    TYPEOF          reduce using rule 41 (reassignment -> ID MODEQ expression .)
    IF              reduce using rule 41 (reassignment -> ID MODEQ expression .)
    WHILE           reduce using rule 41 (reassignment -> ID MODEQ expression .)
    FOR             reduce using rule 41 (reassignment -> ID MODEQ expression .)
    FUNCTION        reduce using rule 41 (reassignment -> ID MODEQ expression .)
    NUMBER          reduce using rule 41 (reassignment -> ID MODEQ expression .)
    STRING          reduce using rule 41 (reassignment -> ID MODEQ expression .)
    UNDEFINED       reduce using rule 41 (reassignment -> ID MODEQ expression .)
    $end            reduce using rule 41 (reassignment -> ID MODEQ expression .)
    RIGHTBRACE      reduce using rule 41 (reassignment -> ID MODEQ expression .)
    RIGHTPAREN      reduce using rule 41 (reassignment -> ID MODEQ expression .)
    ELSE            reduce using rule 41 (reassignment -> ID MODEQ expression .)
    PLUS            shift and go to state 92
    MINUS           shift and go to state 86
    INTO            shift and go to state 97
    DIVIDE          shift and go to state 96
    MOD             shift and go to state 103
    EXPO            shift and go to state 93
    BINAND          shift and go to state 88
    BINOR           shift and go to state 100
    BINXOR          shift and go to state 94
    LT              shift and go to state 91
    GT              shift and go to state 95
    DOUBLEEQ        shift and go to state 81
    NOTEQUAL        shift and go to state 83
    LTE             shift and go to state 98
    GTE             shift and go to state 87
    STREQUAL        shift and go to state 90
    STRNEQUAL       shift and go to state 84
    AND             shift and go to state 99
    OR              shift and go to state 102
    LSHIFT          shift and go to state 85
    RSHIFT          shift and go to state 82
    URSHIFT         shift and go to state 101


state 125

    (31) reassignment -> ID INTOEQ expression .
    (52) expression -> expression . PLUS expression
    (53) expression -> expression . MINUS expression
    (54) expression -> expression . INTO expression
    (55) expression -> expression . DIVIDE expression
    (56) expression -> expression . MOD expression
    (57) expression -> expression . EXPO expression
    (60) expression -> expression . BINAND expression
    (61) expression -> expression . BINOR expression
    (62) expression -> expression . BINXOR expression
    (64) expression -> expression . LT expression
    (65) expression -> expression . GT expression
    (66) expression -> expression . DOUBLEEQ expression
    (67) expression -> expression . NOTEQUAL expression
    (68) expression -> expression . LTE expression
    (69) expression -> expression . GTE expression
    (70) expression -> expression . STREQUAL expression
    (71) expression -> expression . STRNEQUAL expression
    (72) expression -> expression . AND expression
    (73) expression -> expression . OR expression
    (74) expression -> expression . LSHIFT expression
    (75) expression -> expression . RSHIFT expression
    (76) expression -> expression . URSHIFT expression

    SEMICOLON       reduce using rule 31 (reassignment -> ID INTOEQ expression .)
    BREAK           reduce using rule 31 (reassignment -> ID INTOEQ expression .)
    CONTINUE        reduce using rule 31 (reassignment -> ID INTOEQ expression .)
    RETURN          reduce using rule 31 (reassignment -> ID INTOEQ expression .)
    CONSOLE         reduce using rule 31 (reassignment -> ID INTOEQ expression .)
    VAR             reduce using rule 31 (reassignment -> ID INTOEQ expression .)
    LEFTPAREN       reduce using rule 31 (reassignment -> ID INTOEQ expression .)
    ID              reduce using rule 31 (reassignment -> ID INTOEQ expression .)
    EVAL            reduce using rule 31 (reassignment -> ID INTOEQ expression .)
    NOT             reduce using rule 31 (reassignment -> ID INTOEQ expression .)
    BINNOT          reduce using rule 31 (reassignment -> ID INTOEQ expression .)
    TYPEOF          reduce using rule 31 (reassignment -> ID INTOEQ expression .)
    IF              reduce using rule 31 (reassignment -> ID INTOEQ expression .)
    WHILE           reduce using rule 31 (reassignment -> ID INTOEQ expression .)
    FOR             reduce using rule 31 (reassignment -> ID INTOEQ expression .)
    FUNCTION        reduce using rule 31 (reassignment -> ID INTOEQ expression .)
    NUMBER          reduce using rule 31 (reassignment -> ID INTOEQ expression .)
    STRING          reduce using rule 31 (reassignment -> ID INTOEQ expression .)
    UNDEFINED       reduce using rule 31 (reassignment -> ID INTOEQ expression .)
    $end            reduce using rule 31 (reassignment -> ID INTOEQ expression .)
    RIGHTBRACE      reduce using rule 31 (reassignment -> ID INTOEQ expression .)
    RIGHTPAREN      reduce using rule 31 (reassignment -> ID INTOEQ expression .)
    ELSE            reduce using rule 31 (reassignment -> ID INTOEQ expression .)
    PLUS            shift and go to state 92
    MINUS           shift and go to state 86
    INTO            shift and go to state 97
    DIVIDE          shift and go to state 96
    MOD             shift and go to state 103
    EXPO            shift and go to state 93
    BINAND          shift and go to state 88
    BINOR           shift and go to state 100
    BINXOR          shift and go to state 94
    LT              shift and go to state 91
    GT              shift and go to state 95
    DOUBLEEQ        shift and go to state 81
    NOTEQUAL        shift and go to state 83
    LTE             shift and go to state 98
    GTE             shift and go to state 87
    STREQUAL        shift and go to state 90
    STRNEQUAL       shift and go to state 84
    AND             shift and go to state 99
    OR              shift and go to state 102
    LSHIFT          shift and go to state 85
    RSHIFT          shift and go to state 82
    URSHIFT         shift and go to state 101


state 126

    (40) reassignment -> ID XOREQ expression .
    (52) expression -> expression . PLUS expression
    (53) expression -> expression . MINUS expression
    (54) expression -> expression . INTO expression
    (55) expression -> expression . DIVIDE expression
    (56) expression -> expression . MOD expression
    (57) expression -> expression . EXPO expression
    (60) expression -> expression . BINAND expression
    (61) expression -> expression . BINOR expression
    (62) expression -> expression . BINXOR expression
    (64) expression -> expression . LT expression
    (65) expression -> expression . GT expression
    (66) expression -> expression . DOUBLEEQ expression
    (67) expression -> expression . NOTEQUAL expression
    (68) expression -> expression . LTE expression
    (69) expression -> expression . GTE expression
    (70) expression -> expression . STREQUAL expression
    (71) expression -> expression . STRNEQUAL expression
    (72) expression -> expression . AND expression
    (73) expression -> expression . OR expression
    (74) expression -> expression . LSHIFT expression
    (75) expression -> expression . RSHIFT expression
    (76) expression -> expression . URSHIFT expression

    SEMICOLON       reduce using rule 40 (reassignment -> ID XOREQ expression .)
    BREAK           reduce using rule 40 (reassignment -> ID XOREQ expression .)
    CONTINUE        reduce using rule 40 (reassignment -> ID XOREQ expression .)
    RETURN          reduce using rule 40 (reassignment -> ID XOREQ expression .)
    CONSOLE         reduce using rule 40 (reassignment -> ID XOREQ expression .)
    VAR             reduce using rule 40 (reassignment -> ID XOREQ expression .)
    LEFTPAREN       reduce using rule 40 (reassignment -> ID XOREQ expression .)
    ID              reduce using rule 40 (reassignment -> ID XOREQ expression .)
    EVAL            reduce using rule 40 (reassignment -> ID XOREQ expression .)
    NOT             reduce using rule 40 (reassignment -> ID XOREQ expression .)
    BINNOT          reduce using rule 40 (reassignment -> ID XOREQ expression .)
    TYPEOF          reduce using rule 40 (reassignment -> ID XOREQ expression .)
    IF              reduce using rule 40 (reassignment -> ID XOREQ expression .)
    WHILE           reduce using rule 40 (reassignment -> ID XOREQ expression .)
    FOR             reduce using rule 40 (reassignment -> ID XOREQ expression .)
    FUNCTION        reduce using rule 40 (reassignment -> ID XOREQ expression .)
    NUMBER          reduce using rule 40 (reassignment -> ID XOREQ expression .)
    STRING          reduce using rule 40 (reassignment -> ID XOREQ expression .)
    UNDEFINED       reduce using rule 40 (reassignment -> ID XOREQ expression .)
    $end            reduce using rule 40 (reassignment -> ID XOREQ expression .)
    RIGHTBRACE      reduce using rule 40 (reassignment -> ID XOREQ expression .)
    RIGHTPAREN      reduce using rule 40 (reassignment -> ID XOREQ expression .)
    ELSE            reduce using rule 40 (reassignment -> ID XOREQ expression .)
    PLUS            shift and go to state 92
    MINUS           shift and go to state 86
    INTO            shift and go to state 97
    DIVIDE          shift and go to state 96
    MOD             shift and go to state 103
    EXPO            shift and go to state 93
    BINAND          shift and go to state 88
    BINOR           shift and go to state 100
    BINXOR          shift and go to state 94
    LT              shift and go to state 91
    GT              shift and go to state 95
    DOUBLEEQ        shift and go to state 81
    NOTEQUAL        shift and go to state 83
    LTE             shift and go to state 98
    GTE             shift and go to state 87
    STREQUAL        shift and go to state 90
    STRNEQUAL       shift and go to state 84
    AND             shift and go to state 99
    OR              shift and go to state 102
    LSHIFT          shift and go to state 85
    RSHIFT          shift and go to state 82
    URSHIFT         shift and go to state 101


state 127

    (37) reassignment -> ID URSHIFTEQ expression .
    (52) expression -> expression . PLUS expression
    (53) expression -> expression . MINUS expression
    (54) expression -> expression . INTO expression
    (55) expression -> expression . DIVIDE expression
    (56) expression -> expression . MOD expression
    (57) expression -> expression . EXPO expression
    (60) expression -> expression . BINAND expression
    (61) expression -> expression . BINOR expression
    (62) expression -> expression . BINXOR expression
    (64) expression -> expression . LT expression
    (65) expression -> expression . GT expression
    (66) expression -> expression . DOUBLEEQ expression
    (67) expression -> expression . NOTEQUAL expression
    (68) expression -> expression . LTE expression
    (69) expression -> expression . GTE expression
    (70) expression -> expression . STREQUAL expression
    (71) expression -> expression . STRNEQUAL expression
    (72) expression -> expression . AND expression
    (73) expression -> expression . OR expression
    (74) expression -> expression . LSHIFT expression
    (75) expression -> expression . RSHIFT expression
    (76) expression -> expression . URSHIFT expression

    SEMICOLON       reduce using rule 37 (reassignment -> ID URSHIFTEQ expression .)
    BREAK           reduce using rule 37 (reassignment -> ID URSHIFTEQ expression .)
    CONTINUE        reduce using rule 37 (reassignment -> ID URSHIFTEQ expression .)
    RETURN          reduce using rule 37 (reassignment -> ID URSHIFTEQ expression .)
    CONSOLE         reduce using rule 37 (reassignment -> ID URSHIFTEQ expression .)
    VAR             reduce using rule 37 (reassignment -> ID URSHIFTEQ expression .)
    LEFTPAREN       reduce using rule 37 (reassignment -> ID URSHIFTEQ expression .)
    ID              reduce using rule 37 (reassignment -> ID URSHIFTEQ expression .)
    EVAL            reduce using rule 37 (reassignment -> ID URSHIFTEQ expression .)
    NOT             reduce using rule 37 (reassignment -> ID URSHIFTEQ expression .)
    BINNOT          reduce using rule 37 (reassignment -> ID URSHIFTEQ expression .)
    TYPEOF          reduce using rule 37 (reassignment -> ID URSHIFTEQ expression .)
    IF              reduce using rule 37 (reassignment -> ID URSHIFTEQ expression .)
    WHILE           reduce using rule 37 (reassignment -> ID URSHIFTEQ expression .)
    FOR             reduce using rule 37 (reassignment -> ID URSHIFTEQ expression .)
    FUNCTION        reduce using rule 37 (reassignment -> ID URSHIFTEQ expression .)
    NUMBER          reduce using rule 37 (reassignment -> ID URSHIFTEQ expression .)
    STRING          reduce using rule 37 (reassignment -> ID URSHIFTEQ expression .)
    UNDEFINED       reduce using rule 37 (reassignment -> ID URSHIFTEQ expression .)
    $end            reduce using rule 37 (reassignment -> ID URSHIFTEQ expression .)
    RIGHTBRACE      reduce using rule 37 (reassignment -> ID URSHIFTEQ expression .)
    RIGHTPAREN      reduce using rule 37 (reassignment -> ID URSHIFTEQ expression .)
    ELSE            reduce using rule 37 (reassignment -> ID URSHIFTEQ expression .)
    PLUS            shift and go to state 92
    MINUS           shift and go to state 86
    INTO            shift and go to state 97
    DIVIDE          shift and go to state 96
    MOD             shift and go to state 103
    EXPO            shift and go to state 93
    BINAND          shift and go to state 88
    BINOR           shift and go to state 100
    BINXOR          shift and go to state 94
    LT              shift and go to state 91
    GT              shift and go to state 95
    DOUBLEEQ        shift and go to state 81
    NOTEQUAL        shift and go to state 83
    LTE             shift and go to state 98
    GTE             shift and go to state 87
    STREQUAL        shift and go to state 90
    STRNEQUAL       shift and go to state 84
    AND             shift and go to state 99
    OR              shift and go to state 102
    LSHIFT          shift and go to state 85
    RSHIFT          shift and go to state 82
    URSHIFT         shift and go to state 101


state 128

    (30) reassignment -> ID MINUSEQ expression .
    (52) expression -> expression . PLUS expression
    (53) expression -> expression . MINUS expression
    (54) expression -> expression . INTO expression
    (55) expression -> expression . DIVIDE expression
    (56) expression -> expression . MOD expression
    (57) expression -> expression . EXPO expression
    (60) expression -> expression . BINAND expression
    (61) expression -> expression . BINOR expression
    (62) expression -> expression . BINXOR expression
    (64) expression -> expression . LT expression
    (65) expression -> expression . GT expression
    (66) expression -> expression . DOUBLEEQ expression
    (67) expression -> expression . NOTEQUAL expression
    (68) expression -> expression . LTE expression
    (69) expression -> expression . GTE expression
    (70) expression -> expression . STREQUAL expression
    (71) expression -> expression . STRNEQUAL expression
    (72) expression -> expression . AND expression
    (73) expression -> expression . OR expression
    (74) expression -> expression . LSHIFT expression
    (75) expression -> expression . RSHIFT expression
    (76) expression -> expression . URSHIFT expression

    SEMICOLON       reduce using rule 30 (reassignment -> ID MINUSEQ expression .)
    BREAK           reduce using rule 30 (reassignment -> ID MINUSEQ expression .)
    CONTINUE        reduce using rule 30 (reassignment -> ID MINUSEQ expression .)
    RETURN          reduce using rule 30 (reassignment -> ID MINUSEQ expression .)
    CONSOLE         reduce using rule 30 (reassignment -> ID MINUSEQ expression .)
    VAR             reduce using rule 30 (reassignment -> ID MINUSEQ expression .)
    LEFTPAREN       reduce using rule 30 (reassignment -> ID MINUSEQ expression .)
    ID              reduce using rule 30 (reassignment -> ID MINUSEQ expression .)
    EVAL            reduce using rule 30 (reassignment -> ID MINUSEQ expression .)
    NOT             reduce using rule 30 (reassignment -> ID MINUSEQ expression .)
    BINNOT          reduce using rule 30 (reassignment -> ID MINUSEQ expression .)
    TYPEOF          reduce using rule 30 (reassignment -> ID MINUSEQ expression .)
    IF              reduce using rule 30 (reassignment -> ID MINUSEQ expression .)
    WHILE           reduce using rule 30 (reassignment -> ID MINUSEQ expression .)
    FOR             reduce using rule 30 (reassignment -> ID MINUSEQ expression .)
    FUNCTION        reduce using rule 30 (reassignment -> ID MINUSEQ expression .)
    NUMBER          reduce using rule 30 (reassignment -> ID MINUSEQ expression .)
    STRING          reduce using rule 30 (reassignment -> ID MINUSEQ expression .)
    UNDEFINED       reduce using rule 30 (reassignment -> ID MINUSEQ expression .)
    $end            reduce using rule 30 (reassignment -> ID MINUSEQ expression .)
    RIGHTBRACE      reduce using rule 30 (reassignment -> ID MINUSEQ expression .)
    RIGHTPAREN      reduce using rule 30 (reassignment -> ID MINUSEQ expression .)
    ELSE            reduce using rule 30 (reassignment -> ID MINUSEQ expression .)
    PLUS            shift and go to state 92
    MINUS           shift and go to state 86
    INTO            shift and go to state 97
    DIVIDE          shift and go to state 96
    MOD             shift and go to state 103
    EXPO            shift and go to state 93
    BINAND          shift and go to state 88
    BINOR           shift and go to state 100
    BINXOR          shift and go to state 94
    LT              shift and go to state 91
    GT              shift and go to state 95
    DOUBLEEQ        shift and go to state 81
    NOTEQUAL        shift and go to state 83
    LTE             shift and go to state 98
    GTE             shift and go to state 87
    STREQUAL        shift and go to state 90
    STRNEQUAL       shift and go to state 84
    AND             shift and go to state 99
    OR              shift and go to state 102
    LSHIFT          shift and go to state 85
    RSHIFT          shift and go to state 82
    URSHIFT         shift and go to state 101


state 129

    (81) arrayCall -> ID LEFTBRACKET expression . RIGHTBRACKET
    (52) expression -> expression . PLUS expression
    (53) expression -> expression . MINUS expression
    (54) expression -> expression . INTO expression
    (55) expression -> expression . DIVIDE expression
    (56) expression -> expression . MOD expression
    (57) expression -> expression . EXPO expression
    (60) expression -> expression . BINAND expression
    (61) expression -> expression . BINOR expression
    (62) expression -> expression . BINXOR expression
    (64) expression -> expression . LT expression
    (65) expression -> expression . GT expression
    (66) expression -> expression . DOUBLEEQ expression
    (67) expression -> expression . NOTEQUAL expression
    (68) expression -> expression . LTE expression
    (69) expression -> expression . GTE expression
    (70) expression -> expression . STREQUAL expression
    (71) expression -> expression . STRNEQUAL expression
    (72) expression -> expression . AND expression
    (73) expression -> expression . OR expression
    (74) expression -> expression . LSHIFT expression
    (75) expression -> expression . RSHIFT expression
    (76) expression -> expression . URSHIFT expression

    RIGHTBRACKET    shift and go to state 177
    PLUS            shift and go to state 92
    MINUS           shift and go to state 86
    INTO            shift and go to state 97
    DIVIDE          shift and go to state 96
    MOD             shift and go to state 103
    EXPO            shift and go to state 93
    BINAND          shift and go to state 88
    BINOR           shift and go to state 100
    BINXOR          shift and go to state 94
    LT              shift and go to state 91
    GT              shift and go to state 95
    DOUBLEEQ        shift and go to state 81
    NOTEQUAL        shift and go to state 83
    LTE             shift and go to state 98
    GTE             shift and go to state 87
    STREQUAL        shift and go to state 90
    STRNEQUAL       shift and go to state 84
    AND             shift and go to state 99
    OR              shift and go to state 102
    LSHIFT          shift and go to state 85
    RSHIFT          shift and go to state 82
    URSHIFT         shift and go to state 101


state 130

    (39) reassignment -> ID OREQ expression .
    (52) expression -> expression . PLUS expression
    (53) expression -> expression . MINUS expression
    (54) expression -> expression . INTO expression
    (55) expression -> expression . DIVIDE expression
    (56) expression -> expression . MOD expression
    (57) expression -> expression . EXPO expression
    (60) expression -> expression . BINAND expression
    (61) expression -> expression . BINOR expression
    (62) expression -> expression . BINXOR expression
    (64) expression -> expression . LT expression
    (65) expression -> expression . GT expression
    (66) expression -> expression . DOUBLEEQ expression
    (67) expression -> expression . NOTEQUAL expression
    (68) expression -> expression . LTE expression
    (69) expression -> expression . GTE expression
    (70) expression -> expression . STREQUAL expression
    (71) expression -> expression . STRNEQUAL expression
    (72) expression -> expression . AND expression
    (73) expression -> expression . OR expression
    (74) expression -> expression . LSHIFT expression
    (75) expression -> expression . RSHIFT expression
    (76) expression -> expression . URSHIFT expression

    SEMICOLON       reduce using rule 39 (reassignment -> ID OREQ expression .)
    BREAK           reduce using rule 39 (reassignment -> ID OREQ expression .)
    CONTINUE        reduce using rule 39 (reassignment -> ID OREQ expression .)
    RETURN          reduce using rule 39 (reassignment -> ID OREQ expression .)
    CONSOLE         reduce using rule 39 (reassignment -> ID OREQ expression .)
    VAR             reduce using rule 39 (reassignment -> ID OREQ expression .)
    LEFTPAREN       reduce using rule 39 (reassignment -> ID OREQ expression .)
    ID              reduce using rule 39 (reassignment -> ID OREQ expression .)
    EVAL            reduce using rule 39 (reassignment -> ID OREQ expression .)
    NOT             reduce using rule 39 (reassignment -> ID OREQ expression .)
    BINNOT          reduce using rule 39 (reassignment -> ID OREQ expression .)
    TYPEOF          reduce using rule 39 (reassignment -> ID OREQ expression .)
    IF              reduce using rule 39 (reassignment -> ID OREQ expression .)
    WHILE           reduce using rule 39 (reassignment -> ID OREQ expression .)
    FOR             reduce using rule 39 (reassignment -> ID OREQ expression .)
    FUNCTION        reduce using rule 39 (reassignment -> ID OREQ expression .)
    NUMBER          reduce using rule 39 (reassignment -> ID OREQ expression .)
    STRING          reduce using rule 39 (reassignment -> ID OREQ expression .)
    UNDEFINED       reduce using rule 39 (reassignment -> ID OREQ expression .)
    $end            reduce using rule 39 (reassignment -> ID OREQ expression .)
    RIGHTBRACE      reduce using rule 39 (reassignment -> ID OREQ expression .)
    RIGHTPAREN      reduce using rule 39 (reassignment -> ID OREQ expression .)
    ELSE            reduce using rule 39 (reassignment -> ID OREQ expression .)
    PLUS            shift and go to state 92
    MINUS           shift and go to state 86
    INTO            shift and go to state 97
    DIVIDE          shift and go to state 96
    MOD             shift and go to state 103
    EXPO            shift and go to state 93
    BINAND          shift and go to state 88
    BINOR           shift and go to state 100
    BINXOR          shift and go to state 94
    LT              shift and go to state 91
    GT              shift and go to state 95
    DOUBLEEQ        shift and go to state 81
    NOTEQUAL        shift and go to state 83
    LTE             shift and go to state 98
    GTE             shift and go to state 87
    STREQUAL        shift and go to state 90
    STRNEQUAL       shift and go to state 84
    AND             shift and go to state 99
    OR              shift and go to state 102
    LSHIFT          shift and go to state 85
    RSHIFT          shift and go to state 82
    URSHIFT         shift and go to state 101


state 131

    (32) reassignment -> ID DIVEQ expression .
    (52) expression -> expression . PLUS expression
    (53) expression -> expression . MINUS expression
    (54) expression -> expression . INTO expression
    (55) expression -> expression . DIVIDE expression
    (56) expression -> expression . MOD expression
    (57) expression -> expression . EXPO expression
    (60) expression -> expression . BINAND expression
    (61) expression -> expression . BINOR expression
    (62) expression -> expression . BINXOR expression
    (64) expression -> expression . LT expression
    (65) expression -> expression . GT expression
    (66) expression -> expression . DOUBLEEQ expression
    (67) expression -> expression . NOTEQUAL expression
    (68) expression -> expression . LTE expression
    (69) expression -> expression . GTE expression
    (70) expression -> expression . STREQUAL expression
    (71) expression -> expression . STRNEQUAL expression
    (72) expression -> expression . AND expression
    (73) expression -> expression . OR expression
    (74) expression -> expression . LSHIFT expression
    (75) expression -> expression . RSHIFT expression
    (76) expression -> expression . URSHIFT expression

    SEMICOLON       reduce using rule 32 (reassignment -> ID DIVEQ expression .)
    BREAK           reduce using rule 32 (reassignment -> ID DIVEQ expression .)
    CONTINUE        reduce using rule 32 (reassignment -> ID DIVEQ expression .)
    RETURN          reduce using rule 32 (reassignment -> ID DIVEQ expression .)
    CONSOLE         reduce using rule 32 (reassignment -> ID DIVEQ expression .)
    VAR             reduce using rule 32 (reassignment -> ID DIVEQ expression .)
    LEFTPAREN       reduce using rule 32 (reassignment -> ID DIVEQ expression .)
    ID              reduce using rule 32 (reassignment -> ID DIVEQ expression .)
    EVAL            reduce using rule 32 (reassignment -> ID DIVEQ expression .)
    NOT             reduce using rule 32 (reassignment -> ID DIVEQ expression .)
    BINNOT          reduce using rule 32 (reassignment -> ID DIVEQ expression .)
    TYPEOF          reduce using rule 32 (reassignment -> ID DIVEQ expression .)
    IF              reduce using rule 32 (reassignment -> ID DIVEQ expression .)
    WHILE           reduce using rule 32 (reassignment -> ID DIVEQ expression .)
    FOR             reduce using rule 32 (reassignment -> ID DIVEQ expression .)
    FUNCTION        reduce using rule 32 (reassignment -> ID DIVEQ expression .)
    NUMBER          reduce using rule 32 (reassignment -> ID DIVEQ expression .)
    STRING          reduce using rule 32 (reassignment -> ID DIVEQ expression .)
    UNDEFINED       reduce using rule 32 (reassignment -> ID DIVEQ expression .)
    $end            reduce using rule 32 (reassignment -> ID DIVEQ expression .)
    RIGHTBRACE      reduce using rule 32 (reassignment -> ID DIVEQ expression .)
    RIGHTPAREN      reduce using rule 32 (reassignment -> ID DIVEQ expression .)
    ELSE            reduce using rule 32 (reassignment -> ID DIVEQ expression .)
    PLUS            shift and go to state 92
    MINUS           shift and go to state 86
    INTO            shift and go to state 97
    DIVIDE          shift and go to state 96
    MOD             shift and go to state 103
    EXPO            shift and go to state 93
    BINAND          shift and go to state 88
    BINOR           shift and go to state 100
    BINXOR          shift and go to state 94
    LT              shift and go to state 91
    GT              shift and go to state 95
    DOUBLEEQ        shift and go to state 81
    NOTEQUAL        shift and go to state 83
    LTE             shift and go to state 98
    GTE             shift and go to state 87
    STREQUAL        shift and go to state 90
    STRNEQUAL       shift and go to state 84
    AND             shift and go to state 99
    OR              shift and go to state 102
    LSHIFT          shift and go to state 85
    RSHIFT          shift and go to state 82
    URSHIFT         shift and go to state 101


state 132

    (35) reassignment -> ID LSHIFTEQ expression .
    (52) expression -> expression . PLUS expression
    (53) expression -> expression . MINUS expression
    (54) expression -> expression . INTO expression
    (55) expression -> expression . DIVIDE expression
    (56) expression -> expression . MOD expression
    (57) expression -> expression . EXPO expression
    (60) expression -> expression . BINAND expression
    (61) expression -> expression . BINOR expression
    (62) expression -> expression . BINXOR expression
    (64) expression -> expression . LT expression
    (65) expression -> expression . GT expression
    (66) expression -> expression . DOUBLEEQ expression
    (67) expression -> expression . NOTEQUAL expression
    (68) expression -> expression . LTE expression
    (69) expression -> expression . GTE expression
    (70) expression -> expression . STREQUAL expression
    (71) expression -> expression . STRNEQUAL expression
    (72) expression -> expression . AND expression
    (73) expression -> expression . OR expression
    (74) expression -> expression . LSHIFT expression
    (75) expression -> expression . RSHIFT expression
    (76) expression -> expression . URSHIFT expression

    SEMICOLON       reduce using rule 35 (reassignment -> ID LSHIFTEQ expression .)
    BREAK           reduce using rule 35 (reassignment -> ID LSHIFTEQ expression .)
    CONTINUE        reduce using rule 35 (reassignment -> ID LSHIFTEQ expression .)
    RETURN          reduce using rule 35 (reassignment -> ID LSHIFTEQ expression .)
    CONSOLE         reduce using rule 35 (reassignment -> ID LSHIFTEQ expression .)
    VAR             reduce using rule 35 (reassignment -> ID LSHIFTEQ expression .)
    LEFTPAREN       reduce using rule 35 (reassignment -> ID LSHIFTEQ expression .)
    ID              reduce using rule 35 (reassignment -> ID LSHIFTEQ expression .)
    EVAL            reduce using rule 35 (reassignment -> ID LSHIFTEQ expression .)
    NOT             reduce using rule 35 (reassignment -> ID LSHIFTEQ expression .)
    BINNOT          reduce using rule 35 (reassignment -> ID LSHIFTEQ expression .)
    TYPEOF          reduce using rule 35 (reassignment -> ID LSHIFTEQ expression .)
    IF              reduce using rule 35 (reassignment -> ID LSHIFTEQ expression .)
    WHILE           reduce using rule 35 (reassignment -> ID LSHIFTEQ expression .)
    FOR             reduce using rule 35 (reassignment -> ID LSHIFTEQ expression .)
    FUNCTION        reduce using rule 35 (reassignment -> ID LSHIFTEQ expression .)
    NUMBER          reduce using rule 35 (reassignment -> ID LSHIFTEQ expression .)
    STRING          reduce using rule 35 (reassignment -> ID LSHIFTEQ expression .)
    UNDEFINED       reduce using rule 35 (reassignment -> ID LSHIFTEQ expression .)
    $end            reduce using rule 35 (reassignment -> ID LSHIFTEQ expression .)
    RIGHTBRACE      reduce using rule 35 (reassignment -> ID LSHIFTEQ expression .)
    RIGHTPAREN      reduce using rule 35 (reassignment -> ID LSHIFTEQ expression .)
    ELSE            reduce using rule 35 (reassignment -> ID LSHIFTEQ expression .)
    PLUS            shift and go to state 92
    MINUS           shift and go to state 86
    INTO            shift and go to state 97
    DIVIDE          shift and go to state 96
    MOD             shift and go to state 103
    EXPO            shift and go to state 93
    BINAND          shift and go to state 88
    BINOR           shift and go to state 100
    BINXOR          shift and go to state 94
    LT              shift and go to state 91
    GT              shift and go to state 95
    DOUBLEEQ        shift and go to state 81
    NOTEQUAL        shift and go to state 83
    LTE             shift and go to state 98
    GTE             shift and go to state 87
    STREQUAL        shift and go to state 90
    STRNEQUAL       shift and go to state 84
    AND             shift and go to state 99
    OR              shift and go to state 102
    LSHIFT          shift and go to state 85
    RSHIFT          shift and go to state 82
    URSHIFT         shift and go to state 101


state 133

    (86) functioncall -> ID LEFTPAREN argList . RIGHTPAREN

    RIGHTPAREN      shift and go to state 178


state 134

    (87) argList -> expression .
    (88) argList -> expression . COMMA argList
    (52) expression -> expression . PLUS expression
    (53) expression -> expression . MINUS expression
    (54) expression -> expression . INTO expression
    (55) expression -> expression . DIVIDE expression
    (56) expression -> expression . MOD expression
    (57) expression -> expression . EXPO expression
    (60) expression -> expression . BINAND expression
    (61) expression -> expression . BINOR expression
    (62) expression -> expression . BINXOR expression
    (64) expression -> expression . LT expression
    (65) expression -> expression . GT expression
    (66) expression -> expression . DOUBLEEQ expression
    (67) expression -> expression . NOTEQUAL expression
    (68) expression -> expression . LTE expression
    (69) expression -> expression . GTE expression
    (70) expression -> expression . STREQUAL expression
    (71) expression -> expression . STRNEQUAL expression
    (72) expression -> expression . AND expression
    (73) expression -> expression . OR expression
    (74) expression -> expression . LSHIFT expression
    (75) expression -> expression . RSHIFT expression
    (76) expression -> expression . URSHIFT expression

    RIGHTPAREN      reduce using rule 87 (argList -> expression .)
    COMMA           shift and go to state 179
    PLUS            shift and go to state 92
    MINUS           shift and go to state 86
    INTO            shift and go to state 97
    DIVIDE          shift and go to state 96
    MOD             shift and go to state 103
    EXPO            shift and go to state 93
    BINAND          shift and go to state 88
    BINOR           shift and go to state 100
    BINXOR          shift and go to state 94
    LT              shift and go to state 91
    GT              shift and go to state 95
    DOUBLEEQ        shift and go to state 81
    NOTEQUAL        shift and go to state 83
    LTE             shift and go to state 98
    GTE             shift and go to state 87
    STREQUAL        shift and go to state 90
    STRNEQUAL       shift and go to state 84
    AND             shift and go to state 99
    OR              shift and go to state 102
    LSHIFT          shift and go to state 85
    RSHIFT          shift and go to state 82
    URSHIFT         shift and go to state 101


state 135

    (38) reassignment -> ID ANDEQ expression .
    (52) expression -> expression . PLUS expression
    (53) expression -> expression . MINUS expression
    (54) expression -> expression . INTO expression
    (55) expression -> expression . DIVIDE expression
    (56) expression -> expression . MOD expression
    (57) expression -> expression . EXPO expression
    (60) expression -> expression . BINAND expression
    (61) expression -> expression . BINOR expression
    (62) expression -> expression . BINXOR expression
    (64) expression -> expression . LT expression
    (65) expression -> expression . GT expression
    (66) expression -> expression . DOUBLEEQ expression
    (67) expression -> expression . NOTEQUAL expression
    (68) expression -> expression . LTE expression
    (69) expression -> expression . GTE expression
    (70) expression -> expression . STREQUAL expression
    (71) expression -> expression . STRNEQUAL expression
    (72) expression -> expression . AND expression
    (73) expression -> expression . OR expression
    (74) expression -> expression . LSHIFT expression
    (75) expression -> expression . RSHIFT expression
    (76) expression -> expression . URSHIFT expression

    SEMICOLON       reduce using rule 38 (reassignment -> ID ANDEQ expression .)
    BREAK           reduce using rule 38 (reassignment -> ID ANDEQ expression .)
    CONTINUE        reduce using rule 38 (reassignment -> ID ANDEQ expression .)
    RETURN          reduce using rule 38 (reassignment -> ID ANDEQ expression .)
    CONSOLE         reduce using rule 38 (reassignment -> ID ANDEQ expression .)
    VAR             reduce using rule 38 (reassignment -> ID ANDEQ expression .)
    LEFTPAREN       reduce using rule 38 (reassignment -> ID ANDEQ expression .)
    ID              reduce using rule 38 (reassignment -> ID ANDEQ expression .)
    EVAL            reduce using rule 38 (reassignment -> ID ANDEQ expression .)
    NOT             reduce using rule 38 (reassignment -> ID ANDEQ expression .)
    BINNOT          reduce using rule 38 (reassignment -> ID ANDEQ expression .)
    TYPEOF          reduce using rule 38 (reassignment -> ID ANDEQ expression .)
    IF              reduce using rule 38 (reassignment -> ID ANDEQ expression .)
    WHILE           reduce using rule 38 (reassignment -> ID ANDEQ expression .)
    FOR             reduce using rule 38 (reassignment -> ID ANDEQ expression .)
    FUNCTION        reduce using rule 38 (reassignment -> ID ANDEQ expression .)
    NUMBER          reduce using rule 38 (reassignment -> ID ANDEQ expression .)
    STRING          reduce using rule 38 (reassignment -> ID ANDEQ expression .)
    UNDEFINED       reduce using rule 38 (reassignment -> ID ANDEQ expression .)
    $end            reduce using rule 38 (reassignment -> ID ANDEQ expression .)
    RIGHTBRACE      reduce using rule 38 (reassignment -> ID ANDEQ expression .)
    RIGHTPAREN      reduce using rule 38 (reassignment -> ID ANDEQ expression .)
    ELSE            reduce using rule 38 (reassignment -> ID ANDEQ expression .)
    PLUS            shift and go to state 92
    MINUS           shift and go to state 86
    INTO            shift and go to state 97
    DIVIDE          shift and go to state 96
    MOD             shift and go to state 103
    EXPO            shift and go to state 93
    BINAND          shift and go to state 88
    BINOR           shift and go to state 100
    BINXOR          shift and go to state 94
    LT              shift and go to state 91
    GT              shift and go to state 95
    DOUBLEEQ        shift and go to state 81
    NOTEQUAL        shift and go to state 83
    LTE             shift and go to state 98
    GTE             shift and go to state 87
    STREQUAL        shift and go to state 90
    STRNEQUAL       shift and go to state 84
    AND             shift and go to state 99
    OR              shift and go to state 102
    LSHIFT          shift and go to state 85
    RSHIFT          shift and go to state 82
    URSHIFT         shift and go to state 101


state 136

    (44) arraydecl -> ID EQ LEFTBRACKET . arrayList RIGHTBRACKET
    (45) arrayList -> . expression COMMA arrayList
    (46) arrayList -> . arraydecl COMMA arrayList
    (47) arrayList -> . arraydecl
    (48) arrayList -> . expression
    (49) arrayList -> .
    (50) expression -> . EVAL LEFTPAREN statements RIGHTPAREN
    (51) expression -> . EVAL LEFTPAREN block RIGHTPAREN
    (52) expression -> . expression PLUS expression
    (53) expression -> . expression MINUS expression
    (54) expression -> . expression INTO expression
    (55) expression -> . expression DIVIDE expression
    (56) expression -> . expression MOD expression
    (57) expression -> . expression EXPO expression
    (58) expression -> . LEFTPAREN expression RIGHTPAREN
    (59) expression -> . NOT expression
    (60) expression -> . expression BINAND expression
    (61) expression -> . expression BINOR expression
    (62) expression -> . expression BINXOR expression
    (63) expression -> . BINNOT expression
    (64) expression -> . expression LT expression
    (65) expression -> . expression GT expression
    (66) expression -> . expression DOUBLEEQ expression
    (67) expression -> . expression NOTEQUAL expression
    (68) expression -> . expression LTE expression
    (69) expression -> . expression GTE expression
    (70) expression -> . expression STREQUAL expression
    (71) expression -> . expression STRNEQUAL expression
    (72) expression -> . expression AND expression
    (73) expression -> . expression OR expression
    (74) expression -> . expression LSHIFT expression
    (75) expression -> . expression RSHIFT expression
    (76) expression -> . expression URSHIFT expression
    (77) expression -> . basicTypes
    (78) expression -> . functioncall
    (79) expression -> . arrayCall
    (80) expression -> . TYPEOF expression
    (44) arraydecl -> . ID EQ LEFTBRACKET arrayList RIGHTBRACKET
    (82) basicTypes -> . NUMBER
    (83) basicTypes -> . STRING
    (84) basicTypes -> . ID
    (85) basicTypes -> . UNDEFINED
    (86) functioncall -> . ID LEFTPAREN argList RIGHTPAREN
    (81) arrayCall -> . ID LEFTBRACKET expression RIGHTBRACKET

    RIGHTBRACKET    reduce using rule 49 (arrayList -> .)
    EVAL            shift and go to state 20
    LEFTPAREN       shift and go to state 36
    NOT             shift and go to state 32
    BINNOT          shift and go to state 25
    TYPEOF          shift and go to state 15
    ID              shift and go to state 182
    NUMBER          shift and go to state 2
    STRING          shift and go to state 14
    UNDEFINED       shift and go to state 21

    arrayList                      shift and go to state 181
    arrayCall                      shift and go to state 10
    functioncall                   shift and go to state 38
    arraydecl                      shift and go to state 180
    expression                     shift and go to state 183
    basicTypes                     shift and go to state 33

state 137

    (28) reassignment -> ID EQ expression .
    (52) expression -> expression . PLUS expression
    (53) expression -> expression . MINUS expression
    (54) expression -> expression . INTO expression
    (55) expression -> expression . DIVIDE expression
    (56) expression -> expression . MOD expression
    (57) expression -> expression . EXPO expression
    (60) expression -> expression . BINAND expression
    (61) expression -> expression . BINOR expression
    (62) expression -> expression . BINXOR expression
    (64) expression -> expression . LT expression
    (65) expression -> expression . GT expression
    (66) expression -> expression . DOUBLEEQ expression
    (67) expression -> expression . NOTEQUAL expression
    (68) expression -> expression . LTE expression
    (69) expression -> expression . GTE expression
    (70) expression -> expression . STREQUAL expression
    (71) expression -> expression . STRNEQUAL expression
    (72) expression -> expression . AND expression
    (73) expression -> expression . OR expression
    (74) expression -> expression . LSHIFT expression
    (75) expression -> expression . RSHIFT expression
    (76) expression -> expression . URSHIFT expression

    SEMICOLON       reduce using rule 28 (reassignment -> ID EQ expression .)
    BREAK           reduce using rule 28 (reassignment -> ID EQ expression .)
    CONTINUE        reduce using rule 28 (reassignment -> ID EQ expression .)
    RETURN          reduce using rule 28 (reassignment -> ID EQ expression .)
    CONSOLE         reduce using rule 28 (reassignment -> ID EQ expression .)
    VAR             reduce using rule 28 (reassignment -> ID EQ expression .)
    LEFTPAREN       reduce using rule 28 (reassignment -> ID EQ expression .)
    ID              reduce using rule 28 (reassignment -> ID EQ expression .)
    EVAL            reduce using rule 28 (reassignment -> ID EQ expression .)
    NOT             reduce using rule 28 (reassignment -> ID EQ expression .)
    BINNOT          reduce using rule 28 (reassignment -> ID EQ expression .)
    TYPEOF          reduce using rule 28 (reassignment -> ID EQ expression .)
    IF              reduce using rule 28 (reassignment -> ID EQ expression .)
    WHILE           reduce using rule 28 (reassignment -> ID EQ expression .)
    FOR             reduce using rule 28 (reassignment -> ID EQ expression .)
    FUNCTION        reduce using rule 28 (reassignment -> ID EQ expression .)
    NUMBER          reduce using rule 28 (reassignment -> ID EQ expression .)
    STRING          reduce using rule 28 (reassignment -> ID EQ expression .)
    UNDEFINED       reduce using rule 28 (reassignment -> ID EQ expression .)
    $end            reduce using rule 28 (reassignment -> ID EQ expression .)
    RIGHTBRACE      reduce using rule 28 (reassignment -> ID EQ expression .)
    RIGHTPAREN      reduce using rule 28 (reassignment -> ID EQ expression .)
    ELSE            reduce using rule 28 (reassignment -> ID EQ expression .)
    PLUS            shift and go to state 92
    MINUS           shift and go to state 86
    INTO            shift and go to state 97
    DIVIDE          shift and go to state 96
    MOD             shift and go to state 103
    EXPO            shift and go to state 93
    BINAND          shift and go to state 88
    BINOR           shift and go to state 100
    BINXOR          shift and go to state 94
    LT              shift and go to state 91
    GT              shift and go to state 95
    DOUBLEEQ        shift and go to state 81
    NOTEQUAL        shift and go to state 83
    LTE             shift and go to state 98
    GTE             shift and go to state 87
    STREQUAL        shift and go to state 90
    STRNEQUAL       shift and go to state 84
    AND             shift and go to state 99
    OR              shift and go to state 102
    LSHIFT          shift and go to state 85
    RSHIFT          shift and go to state 82
    URSHIFT         shift and go to state 101


state 138

    (36) reassignment -> ID RSHIFTEQ expression .
    (52) expression -> expression . PLUS expression
    (53) expression -> expression . MINUS expression
    (54) expression -> expression . INTO expression
    (55) expression -> expression . DIVIDE expression
    (56) expression -> expression . MOD expression
    (57) expression -> expression . EXPO expression
    (60) expression -> expression . BINAND expression
    (61) expression -> expression . BINOR expression
    (62) expression -> expression . BINXOR expression
    (64) expression -> expression . LT expression
    (65) expression -> expression . GT expression
    (66) expression -> expression . DOUBLEEQ expression
    (67) expression -> expression . NOTEQUAL expression
    (68) expression -> expression . LTE expression
    (69) expression -> expression . GTE expression
    (70) expression -> expression . STREQUAL expression
    (71) expression -> expression . STRNEQUAL expression
    (72) expression -> expression . AND expression
    (73) expression -> expression . OR expression
    (74) expression -> expression . LSHIFT expression
    (75) expression -> expression . RSHIFT expression
    (76) expression -> expression . URSHIFT expression

    SEMICOLON       reduce using rule 36 (reassignment -> ID RSHIFTEQ expression .)
    BREAK           reduce using rule 36 (reassignment -> ID RSHIFTEQ expression .)
    CONTINUE        reduce using rule 36 (reassignment -> ID RSHIFTEQ expression .)
    RETURN          reduce using rule 36 (reassignment -> ID RSHIFTEQ expression .)
    CONSOLE         reduce using rule 36 (reassignment -> ID RSHIFTEQ expression .)
    VAR             reduce using rule 36 (reassignment -> ID RSHIFTEQ expression .)
    LEFTPAREN       reduce using rule 36 (reassignment -> ID RSHIFTEQ expression .)
    ID              reduce using rule 36 (reassignment -> ID RSHIFTEQ expression .)
    EVAL            reduce using rule 36 (reassignment -> ID RSHIFTEQ expression .)
    NOT             reduce using rule 36 (reassignment -> ID RSHIFTEQ expression .)
    BINNOT          reduce using rule 36 (reassignment -> ID RSHIFTEQ expression .)
    TYPEOF          reduce using rule 36 (reassignment -> ID RSHIFTEQ expression .)
    IF              reduce using rule 36 (reassignment -> ID RSHIFTEQ expression .)
    WHILE           reduce using rule 36 (reassignment -> ID RSHIFTEQ expression .)
    FOR             reduce using rule 36 (reassignment -> ID RSHIFTEQ expression .)
    FUNCTION        reduce using rule 36 (reassignment -> ID RSHIFTEQ expression .)
    NUMBER          reduce using rule 36 (reassignment -> ID RSHIFTEQ expression .)
    STRING          reduce using rule 36 (reassignment -> ID RSHIFTEQ expression .)
    UNDEFINED       reduce using rule 36 (reassignment -> ID RSHIFTEQ expression .)
    $end            reduce using rule 36 (reassignment -> ID RSHIFTEQ expression .)
    RIGHTBRACE      reduce using rule 36 (reassignment -> ID RSHIFTEQ expression .)
    RIGHTPAREN      reduce using rule 36 (reassignment -> ID RSHIFTEQ expression .)
    ELSE            reduce using rule 36 (reassignment -> ID RSHIFTEQ expression .)
    PLUS            shift and go to state 92
    MINUS           shift and go to state 86
    INTO            shift and go to state 97
    DIVIDE          shift and go to state 96
    MOD             shift and go to state 103
    EXPO            shift and go to state 93
    BINAND          shift and go to state 88
    BINOR           shift and go to state 100
    BINXOR          shift and go to state 94
    LT              shift and go to state 91
    GT              shift and go to state 95
    DOUBLEEQ        shift and go to state 81
    NOTEQUAL        shift and go to state 83
    LTE             shift and go to state 98
    GTE             shift and go to state 87
    STREQUAL        shift and go to state 90
    STRNEQUAL       shift and go to state 84
    AND             shift and go to state 99
    OR              shift and go to state 102
    LSHIFT          shift and go to state 85
    RSHIFT          shift and go to state 82
    URSHIFT         shift and go to state 101


state 139

    (29) reassignment -> ID PLUSEQ expression .
    (52) expression -> expression . PLUS expression
    (53) expression -> expression . MINUS expression
    (54) expression -> expression . INTO expression
    (55) expression -> expression . DIVIDE expression
    (56) expression -> expression . MOD expression
    (57) expression -> expression . EXPO expression
    (60) expression -> expression . BINAND expression
    (61) expression -> expression . BINOR expression
    (62) expression -> expression . BINXOR expression
    (64) expression -> expression . LT expression
    (65) expression -> expression . GT expression
    (66) expression -> expression . DOUBLEEQ expression
    (67) expression -> expression . NOTEQUAL expression
    (68) expression -> expression . LTE expression
    (69) expression -> expression . GTE expression
    (70) expression -> expression . STREQUAL expression
    (71) expression -> expression . STRNEQUAL expression
    (72) expression -> expression . AND expression
    (73) expression -> expression . OR expression
    (74) expression -> expression . LSHIFT expression
    (75) expression -> expression . RSHIFT expression
    (76) expression -> expression . URSHIFT expression

    SEMICOLON       reduce using rule 29 (reassignment -> ID PLUSEQ expression .)
    BREAK           reduce using rule 29 (reassignment -> ID PLUSEQ expression .)
    CONTINUE        reduce using rule 29 (reassignment -> ID PLUSEQ expression .)
    RETURN          reduce using rule 29 (reassignment -> ID PLUSEQ expression .)
    CONSOLE         reduce using rule 29 (reassignment -> ID PLUSEQ expression .)
    VAR             reduce using rule 29 (reassignment -> ID PLUSEQ expression .)
    LEFTPAREN       reduce using rule 29 (reassignment -> ID PLUSEQ expression .)
    ID              reduce using rule 29 (reassignment -> ID PLUSEQ expression .)
    EVAL            reduce using rule 29 (reassignment -> ID PLUSEQ expression .)
    NOT             reduce using rule 29 (reassignment -> ID PLUSEQ expression .)
    BINNOT          reduce using rule 29 (reassignment -> ID PLUSEQ expression .)
    TYPEOF          reduce using rule 29 (reassignment -> ID PLUSEQ expression .)
    IF              reduce using rule 29 (reassignment -> ID PLUSEQ expression .)
    WHILE           reduce using rule 29 (reassignment -> ID PLUSEQ expression .)
    FOR             reduce using rule 29 (reassignment -> ID PLUSEQ expression .)
    FUNCTION        reduce using rule 29 (reassignment -> ID PLUSEQ expression .)
    NUMBER          reduce using rule 29 (reassignment -> ID PLUSEQ expression .)
    STRING          reduce using rule 29 (reassignment -> ID PLUSEQ expression .)
    UNDEFINED       reduce using rule 29 (reassignment -> ID PLUSEQ expression .)
    $end            reduce using rule 29 (reassignment -> ID PLUSEQ expression .)
    RIGHTBRACE      reduce using rule 29 (reassignment -> ID PLUSEQ expression .)
    RIGHTPAREN      reduce using rule 29 (reassignment -> ID PLUSEQ expression .)
    ELSE            reduce using rule 29 (reassignment -> ID PLUSEQ expression .)
    PLUS            shift and go to state 92
    MINUS           shift and go to state 86
    INTO            shift and go to state 97
    DIVIDE          shift and go to state 96
    MOD             shift and go to state 103
    EXPO            shift and go to state 93
    BINAND          shift and go to state 88
    BINOR           shift and go to state 100
    BINXOR          shift and go to state 94
    LT              shift and go to state 91
    GT              shift and go to state 95
    DOUBLEEQ        shift and go to state 81
    NOTEQUAL        shift and go to state 83
    LTE             shift and go to state 98
    GTE             shift and go to state 87
    STREQUAL        shift and go to state 90
    STRNEQUAL       shift and go to state 84
    AND             shift and go to state 99
    OR              shift and go to state 102
    LSHIFT          shift and go to state 85
    RSHIFT          shift and go to state 82
    URSHIFT         shift and go to state 101


state 140

    (3) block -> LEFTBRACE statements RIGHTBRACE .

    ELSE            reduce using rule 3 (block -> LEFTBRACE statements RIGHTBRACE .)
    BREAK           reduce using rule 3 (block -> LEFTBRACE statements RIGHTBRACE .)
    CONTINUE        reduce using rule 3 (block -> LEFTBRACE statements RIGHTBRACE .)
    RETURN          reduce using rule 3 (block -> LEFTBRACE statements RIGHTBRACE .)
    CONSOLE         reduce using rule 3 (block -> LEFTBRACE statements RIGHTBRACE .)
    VAR             reduce using rule 3 (block -> LEFTBRACE statements RIGHTBRACE .)
    LEFTPAREN       reduce using rule 3 (block -> LEFTBRACE statements RIGHTBRACE .)
    ID              reduce using rule 3 (block -> LEFTBRACE statements RIGHTBRACE .)
    EVAL            reduce using rule 3 (block -> LEFTBRACE statements RIGHTBRACE .)
    NOT             reduce using rule 3 (block -> LEFTBRACE statements RIGHTBRACE .)
    BINNOT          reduce using rule 3 (block -> LEFTBRACE statements RIGHTBRACE .)
    TYPEOF          reduce using rule 3 (block -> LEFTBRACE statements RIGHTBRACE .)
    IF              reduce using rule 3 (block -> LEFTBRACE statements RIGHTBRACE .)
    WHILE           reduce using rule 3 (block -> LEFTBRACE statements RIGHTBRACE .)
    FOR             reduce using rule 3 (block -> LEFTBRACE statements RIGHTBRACE .)
    FUNCTION        reduce using rule 3 (block -> LEFTBRACE statements RIGHTBRACE .)
    NUMBER          reduce using rule 3 (block -> LEFTBRACE statements RIGHTBRACE .)
    STRING          reduce using rule 3 (block -> LEFTBRACE statements RIGHTBRACE .)
    UNDEFINED       reduce using rule 3 (block -> LEFTBRACE statements RIGHTBRACE .)
    $end            reduce using rule 3 (block -> LEFTBRACE statements RIGHTBRACE .)
    RIGHTBRACE      reduce using rule 3 (block -> LEFTBRACE statements RIGHTBRACE .)
    RIGHTPAREN      reduce using rule 3 (block -> LEFTBRACE statements RIGHTBRACE .)
    SEMICOLON       reduce using rule 3 (block -> LEFTBRACE statements RIGHTBRACE .)


state 141

    (104) funcdecl -> FUNCTION ID LEFTPAREN . argList RIGHTPAREN cblock
    (87) argList -> . expression
    (88) argList -> . expression COMMA argList
    (89) argList -> .
    (50) expression -> . EVAL LEFTPAREN statements RIGHTPAREN
    (51) expression -> . EVAL LEFTPAREN block RIGHTPAREN
    (52) expression -> . expression PLUS expression
    (53) expression -> . expression MINUS expression
    (54) expression -> . expression INTO expression
    (55) expression -> . expression DIVIDE expression
    (56) expression -> . expression MOD expression
    (57) expression -> . expression EXPO expression
    (58) expression -> . LEFTPAREN expression RIGHTPAREN
    (59) expression -> . NOT expression
    (60) expression -> . expression BINAND expression
    (61) expression -> . expression BINOR expression
    (62) expression -> . expression BINXOR expression
    (63) expression -> . BINNOT expression
    (64) expression -> . expression LT expression
    (65) expression -> . expression GT expression
    (66) expression -> . expression DOUBLEEQ expression
    (67) expression -> . expression NOTEQUAL expression
    (68) expression -> . expression LTE expression
    (69) expression -> . expression GTE expression
    (70) expression -> . expression STREQUAL expression
    (71) expression -> . expression STRNEQUAL expression
    (72) expression -> . expression AND expression
    (73) expression -> . expression OR expression
    (74) expression -> . expression LSHIFT expression
    (75) expression -> . expression RSHIFT expression
    (76) expression -> . expression URSHIFT expression
    (77) expression -> . basicTypes
    (78) expression -> . functioncall
    (79) expression -> . arrayCall
    (80) expression -> . TYPEOF expression
    (82) basicTypes -> . NUMBER
    (83) basicTypes -> . STRING
    (84) basicTypes -> . ID
    (85) basicTypes -> . UNDEFINED
    (86) functioncall -> . ID LEFTPAREN argList RIGHTPAREN
    (81) arrayCall -> . ID LEFTBRACKET expression RIGHTBRACKET

    RIGHTPAREN      reduce using rule 89 (argList -> .)
    EVAL            shift and go to state 20
    LEFTPAREN       shift and go to state 36
    NOT             shift and go to state 32
    BINNOT          shift and go to state 25
    TYPEOF          shift and go to state 15
    NUMBER          shift and go to state 2
    STRING          shift and go to state 14
    ID              shift and go to state 37
    UNDEFINED       shift and go to state 21

    arrayCall                      shift and go to state 10
    functioncall                   shift and go to state 38
    argList                        shift and go to state 184
    expression                     shift and go to state 134
    basicTypes                     shift and go to state 33

state 142

    (66) expression -> expression DOUBLEEQ expression .
    (52) expression -> expression . PLUS expression
    (53) expression -> expression . MINUS expression
    (54) expression -> expression . INTO expression
    (55) expression -> expression . DIVIDE expression
    (56) expression -> expression . MOD expression
    (57) expression -> expression . EXPO expression
    (60) expression -> expression . BINAND expression
    (61) expression -> expression . BINOR expression
    (62) expression -> expression . BINXOR expression
    (64) expression -> expression . LT expression
    (65) expression -> expression . GT expression
    (66) expression -> expression . DOUBLEEQ expression
    (67) expression -> expression . NOTEQUAL expression
    (68) expression -> expression . LTE expression
    (69) expression -> expression . GTE expression
    (70) expression -> expression . STREQUAL expression
    (71) expression -> expression . STRNEQUAL expression
    (72) expression -> expression . AND expression
    (73) expression -> expression . OR expression
    (74) expression -> expression . LSHIFT expression
    (75) expression -> expression . RSHIFT expression
    (76) expression -> expression . URSHIFT expression

    BINAND          reduce using rule 66 (expression -> expression DOUBLEEQ expression .)
    BINOR           reduce using rule 66 (expression -> expression DOUBLEEQ expression .)
    BINXOR          reduce using rule 66 (expression -> expression DOUBLEEQ expression .)
    DOUBLEEQ        reduce using rule 66 (expression -> expression DOUBLEEQ expression .)
    NOTEQUAL        reduce using rule 66 (expression -> expression DOUBLEEQ expression .)
    STREQUAL        reduce using rule 66 (expression -> expression DOUBLEEQ expression .)
    STRNEQUAL       reduce using rule 66 (expression -> expression DOUBLEEQ expression .)
    AND             reduce using rule 66 (expression -> expression DOUBLEEQ expression .)
    OR              reduce using rule 66 (expression -> expression DOUBLEEQ expression .)
    SEMICOLON       reduce using rule 66 (expression -> expression DOUBLEEQ expression .)
    BREAK           reduce using rule 66 (expression -> expression DOUBLEEQ expression .)
    CONTINUE        reduce using rule 66 (expression -> expression DOUBLEEQ expression .)
    RETURN          reduce using rule 66 (expression -> expression DOUBLEEQ expression .)
    CONSOLE         reduce using rule 66 (expression -> expression DOUBLEEQ expression .)
    VAR             reduce using rule 66 (expression -> expression DOUBLEEQ expression .)
    LEFTPAREN       reduce using rule 66 (expression -> expression DOUBLEEQ expression .)
    ID              reduce using rule 66 (expression -> expression DOUBLEEQ expression .)
    EVAL            reduce using rule 66 (expression -> expression DOUBLEEQ expression .)
    NOT             reduce using rule 66 (expression -> expression DOUBLEEQ expression .)
    BINNOT          reduce using rule 66 (expression -> expression DOUBLEEQ expression .)
    TYPEOF          reduce using rule 66 (expression -> expression DOUBLEEQ expression .)
    IF              reduce using rule 66 (expression -> expression DOUBLEEQ expression .)
    WHILE           reduce using rule 66 (expression -> expression DOUBLEEQ expression .)
    FOR             reduce using rule 66 (expression -> expression DOUBLEEQ expression .)
    FUNCTION        reduce using rule 66 (expression -> expression DOUBLEEQ expression .)
    NUMBER          reduce using rule 66 (expression -> expression DOUBLEEQ expression .)
    STRING          reduce using rule 66 (expression -> expression DOUBLEEQ expression .)
    UNDEFINED       reduce using rule 66 (expression -> expression DOUBLEEQ expression .)
    $end            reduce using rule 66 (expression -> expression DOUBLEEQ expression .)
    RIGHTBRACE      reduce using rule 66 (expression -> expression DOUBLEEQ expression .)
    RIGHTPAREN      reduce using rule 66 (expression -> expression DOUBLEEQ expression .)
    ELSE            reduce using rule 66 (expression -> expression DOUBLEEQ expression .)
    LEFTBRACE       reduce using rule 66 (expression -> expression DOUBLEEQ expression .)
    RIGHTBRACKET    reduce using rule 66 (expression -> expression DOUBLEEQ expression .)
    COMMA           reduce using rule 66 (expression -> expression DOUBLEEQ expression .)
    PLUS            shift and go to state 92
    MINUS           shift and go to state 86
    INTO            shift and go to state 97
    DIVIDE          shift and go to state 96
    MOD             shift and go to state 103
    EXPO            shift and go to state 93
    LT              shift and go to state 91
    GT              shift and go to state 95
    LTE             shift and go to state 98
    GTE             shift and go to state 87
    LSHIFT          shift and go to state 85
    RSHIFT          shift and go to state 82
    URSHIFT         shift and go to state 101

  ! PLUS            [ reduce using rule 66 (expression -> expression DOUBLEEQ expression .) ]
  ! MINUS           [ reduce using rule 66 (expression -> expression DOUBLEEQ expression .) ]
  ! INTO            [ reduce using rule 66 (expression -> expression DOUBLEEQ expression .) ]
  ! DIVIDE          [ reduce using rule 66 (expression -> expression DOUBLEEQ expression .) ]
  ! MOD             [ reduce using rule 66 (expression -> expression DOUBLEEQ expression .) ]
  ! EXPO            [ reduce using rule 66 (expression -> expression DOUBLEEQ expression .) ]
  ! LT              [ reduce using rule 66 (expression -> expression DOUBLEEQ expression .) ]
  ! GT              [ reduce using rule 66 (expression -> expression DOUBLEEQ expression .) ]
  ! LTE             [ reduce using rule 66 (expression -> expression DOUBLEEQ expression .) ]
  ! GTE             [ reduce using rule 66 (expression -> expression DOUBLEEQ expression .) ]
  ! LSHIFT          [ reduce using rule 66 (expression -> expression DOUBLEEQ expression .) ]
  ! RSHIFT          [ reduce using rule 66 (expression -> expression DOUBLEEQ expression .) ]
  ! URSHIFT         [ reduce using rule 66 (expression -> expression DOUBLEEQ expression .) ]
  ! BINAND          [ shift and go to state 88 ]
  ! BINOR           [ shift and go to state 100 ]
  ! BINXOR          [ shift and go to state 94 ]
  ! DOUBLEEQ        [ shift and go to state 81 ]
  ! NOTEQUAL        [ shift and go to state 83 ]
  ! STREQUAL        [ shift and go to state 90 ]
  ! STRNEQUAL       [ shift and go to state 84 ]
  ! AND             [ shift and go to state 99 ]
  ! OR              [ shift and go to state 102 ]


state 143

    (75) expression -> expression RSHIFT expression .
    (52) expression -> expression . PLUS expression
    (53) expression -> expression . MINUS expression
    (54) expression -> expression . INTO expression
    (55) expression -> expression . DIVIDE expression
    (56) expression -> expression . MOD expression
    (57) expression -> expression . EXPO expression
    (60) expression -> expression . BINAND expression
    (61) expression -> expression . BINOR expression
    (62) expression -> expression . BINXOR expression
    (64) expression -> expression . LT expression
    (65) expression -> expression . GT expression
    (66) expression -> expression . DOUBLEEQ expression
    (67) expression -> expression . NOTEQUAL expression
    (68) expression -> expression . LTE expression
    (69) expression -> expression . GTE expression
    (70) expression -> expression . STREQUAL expression
    (71) expression -> expression . STRNEQUAL expression
    (72) expression -> expression . AND expression
    (73) expression -> expression . OR expression
    (74) expression -> expression . LSHIFT expression
    (75) expression -> expression . RSHIFT expression
    (76) expression -> expression . URSHIFT expression

    BINAND          reduce using rule 75 (expression -> expression RSHIFT expression .)
    BINOR           reduce using rule 75 (expression -> expression RSHIFT expression .)
    BINXOR          reduce using rule 75 (expression -> expression RSHIFT expression .)
    LT              reduce using rule 75 (expression -> expression RSHIFT expression .)
    GT              reduce using rule 75 (expression -> expression RSHIFT expression .)
    DOUBLEEQ        reduce using rule 75 (expression -> expression RSHIFT expression .)
    NOTEQUAL        reduce using rule 75 (expression -> expression RSHIFT expression .)
    LTE             reduce using rule 75 (expression -> expression RSHIFT expression .)
    GTE             reduce using rule 75 (expression -> expression RSHIFT expression .)
    STREQUAL        reduce using rule 75 (expression -> expression RSHIFT expression .)
    STRNEQUAL       reduce using rule 75 (expression -> expression RSHIFT expression .)
    AND             reduce using rule 75 (expression -> expression RSHIFT expression .)
    OR              reduce using rule 75 (expression -> expression RSHIFT expression .)
    LSHIFT          reduce using rule 75 (expression -> expression RSHIFT expression .)
    RSHIFT          reduce using rule 75 (expression -> expression RSHIFT expression .)
    URSHIFT         reduce using rule 75 (expression -> expression RSHIFT expression .)
    SEMICOLON       reduce using rule 75 (expression -> expression RSHIFT expression .)
    BREAK           reduce using rule 75 (expression -> expression RSHIFT expression .)
    CONTINUE        reduce using rule 75 (expression -> expression RSHIFT expression .)
    RETURN          reduce using rule 75 (expression -> expression RSHIFT expression .)
    CONSOLE         reduce using rule 75 (expression -> expression RSHIFT expression .)
    VAR             reduce using rule 75 (expression -> expression RSHIFT expression .)
    LEFTPAREN       reduce using rule 75 (expression -> expression RSHIFT expression .)
    ID              reduce using rule 75 (expression -> expression RSHIFT expression .)
    EVAL            reduce using rule 75 (expression -> expression RSHIFT expression .)
    NOT             reduce using rule 75 (expression -> expression RSHIFT expression .)
    BINNOT          reduce using rule 75 (expression -> expression RSHIFT expression .)
    TYPEOF          reduce using rule 75 (expression -> expression RSHIFT expression .)
    IF              reduce using rule 75 (expression -> expression RSHIFT expression .)
    WHILE           reduce using rule 75 (expression -> expression RSHIFT expression .)
    FOR             reduce using rule 75 (expression -> expression RSHIFT expression .)
    FUNCTION        reduce using rule 75 (expression -> expression RSHIFT expression .)
    NUMBER          reduce using rule 75 (expression -> expression RSHIFT expression .)
    STRING          reduce using rule 75 (expression -> expression RSHIFT expression .)
    UNDEFINED       reduce using rule 75 (expression -> expression RSHIFT expression .)
    $end            reduce using rule 75 (expression -> expression RSHIFT expression .)
    RIGHTBRACE      reduce using rule 75 (expression -> expression RSHIFT expression .)
    RIGHTPAREN      reduce using rule 75 (expression -> expression RSHIFT expression .)
    ELSE            reduce using rule 75 (expression -> expression RSHIFT expression .)
    LEFTBRACE       reduce using rule 75 (expression -> expression RSHIFT expression .)
    RIGHTBRACKET    reduce using rule 75 (expression -> expression RSHIFT expression .)
    COMMA           reduce using rule 75 (expression -> expression RSHIFT expression .)
    PLUS            shift and go to state 92
    MINUS           shift and go to state 86
    INTO            shift and go to state 97
    DIVIDE          shift and go to state 96
    MOD             shift and go to state 103
    EXPO            shift and go to state 93

  ! PLUS            [ reduce using rule 75 (expression -> expression RSHIFT expression .) ]
  ! MINUS           [ reduce using rule 75 (expression -> expression RSHIFT expression .) ]
  ! INTO            [ reduce using rule 75 (expression -> expression RSHIFT expression .) ]
  ! DIVIDE          [ reduce using rule 75 (expression -> expression RSHIFT expression .) ]
  ! MOD             [ reduce using rule 75 (expression -> expression RSHIFT expression .) ]
  ! EXPO            [ reduce using rule 75 (expression -> expression RSHIFT expression .) ]
  ! BINAND          [ shift and go to state 88 ]
  ! BINOR           [ shift and go to state 100 ]
  ! BINXOR          [ shift and go to state 94 ]
  ! LT              [ shift and go to state 91 ]
  ! GT              [ shift and go to state 95 ]
  ! DOUBLEEQ        [ shift and go to state 81 ]
  ! NOTEQUAL        [ shift and go to state 83 ]
  ! LTE             [ shift and go to state 98 ]
  ! GTE             [ shift and go to state 87 ]
  ! STREQUAL        [ shift and go to state 90 ]
  ! STRNEQUAL       [ shift and go to state 84 ]
  ! AND             [ shift and go to state 99 ]
  ! OR              [ shift and go to state 102 ]
  ! LSHIFT          [ shift and go to state 85 ]
  ! RSHIFT          [ shift and go to state 82 ]
  ! URSHIFT         [ shift and go to state 101 ]


state 144

    (67) expression -> expression NOTEQUAL expression .
    (52) expression -> expression . PLUS expression
    (53) expression -> expression . MINUS expression
    (54) expression -> expression . INTO expression
    (55) expression -> expression . DIVIDE expression
    (56) expression -> expression . MOD expression
    (57) expression -> expression . EXPO expression
    (60) expression -> expression . BINAND expression
    (61) expression -> expression . BINOR expression
    (62) expression -> expression . BINXOR expression
    (64) expression -> expression . LT expression
    (65) expression -> expression . GT expression
    (66) expression -> expression . DOUBLEEQ expression
    (67) expression -> expression . NOTEQUAL expression
    (68) expression -> expression . LTE expression
    (69) expression -> expression . GTE expression
    (70) expression -> expression . STREQUAL expression
    (71) expression -> expression . STRNEQUAL expression
    (72) expression -> expression . AND expression
    (73) expression -> expression . OR expression
    (74) expression -> expression . LSHIFT expression
    (75) expression -> expression . RSHIFT expression
    (76) expression -> expression . URSHIFT expression

    BINAND          reduce using rule 67 (expression -> expression NOTEQUAL expression .)
    BINOR           reduce using rule 67 (expression -> expression NOTEQUAL expression .)
    BINXOR          reduce using rule 67 (expression -> expression NOTEQUAL expression .)
    DOUBLEEQ        reduce using rule 67 (expression -> expression NOTEQUAL expression .)
    NOTEQUAL        reduce using rule 67 (expression -> expression NOTEQUAL expression .)
    STREQUAL        reduce using rule 67 (expression -> expression NOTEQUAL expression .)
    STRNEQUAL       reduce using rule 67 (expression -> expression NOTEQUAL expression .)
    AND             reduce using rule 67 (expression -> expression NOTEQUAL expression .)
    OR              reduce using rule 67 (expression -> expression NOTEQUAL expression .)
    SEMICOLON       reduce using rule 67 (expression -> expression NOTEQUAL expression .)
    BREAK           reduce using rule 67 (expression -> expression NOTEQUAL expression .)
    CONTINUE        reduce using rule 67 (expression -> expression NOTEQUAL expression .)
    RETURN          reduce using rule 67 (expression -> expression NOTEQUAL expression .)
    CONSOLE         reduce using rule 67 (expression -> expression NOTEQUAL expression .)
    VAR             reduce using rule 67 (expression -> expression NOTEQUAL expression .)
    LEFTPAREN       reduce using rule 67 (expression -> expression NOTEQUAL expression .)
    ID              reduce using rule 67 (expression -> expression NOTEQUAL expression .)
    EVAL            reduce using rule 67 (expression -> expression NOTEQUAL expression .)
    NOT             reduce using rule 67 (expression -> expression NOTEQUAL expression .)
    BINNOT          reduce using rule 67 (expression -> expression NOTEQUAL expression .)
    TYPEOF          reduce using rule 67 (expression -> expression NOTEQUAL expression .)
    IF              reduce using rule 67 (expression -> expression NOTEQUAL expression .)
    WHILE           reduce using rule 67 (expression -> expression NOTEQUAL expression .)
    FOR             reduce using rule 67 (expression -> expression NOTEQUAL expression .)
    FUNCTION        reduce using rule 67 (expression -> expression NOTEQUAL expression .)
    NUMBER          reduce using rule 67 (expression -> expression NOTEQUAL expression .)
    STRING          reduce using rule 67 (expression -> expression NOTEQUAL expression .)
    UNDEFINED       reduce using rule 67 (expression -> expression NOTEQUAL expression .)
    $end            reduce using rule 67 (expression -> expression NOTEQUAL expression .)
    RIGHTBRACE      reduce using rule 67 (expression -> expression NOTEQUAL expression .)
    RIGHTPAREN      reduce using rule 67 (expression -> expression NOTEQUAL expression .)
    ELSE            reduce using rule 67 (expression -> expression NOTEQUAL expression .)
    LEFTBRACE       reduce using rule 67 (expression -> expression NOTEQUAL expression .)
    RIGHTBRACKET    reduce using rule 67 (expression -> expression NOTEQUAL expression .)
    COMMA           reduce using rule 67 (expression -> expression NOTEQUAL expression .)
    PLUS            shift and go to state 92
    MINUS           shift and go to state 86
    INTO            shift and go to state 97
    DIVIDE          shift and go to state 96
    MOD             shift and go to state 103
    EXPO            shift and go to state 93
    LT              shift and go to state 91
    GT              shift and go to state 95
    LTE             shift and go to state 98
    GTE             shift and go to state 87
    LSHIFT          shift and go to state 85
    RSHIFT          shift and go to state 82
    URSHIFT         shift and go to state 101

  ! PLUS            [ reduce using rule 67 (expression -> expression NOTEQUAL expression .) ]
  ! MINUS           [ reduce using rule 67 (expression -> expression NOTEQUAL expression .) ]
  ! INTO            [ reduce using rule 67 (expression -> expression NOTEQUAL expression .) ]
  ! DIVIDE          [ reduce using rule 67 (expression -> expression NOTEQUAL expression .) ]
  ! MOD             [ reduce using rule 67 (expression -> expression NOTEQUAL expression .) ]
  ! EXPO            [ reduce using rule 67 (expression -> expression NOTEQUAL expression .) ]
  ! LT              [ reduce using rule 67 (expression -> expression NOTEQUAL expression .) ]
  ! GT              [ reduce using rule 67 (expression -> expression NOTEQUAL expression .) ]
  ! LTE             [ reduce using rule 67 (expression -> expression NOTEQUAL expression .) ]
  ! GTE             [ reduce using rule 67 (expression -> expression NOTEQUAL expression .) ]
  ! LSHIFT          [ reduce using rule 67 (expression -> expression NOTEQUAL expression .) ]
  ! RSHIFT          [ reduce using rule 67 (expression -> expression NOTEQUAL expression .) ]
  ! URSHIFT         [ reduce using rule 67 (expression -> expression NOTEQUAL expression .) ]
  ! BINAND          [ shift and go to state 88 ]
  ! BINOR           [ shift and go to state 100 ]
  ! BINXOR          [ shift and go to state 94 ]
  ! DOUBLEEQ        [ shift and go to state 81 ]
  ! NOTEQUAL        [ shift and go to state 83 ]
  ! STREQUAL        [ shift and go to state 90 ]
  ! STRNEQUAL       [ shift and go to state 84 ]
  ! AND             [ shift and go to state 99 ]
  ! OR              [ shift and go to state 102 ]


state 145

    (71) expression -> expression STRNEQUAL expression .
    (52) expression -> expression . PLUS expression
    (53) expression -> expression . MINUS expression
    (54) expression -> expression . INTO expression
    (55) expression -> expression . DIVIDE expression
    (56) expression -> expression . MOD expression
    (57) expression -> expression . EXPO expression
    (60) expression -> expression . BINAND expression
    (61) expression -> expression . BINOR expression
    (62) expression -> expression . BINXOR expression
    (64) expression -> expression . LT expression
    (65) expression -> expression . GT expression
    (66) expression -> expression . DOUBLEEQ expression
    (67) expression -> expression . NOTEQUAL expression
    (68) expression -> expression . LTE expression
    (69) expression -> expression . GTE expression
    (70) expression -> expression . STREQUAL expression
    (71) expression -> expression . STRNEQUAL expression
    (72) expression -> expression . AND expression
    (73) expression -> expression . OR expression
    (74) expression -> expression . LSHIFT expression
    (75) expression -> expression . RSHIFT expression
    (76) expression -> expression . URSHIFT expression

    BINAND          reduce using rule 71 (expression -> expression STRNEQUAL expression .)
    BINOR           reduce using rule 71 (expression -> expression STRNEQUAL expression .)
    BINXOR          reduce using rule 71 (expression -> expression STRNEQUAL expression .)
    DOUBLEEQ        reduce using rule 71 (expression -> expression STRNEQUAL expression .)
    NOTEQUAL        reduce using rule 71 (expression -> expression STRNEQUAL expression .)
    STREQUAL        reduce using rule 71 (expression -> expression STRNEQUAL expression .)
    STRNEQUAL       reduce using rule 71 (expression -> expression STRNEQUAL expression .)
    AND             reduce using rule 71 (expression -> expression STRNEQUAL expression .)
    OR              reduce using rule 71 (expression -> expression STRNEQUAL expression .)
    SEMICOLON       reduce using rule 71 (expression -> expression STRNEQUAL expression .)
    BREAK           reduce using rule 71 (expression -> expression STRNEQUAL expression .)
    CONTINUE        reduce using rule 71 (expression -> expression STRNEQUAL expression .)
    RETURN          reduce using rule 71 (expression -> expression STRNEQUAL expression .)
    CONSOLE         reduce using rule 71 (expression -> expression STRNEQUAL expression .)
    VAR             reduce using rule 71 (expression -> expression STRNEQUAL expression .)
    LEFTPAREN       reduce using rule 71 (expression -> expression STRNEQUAL expression .)
    ID              reduce using rule 71 (expression -> expression STRNEQUAL expression .)
    EVAL            reduce using rule 71 (expression -> expression STRNEQUAL expression .)
    NOT             reduce using rule 71 (expression -> expression STRNEQUAL expression .)
    BINNOT          reduce using rule 71 (expression -> expression STRNEQUAL expression .)
    TYPEOF          reduce using rule 71 (expression -> expression STRNEQUAL expression .)
    IF              reduce using rule 71 (expression -> expression STRNEQUAL expression .)
    WHILE           reduce using rule 71 (expression -> expression STRNEQUAL expression .)
    FOR             reduce using rule 71 (expression -> expression STRNEQUAL expression .)
    FUNCTION        reduce using rule 71 (expression -> expression STRNEQUAL expression .)
    NUMBER          reduce using rule 71 (expression -> expression STRNEQUAL expression .)
    STRING          reduce using rule 71 (expression -> expression STRNEQUAL expression .)
    UNDEFINED       reduce using rule 71 (expression -> expression STRNEQUAL expression .)
    $end            reduce using rule 71 (expression -> expression STRNEQUAL expression .)
    RIGHTBRACE      reduce using rule 71 (expression -> expression STRNEQUAL expression .)
    RIGHTPAREN      reduce using rule 71 (expression -> expression STRNEQUAL expression .)
    ELSE            reduce using rule 71 (expression -> expression STRNEQUAL expression .)
    LEFTBRACE       reduce using rule 71 (expression -> expression STRNEQUAL expression .)
    RIGHTBRACKET    reduce using rule 71 (expression -> expression STRNEQUAL expression .)
    COMMA           reduce using rule 71 (expression -> expression STRNEQUAL expression .)
    PLUS            shift and go to state 92
    MINUS           shift and go to state 86
    INTO            shift and go to state 97
    DIVIDE          shift and go to state 96
    MOD             shift and go to state 103
    EXPO            shift and go to state 93
    LT              shift and go to state 91
    GT              shift and go to state 95
    LTE             shift and go to state 98
    GTE             shift and go to state 87
    LSHIFT          shift and go to state 85
    RSHIFT          shift and go to state 82
    URSHIFT         shift and go to state 101

  ! PLUS            [ reduce using rule 71 (expression -> expression STRNEQUAL expression .) ]
  ! MINUS           [ reduce using rule 71 (expression -> expression STRNEQUAL expression .) ]
  ! INTO            [ reduce using rule 71 (expression -> expression STRNEQUAL expression .) ]
  ! DIVIDE          [ reduce using rule 71 (expression -> expression STRNEQUAL expression .) ]
  ! MOD             [ reduce using rule 71 (expression -> expression STRNEQUAL expression .) ]
  ! EXPO            [ reduce using rule 71 (expression -> expression STRNEQUAL expression .) ]
  ! LT              [ reduce using rule 71 (expression -> expression STRNEQUAL expression .) ]
  ! GT              [ reduce using rule 71 (expression -> expression STRNEQUAL expression .) ]
  ! LTE             [ reduce using rule 71 (expression -> expression STRNEQUAL expression .) ]
  ! GTE             [ reduce using rule 71 (expression -> expression STRNEQUAL expression .) ]
  ! LSHIFT          [ reduce using rule 71 (expression -> expression STRNEQUAL expression .) ]
  ! RSHIFT          [ reduce using rule 71 (expression -> expression STRNEQUAL expression .) ]
  ! URSHIFT         [ reduce using rule 71 (expression -> expression STRNEQUAL expression .) ]
  ! BINAND          [ shift and go to state 88 ]
  ! BINOR           [ shift and go to state 100 ]
  ! BINXOR          [ shift and go to state 94 ]
  ! DOUBLEEQ        [ shift and go to state 81 ]
  ! NOTEQUAL        [ shift and go to state 83 ]
  ! STREQUAL        [ shift and go to state 90 ]
  ! STRNEQUAL       [ shift and go to state 84 ]
  ! AND             [ shift and go to state 99 ]
  ! OR              [ shift and go to state 102 ]


state 146

    (74) expression -> expression LSHIFT expression .
    (52) expression -> expression . PLUS expression
    (53) expression -> expression . MINUS expression
    (54) expression -> expression . INTO expression
    (55) expression -> expression . DIVIDE expression
    (56) expression -> expression . MOD expression
    (57) expression -> expression . EXPO expression
    (60) expression -> expression . BINAND expression
    (61) expression -> expression . BINOR expression
    (62) expression -> expression . BINXOR expression
    (64) expression -> expression . LT expression
    (65) expression -> expression . GT expression
    (66) expression -> expression . DOUBLEEQ expression
    (67) expression -> expression . NOTEQUAL expression
    (68) expression -> expression . LTE expression
    (69) expression -> expression . GTE expression
    (70) expression -> expression . STREQUAL expression
    (71) expression -> expression . STRNEQUAL expression
    (72) expression -> expression . AND expression
    (73) expression -> expression . OR expression
    (74) expression -> expression . LSHIFT expression
    (75) expression -> expression . RSHIFT expression
    (76) expression -> expression . URSHIFT expression

    BINAND          reduce using rule 74 (expression -> expression LSHIFT expression .)
    BINOR           reduce using rule 74 (expression -> expression LSHIFT expression .)
    BINXOR          reduce using rule 74 (expression -> expression LSHIFT expression .)
    LT              reduce using rule 74 (expression -> expression LSHIFT expression .)
    GT              reduce using rule 74 (expression -> expression LSHIFT expression .)
    DOUBLEEQ        reduce using rule 74 (expression -> expression LSHIFT expression .)
    NOTEQUAL        reduce using rule 74 (expression -> expression LSHIFT expression .)
    LTE             reduce using rule 74 (expression -> expression LSHIFT expression .)
    GTE             reduce using rule 74 (expression -> expression LSHIFT expression .)
    STREQUAL        reduce using rule 74 (expression -> expression LSHIFT expression .)
    STRNEQUAL       reduce using rule 74 (expression -> expression LSHIFT expression .)
    AND             reduce using rule 74 (expression -> expression LSHIFT expression .)
    OR              reduce using rule 74 (expression -> expression LSHIFT expression .)
    LSHIFT          reduce using rule 74 (expression -> expression LSHIFT expression .)
    RSHIFT          reduce using rule 74 (expression -> expression LSHIFT expression .)
    URSHIFT         reduce using rule 74 (expression -> expression LSHIFT expression .)
    SEMICOLON       reduce using rule 74 (expression -> expression LSHIFT expression .)
    BREAK           reduce using rule 74 (expression -> expression LSHIFT expression .)
    CONTINUE        reduce using rule 74 (expression -> expression LSHIFT expression .)
    RETURN          reduce using rule 74 (expression -> expression LSHIFT expression .)
    CONSOLE         reduce using rule 74 (expression -> expression LSHIFT expression .)
    VAR             reduce using rule 74 (expression -> expression LSHIFT expression .)
    LEFTPAREN       reduce using rule 74 (expression -> expression LSHIFT expression .)
    ID              reduce using rule 74 (expression -> expression LSHIFT expression .)
    EVAL            reduce using rule 74 (expression -> expression LSHIFT expression .)
    NOT             reduce using rule 74 (expression -> expression LSHIFT expression .)
    BINNOT          reduce using rule 74 (expression -> expression LSHIFT expression .)
    TYPEOF          reduce using rule 74 (expression -> expression LSHIFT expression .)
    IF              reduce using rule 74 (expression -> expression LSHIFT expression .)
    WHILE           reduce using rule 74 (expression -> expression LSHIFT expression .)
    FOR             reduce using rule 74 (expression -> expression LSHIFT expression .)
    FUNCTION        reduce using rule 74 (expression -> expression LSHIFT expression .)
    NUMBER          reduce using rule 74 (expression -> expression LSHIFT expression .)
    STRING          reduce using rule 74 (expression -> expression LSHIFT expression .)
    UNDEFINED       reduce using rule 74 (expression -> expression LSHIFT expression .)
    $end            reduce using rule 74 (expression -> expression LSHIFT expression .)
    RIGHTBRACE      reduce using rule 74 (expression -> expression LSHIFT expression .)
    RIGHTPAREN      reduce using rule 74 (expression -> expression LSHIFT expression .)
    ELSE            reduce using rule 74 (expression -> expression LSHIFT expression .)
    LEFTBRACE       reduce using rule 74 (expression -> expression LSHIFT expression .)
    RIGHTBRACKET    reduce using rule 74 (expression -> expression LSHIFT expression .)
    COMMA           reduce using rule 74 (expression -> expression LSHIFT expression .)
    PLUS            shift and go to state 92
    MINUS           shift and go to state 86
    INTO            shift and go to state 97
    DIVIDE          shift and go to state 96
    MOD             shift and go to state 103
    EXPO            shift and go to state 93

  ! PLUS            [ reduce using rule 74 (expression -> expression LSHIFT expression .) ]
  ! MINUS           [ reduce using rule 74 (expression -> expression LSHIFT expression .) ]
  ! INTO            [ reduce using rule 74 (expression -> expression LSHIFT expression .) ]
  ! DIVIDE          [ reduce using rule 74 (expression -> expression LSHIFT expression .) ]
  ! MOD             [ reduce using rule 74 (expression -> expression LSHIFT expression .) ]
  ! EXPO            [ reduce using rule 74 (expression -> expression LSHIFT expression .) ]
  ! BINAND          [ shift and go to state 88 ]
  ! BINOR           [ shift and go to state 100 ]
  ! BINXOR          [ shift and go to state 94 ]
  ! LT              [ shift and go to state 91 ]
  ! GT              [ shift and go to state 95 ]
  ! DOUBLEEQ        [ shift and go to state 81 ]
  ! NOTEQUAL        [ shift and go to state 83 ]
  ! LTE             [ shift and go to state 98 ]
  ! GTE             [ shift and go to state 87 ]
  ! STREQUAL        [ shift and go to state 90 ]
  ! STRNEQUAL       [ shift and go to state 84 ]
  ! AND             [ shift and go to state 99 ]
  ! OR              [ shift and go to state 102 ]
  ! LSHIFT          [ shift and go to state 85 ]
  ! RSHIFT          [ shift and go to state 82 ]
  ! URSHIFT         [ shift and go to state 101 ]


state 147

    (53) expression -> expression MINUS expression .
    (52) expression -> expression . PLUS expression
    (53) expression -> expression . MINUS expression
    (54) expression -> expression . INTO expression
    (55) expression -> expression . DIVIDE expression
    (56) expression -> expression . MOD expression
    (57) expression -> expression . EXPO expression
    (60) expression -> expression . BINAND expression
    (61) expression -> expression . BINOR expression
    (62) expression -> expression . BINXOR expression
    (64) expression -> expression . LT expression
    (65) expression -> expression . GT expression
    (66) expression -> expression . DOUBLEEQ expression
    (67) expression -> expression . NOTEQUAL expression
    (68) expression -> expression . LTE expression
    (69) expression -> expression . GTE expression
    (70) expression -> expression . STREQUAL expression
    (71) expression -> expression . STRNEQUAL expression
    (72) expression -> expression . AND expression
    (73) expression -> expression . OR expression
    (74) expression -> expression . LSHIFT expression
    (75) expression -> expression . RSHIFT expression
    (76) expression -> expression . URSHIFT expression

    PLUS            reduce using rule 53 (expression -> expression MINUS expression .)
    MINUS           reduce using rule 53 (expression -> expression MINUS expression .)
    BINAND          reduce using rule 53 (expression -> expression MINUS expression .)
    BINOR           reduce using rule 53 (expression -> expression MINUS expression .)
    BINXOR          reduce using rule 53 (expression -> expression MINUS expression .)
    LT              reduce using rule 53 (expression -> expression MINUS expression .)
    GT              reduce using rule 53 (expression -> expression MINUS expression .)
    DOUBLEEQ        reduce using rule 53 (expression -> expression MINUS expression .)
    NOTEQUAL        reduce using rule 53 (expression -> expression MINUS expression .)
    LTE             reduce using rule 53 (expression -> expression MINUS expression .)
    GTE             reduce using rule 53 (expression -> expression MINUS expression .)
    STREQUAL        reduce using rule 53 (expression -> expression MINUS expression .)
    STRNEQUAL       reduce using rule 53 (expression -> expression MINUS expression .)
    AND             reduce using rule 53 (expression -> expression MINUS expression .)
    OR              reduce using rule 53 (expression -> expression MINUS expression .)
    LSHIFT          reduce using rule 53 (expression -> expression MINUS expression .)
    RSHIFT          reduce using rule 53 (expression -> expression MINUS expression .)
    URSHIFT         reduce using rule 53 (expression -> expression MINUS expression .)
    SEMICOLON       reduce using rule 53 (expression -> expression MINUS expression .)
    BREAK           reduce using rule 53 (expression -> expression MINUS expression .)
    CONTINUE        reduce using rule 53 (expression -> expression MINUS expression .)
    RETURN          reduce using rule 53 (expression -> expression MINUS expression .)
    CONSOLE         reduce using rule 53 (expression -> expression MINUS expression .)
    VAR             reduce using rule 53 (expression -> expression MINUS expression .)
    LEFTPAREN       reduce using rule 53 (expression -> expression MINUS expression .)
    ID              reduce using rule 53 (expression -> expression MINUS expression .)
    EVAL            reduce using rule 53 (expression -> expression MINUS expression .)
    NOT             reduce using rule 53 (expression -> expression MINUS expression .)
    BINNOT          reduce using rule 53 (expression -> expression MINUS expression .)
    TYPEOF          reduce using rule 53 (expression -> expression MINUS expression .)
    IF              reduce using rule 53 (expression -> expression MINUS expression .)
    WHILE           reduce using rule 53 (expression -> expression MINUS expression .)
    FOR             reduce using rule 53 (expression -> expression MINUS expression .)
    FUNCTION        reduce using rule 53 (expression -> expression MINUS expression .)
    NUMBER          reduce using rule 53 (expression -> expression MINUS expression .)
    STRING          reduce using rule 53 (expression -> expression MINUS expression .)
    UNDEFINED       reduce using rule 53 (expression -> expression MINUS expression .)
    $end            reduce using rule 53 (expression -> expression MINUS expression .)
    RIGHTBRACE      reduce using rule 53 (expression -> expression MINUS expression .)
    RIGHTPAREN      reduce using rule 53 (expression -> expression MINUS expression .)
    ELSE            reduce using rule 53 (expression -> expression MINUS expression .)
    LEFTBRACE       reduce using rule 53 (expression -> expression MINUS expression .)
    RIGHTBRACKET    reduce using rule 53 (expression -> expression MINUS expression .)
    COMMA           reduce using rule 53 (expression -> expression MINUS expression .)
    INTO            shift and go to state 97
    DIVIDE          shift and go to state 96
    MOD             shift and go to state 103
    EXPO            shift and go to state 93

  ! INTO            [ reduce using rule 53 (expression -> expression MINUS expression .) ]
  ! DIVIDE          [ reduce using rule 53 (expression -> expression MINUS expression .) ]
  ! MOD             [ reduce using rule 53 (expression -> expression MINUS expression .) ]
  ! EXPO            [ reduce using rule 53 (expression -> expression MINUS expression .) ]
  ! PLUS            [ shift and go to state 92 ]
  ! MINUS           [ shift and go to state 86 ]
  ! BINAND          [ shift and go to state 88 ]
  ! BINOR           [ shift and go to state 100 ]
  ! BINXOR          [ shift and go to state 94 ]
  ! LT              [ shift and go to state 91 ]
  ! GT              [ shift and go to state 95 ]
  ! DOUBLEEQ        [ shift and go to state 81 ]
  ! NOTEQUAL        [ shift and go to state 83 ]
  ! LTE             [ shift and go to state 98 ]
  ! GTE             [ shift and go to state 87 ]
  ! STREQUAL        [ shift and go to state 90 ]
  ! STRNEQUAL       [ shift and go to state 84 ]
  ! AND             [ shift and go to state 99 ]
  ! OR              [ shift and go to state 102 ]
  ! LSHIFT          [ shift and go to state 85 ]
  ! RSHIFT          [ shift and go to state 82 ]
  ! URSHIFT         [ shift and go to state 101 ]


state 148

    (69) expression -> expression GTE expression .
    (52) expression -> expression . PLUS expression
    (53) expression -> expression . MINUS expression
    (54) expression -> expression . INTO expression
    (55) expression -> expression . DIVIDE expression
    (56) expression -> expression . MOD expression
    (57) expression -> expression . EXPO expression
    (60) expression -> expression . BINAND expression
    (61) expression -> expression . BINOR expression
    (62) expression -> expression . BINXOR expression
    (64) expression -> expression . LT expression
    (65) expression -> expression . GT expression
    (66) expression -> expression . DOUBLEEQ expression
    (67) expression -> expression . NOTEQUAL expression
    (68) expression -> expression . LTE expression
    (69) expression -> expression . GTE expression
    (70) expression -> expression . STREQUAL expression
    (71) expression -> expression . STRNEQUAL expression
    (72) expression -> expression . AND expression
    (73) expression -> expression . OR expression
    (74) expression -> expression . LSHIFT expression
    (75) expression -> expression . RSHIFT expression
    (76) expression -> expression . URSHIFT expression

    BINAND          reduce using rule 69 (expression -> expression GTE expression .)
    BINOR           reduce using rule 69 (expression -> expression GTE expression .)
    BINXOR          reduce using rule 69 (expression -> expression GTE expression .)
    LT              reduce using rule 69 (expression -> expression GTE expression .)
    GT              reduce using rule 69 (expression -> expression GTE expression .)
    DOUBLEEQ        reduce using rule 69 (expression -> expression GTE expression .)
    NOTEQUAL        reduce using rule 69 (expression -> expression GTE expression .)
    LTE             reduce using rule 69 (expression -> expression GTE expression .)
    GTE             reduce using rule 69 (expression -> expression GTE expression .)
    STREQUAL        reduce using rule 69 (expression -> expression GTE expression .)
    STRNEQUAL       reduce using rule 69 (expression -> expression GTE expression .)
    AND             reduce using rule 69 (expression -> expression GTE expression .)
    OR              reduce using rule 69 (expression -> expression GTE expression .)
    SEMICOLON       reduce using rule 69 (expression -> expression GTE expression .)
    BREAK           reduce using rule 69 (expression -> expression GTE expression .)
    CONTINUE        reduce using rule 69 (expression -> expression GTE expression .)
    RETURN          reduce using rule 69 (expression -> expression GTE expression .)
    CONSOLE         reduce using rule 69 (expression -> expression GTE expression .)
    VAR             reduce using rule 69 (expression -> expression GTE expression .)
    LEFTPAREN       reduce using rule 69 (expression -> expression GTE expression .)
    ID              reduce using rule 69 (expression -> expression GTE expression .)
    EVAL            reduce using rule 69 (expression -> expression GTE expression .)
    NOT             reduce using rule 69 (expression -> expression GTE expression .)
    BINNOT          reduce using rule 69 (expression -> expression GTE expression .)
    TYPEOF          reduce using rule 69 (expression -> expression GTE expression .)
    IF              reduce using rule 69 (expression -> expression GTE expression .)
    WHILE           reduce using rule 69 (expression -> expression GTE expression .)
    FOR             reduce using rule 69 (expression -> expression GTE expression .)
    FUNCTION        reduce using rule 69 (expression -> expression GTE expression .)
    NUMBER          reduce using rule 69 (expression -> expression GTE expression .)
    STRING          reduce using rule 69 (expression -> expression GTE expression .)
    UNDEFINED       reduce using rule 69 (expression -> expression GTE expression .)
    $end            reduce using rule 69 (expression -> expression GTE expression .)
    RIGHTBRACE      reduce using rule 69 (expression -> expression GTE expression .)
    RIGHTPAREN      reduce using rule 69 (expression -> expression GTE expression .)
    ELSE            reduce using rule 69 (expression -> expression GTE expression .)
    LEFTBRACE       reduce using rule 69 (expression -> expression GTE expression .)
    RIGHTBRACKET    reduce using rule 69 (expression -> expression GTE expression .)
    COMMA           reduce using rule 69 (expression -> expression GTE expression .)
    PLUS            shift and go to state 92
    MINUS           shift and go to state 86
    INTO            shift and go to state 97
    DIVIDE          shift and go to state 96
    MOD             shift and go to state 103
    EXPO            shift and go to state 93
    LSHIFT          shift and go to state 85
    RSHIFT          shift and go to state 82
    URSHIFT         shift and go to state 101

  ! PLUS            [ reduce using rule 69 (expression -> expression GTE expression .) ]
  ! MINUS           [ reduce using rule 69 (expression -> expression GTE expression .) ]
  ! INTO            [ reduce using rule 69 (expression -> expression GTE expression .) ]
  ! DIVIDE          [ reduce using rule 69 (expression -> expression GTE expression .) ]
  ! MOD             [ reduce using rule 69 (expression -> expression GTE expression .) ]
  ! EXPO            [ reduce using rule 69 (expression -> expression GTE expression .) ]
  ! LSHIFT          [ reduce using rule 69 (expression -> expression GTE expression .) ]
  ! RSHIFT          [ reduce using rule 69 (expression -> expression GTE expression .) ]
  ! URSHIFT         [ reduce using rule 69 (expression -> expression GTE expression .) ]
  ! BINAND          [ shift and go to state 88 ]
  ! BINOR           [ shift and go to state 100 ]
  ! BINXOR          [ shift and go to state 94 ]
  ! LT              [ shift and go to state 91 ]
  ! GT              [ shift and go to state 95 ]
  ! DOUBLEEQ        [ shift and go to state 81 ]
  ! NOTEQUAL        [ shift and go to state 83 ]
  ! LTE             [ shift and go to state 98 ]
  ! GTE             [ shift and go to state 87 ]
  ! STREQUAL        [ shift and go to state 90 ]
  ! STRNEQUAL       [ shift and go to state 84 ]
  ! AND             [ shift and go to state 99 ]
  ! OR              [ shift and go to state 102 ]


state 149

    (60) expression -> expression BINAND expression .
    (52) expression -> expression . PLUS expression
    (53) expression -> expression . MINUS expression
    (54) expression -> expression . INTO expression
    (55) expression -> expression . DIVIDE expression
    (56) expression -> expression . MOD expression
    (57) expression -> expression . EXPO expression
    (60) expression -> expression . BINAND expression
    (61) expression -> expression . BINOR expression
    (62) expression -> expression . BINXOR expression
    (64) expression -> expression . LT expression
    (65) expression -> expression . GT expression
    (66) expression -> expression . DOUBLEEQ expression
    (67) expression -> expression . NOTEQUAL expression
    (68) expression -> expression . LTE expression
    (69) expression -> expression . GTE expression
    (70) expression -> expression . STREQUAL expression
    (71) expression -> expression . STRNEQUAL expression
    (72) expression -> expression . AND expression
    (73) expression -> expression . OR expression
    (74) expression -> expression . LSHIFT expression
    (75) expression -> expression . RSHIFT expression
    (76) expression -> expression . URSHIFT expression

    BINAND          reduce using rule 60 (expression -> expression BINAND expression .)
    BINOR           reduce using rule 60 (expression -> expression BINAND expression .)
    BINXOR          reduce using rule 60 (expression -> expression BINAND expression .)
    AND             reduce using rule 60 (expression -> expression BINAND expression .)
    OR              reduce using rule 60 (expression -> expression BINAND expression .)
    SEMICOLON       reduce using rule 60 (expression -> expression BINAND expression .)
    BREAK           reduce using rule 60 (expression -> expression BINAND expression .)
    CONTINUE        reduce using rule 60 (expression -> expression BINAND expression .)
    RETURN          reduce using rule 60 (expression -> expression BINAND expression .)
    CONSOLE         reduce using rule 60 (expression -> expression BINAND expression .)
    VAR             reduce using rule 60 (expression -> expression BINAND expression .)
    LEFTPAREN       reduce using rule 60 (expression -> expression BINAND expression .)
    ID              reduce using rule 60 (expression -> expression BINAND expression .)
    EVAL            reduce using rule 60 (expression -> expression BINAND expression .)
    NOT             reduce using rule 60 (expression -> expression BINAND expression .)
    BINNOT          reduce using rule 60 (expression -> expression BINAND expression .)
    TYPEOF          reduce using rule 60 (expression -> expression BINAND expression .)
    IF              reduce using rule 60 (expression -> expression BINAND expression .)
    WHILE           reduce using rule 60 (expression -> expression BINAND expression .)
    FOR             reduce using rule 60 (expression -> expression BINAND expression .)
    FUNCTION        reduce using rule 60 (expression -> expression BINAND expression .)
    NUMBER          reduce using rule 60 (expression -> expression BINAND expression .)
    STRING          reduce using rule 60 (expression -> expression BINAND expression .)
    UNDEFINED       reduce using rule 60 (expression -> expression BINAND expression .)
    $end            reduce using rule 60 (expression -> expression BINAND expression .)
    RIGHTBRACE      reduce using rule 60 (expression -> expression BINAND expression .)
    RIGHTPAREN      reduce using rule 60 (expression -> expression BINAND expression .)
    ELSE            reduce using rule 60 (expression -> expression BINAND expression .)
    LEFTBRACE       reduce using rule 60 (expression -> expression BINAND expression .)
    RIGHTBRACKET    reduce using rule 60 (expression -> expression BINAND expression .)
    COMMA           reduce using rule 60 (expression -> expression BINAND expression .)
    PLUS            shift and go to state 92
    MINUS           shift and go to state 86
    INTO            shift and go to state 97
    DIVIDE          shift and go to state 96
    MOD             shift and go to state 103
    EXPO            shift and go to state 93
    LT              shift and go to state 91
    GT              shift and go to state 95
    DOUBLEEQ        shift and go to state 81
    NOTEQUAL        shift and go to state 83
    LTE             shift and go to state 98
    GTE             shift and go to state 87
    STREQUAL        shift and go to state 90
    STRNEQUAL       shift and go to state 84
    LSHIFT          shift and go to state 85
    RSHIFT          shift and go to state 82
    URSHIFT         shift and go to state 101

  ! PLUS            [ reduce using rule 60 (expression -> expression BINAND expression .) ]
  ! MINUS           [ reduce using rule 60 (expression -> expression BINAND expression .) ]
  ! INTO            [ reduce using rule 60 (expression -> expression BINAND expression .) ]
  ! DIVIDE          [ reduce using rule 60 (expression -> expression BINAND expression .) ]
  ! MOD             [ reduce using rule 60 (expression -> expression BINAND expression .) ]
  ! EXPO            [ reduce using rule 60 (expression -> expression BINAND expression .) ]
  ! LT              [ reduce using rule 60 (expression -> expression BINAND expression .) ]
  ! GT              [ reduce using rule 60 (expression -> expression BINAND expression .) ]
  ! DOUBLEEQ        [ reduce using rule 60 (expression -> expression BINAND expression .) ]
  ! NOTEQUAL        [ reduce using rule 60 (expression -> expression BINAND expression .) ]
  ! LTE             [ reduce using rule 60 (expression -> expression BINAND expression .) ]
  ! GTE             [ reduce using rule 60 (expression -> expression BINAND expression .) ]
  ! STREQUAL        [ reduce using rule 60 (expression -> expression BINAND expression .) ]
  ! STRNEQUAL       [ reduce using rule 60 (expression -> expression BINAND expression .) ]
  ! LSHIFT          [ reduce using rule 60 (expression -> expression BINAND expression .) ]
  ! RSHIFT          [ reduce using rule 60 (expression -> expression BINAND expression .) ]
  ! URSHIFT         [ reduce using rule 60 (expression -> expression BINAND expression .) ]
  ! BINAND          [ shift and go to state 88 ]
  ! BINOR           [ shift and go to state 100 ]
  ! BINXOR          [ shift and go to state 94 ]
  ! AND             [ shift and go to state 99 ]
  ! OR              [ shift and go to state 102 ]


state 150

    (70) expression -> expression STREQUAL expression .
    (52) expression -> expression . PLUS expression
    (53) expression -> expression . MINUS expression
    (54) expression -> expression . INTO expression
    (55) expression -> expression . DIVIDE expression
    (56) expression -> expression . MOD expression
    (57) expression -> expression . EXPO expression
    (60) expression -> expression . BINAND expression
    (61) expression -> expression . BINOR expression
    (62) expression -> expression . BINXOR expression
    (64) expression -> expression . LT expression
    (65) expression -> expression . GT expression
    (66) expression -> expression . DOUBLEEQ expression
    (67) expression -> expression . NOTEQUAL expression
    (68) expression -> expression . LTE expression
    (69) expression -> expression . GTE expression
    (70) expression -> expression . STREQUAL expression
    (71) expression -> expression . STRNEQUAL expression
    (72) expression -> expression . AND expression
    (73) expression -> expression . OR expression
    (74) expression -> expression . LSHIFT expression
    (75) expression -> expression . RSHIFT expression
    (76) expression -> expression . URSHIFT expression

    BINAND          reduce using rule 70 (expression -> expression STREQUAL expression .)
    BINOR           reduce using rule 70 (expression -> expression STREQUAL expression .)
    BINXOR          reduce using rule 70 (expression -> expression STREQUAL expression .)
    DOUBLEEQ        reduce using rule 70 (expression -> expression STREQUAL expression .)
    NOTEQUAL        reduce using rule 70 (expression -> expression STREQUAL expression .)
    STREQUAL        reduce using rule 70 (expression -> expression STREQUAL expression .)
    STRNEQUAL       reduce using rule 70 (expression -> expression STREQUAL expression .)
    AND             reduce using rule 70 (expression -> expression STREQUAL expression .)
    OR              reduce using rule 70 (expression -> expression STREQUAL expression .)
    SEMICOLON       reduce using rule 70 (expression -> expression STREQUAL expression .)
    BREAK           reduce using rule 70 (expression -> expression STREQUAL expression .)
    CONTINUE        reduce using rule 70 (expression -> expression STREQUAL expression .)
    RETURN          reduce using rule 70 (expression -> expression STREQUAL expression .)
    CONSOLE         reduce using rule 70 (expression -> expression STREQUAL expression .)
    VAR             reduce using rule 70 (expression -> expression STREQUAL expression .)
    LEFTPAREN       reduce using rule 70 (expression -> expression STREQUAL expression .)
    ID              reduce using rule 70 (expression -> expression STREQUAL expression .)
    EVAL            reduce using rule 70 (expression -> expression STREQUAL expression .)
    NOT             reduce using rule 70 (expression -> expression STREQUAL expression .)
    BINNOT          reduce using rule 70 (expression -> expression STREQUAL expression .)
    TYPEOF          reduce using rule 70 (expression -> expression STREQUAL expression .)
    IF              reduce using rule 70 (expression -> expression STREQUAL expression .)
    WHILE           reduce using rule 70 (expression -> expression STREQUAL expression .)
    FOR             reduce using rule 70 (expression -> expression STREQUAL expression .)
    FUNCTION        reduce using rule 70 (expression -> expression STREQUAL expression .)
    NUMBER          reduce using rule 70 (expression -> expression STREQUAL expression .)
    STRING          reduce using rule 70 (expression -> expression STREQUAL expression .)
    UNDEFINED       reduce using rule 70 (expression -> expression STREQUAL expression .)
    $end            reduce using rule 70 (expression -> expression STREQUAL expression .)
    RIGHTBRACE      reduce using rule 70 (expression -> expression STREQUAL expression .)
    RIGHTPAREN      reduce using rule 70 (expression -> expression STREQUAL expression .)
    ELSE            reduce using rule 70 (expression -> expression STREQUAL expression .)
    LEFTBRACE       reduce using rule 70 (expression -> expression STREQUAL expression .)
    RIGHTBRACKET    reduce using rule 70 (expression -> expression STREQUAL expression .)
    COMMA           reduce using rule 70 (expression -> expression STREQUAL expression .)
    PLUS            shift and go to state 92
    MINUS           shift and go to state 86
    INTO            shift and go to state 97
    DIVIDE          shift and go to state 96
    MOD             shift and go to state 103
    EXPO            shift and go to state 93
    LT              shift and go to state 91
    GT              shift and go to state 95
    LTE             shift and go to state 98
    GTE             shift and go to state 87
    LSHIFT          shift and go to state 85
    RSHIFT          shift and go to state 82
    URSHIFT         shift and go to state 101

  ! PLUS            [ reduce using rule 70 (expression -> expression STREQUAL expression .) ]
  ! MINUS           [ reduce using rule 70 (expression -> expression STREQUAL expression .) ]
  ! INTO            [ reduce using rule 70 (expression -> expression STREQUAL expression .) ]
  ! DIVIDE          [ reduce using rule 70 (expression -> expression STREQUAL expression .) ]
  ! MOD             [ reduce using rule 70 (expression -> expression STREQUAL expression .) ]
  ! EXPO            [ reduce using rule 70 (expression -> expression STREQUAL expression .) ]
  ! LT              [ reduce using rule 70 (expression -> expression STREQUAL expression .) ]
  ! GT              [ reduce using rule 70 (expression -> expression STREQUAL expression .) ]
  ! LTE             [ reduce using rule 70 (expression -> expression STREQUAL expression .) ]
  ! GTE             [ reduce using rule 70 (expression -> expression STREQUAL expression .) ]
  ! LSHIFT          [ reduce using rule 70 (expression -> expression STREQUAL expression .) ]
  ! RSHIFT          [ reduce using rule 70 (expression -> expression STREQUAL expression .) ]
  ! URSHIFT         [ reduce using rule 70 (expression -> expression STREQUAL expression .) ]
  ! BINAND          [ shift and go to state 88 ]
  ! BINOR           [ shift and go to state 100 ]
  ! BINXOR          [ shift and go to state 94 ]
  ! DOUBLEEQ        [ shift and go to state 81 ]
  ! NOTEQUAL        [ shift and go to state 83 ]
  ! STREQUAL        [ shift and go to state 90 ]
  ! STRNEQUAL       [ shift and go to state 84 ]
  ! AND             [ shift and go to state 99 ]
  ! OR              [ shift and go to state 102 ]


state 151

    (64) expression -> expression LT expression .
    (52) expression -> expression . PLUS expression
    (53) expression -> expression . MINUS expression
    (54) expression -> expression . INTO expression
    (55) expression -> expression . DIVIDE expression
    (56) expression -> expression . MOD expression
    (57) expression -> expression . EXPO expression
    (60) expression -> expression . BINAND expression
    (61) expression -> expression . BINOR expression
    (62) expression -> expression . BINXOR expression
    (64) expression -> expression . LT expression
    (65) expression -> expression . GT expression
    (66) expression -> expression . DOUBLEEQ expression
    (67) expression -> expression . NOTEQUAL expression
    (68) expression -> expression . LTE expression
    (69) expression -> expression . GTE expression
    (70) expression -> expression . STREQUAL expression
    (71) expression -> expression . STRNEQUAL expression
    (72) expression -> expression . AND expression
    (73) expression -> expression . OR expression
    (74) expression -> expression . LSHIFT expression
    (75) expression -> expression . RSHIFT expression
    (76) expression -> expression . URSHIFT expression

    BINAND          reduce using rule 64 (expression -> expression LT expression .)
    BINOR           reduce using rule 64 (expression -> expression LT expression .)
    BINXOR          reduce using rule 64 (expression -> expression LT expression .)
    LT              reduce using rule 64 (expression -> expression LT expression .)
    GT              reduce using rule 64 (expression -> expression LT expression .)
    DOUBLEEQ        reduce using rule 64 (expression -> expression LT expression .)
    NOTEQUAL        reduce using rule 64 (expression -> expression LT expression .)
    LTE             reduce using rule 64 (expression -> expression LT expression .)
    GTE             reduce using rule 64 (expression -> expression LT expression .)
    STREQUAL        reduce using rule 64 (expression -> expression LT expression .)
    STRNEQUAL       reduce using rule 64 (expression -> expression LT expression .)
    AND             reduce using rule 64 (expression -> expression LT expression .)
    OR              reduce using rule 64 (expression -> expression LT expression .)
    SEMICOLON       reduce using rule 64 (expression -> expression LT expression .)
    BREAK           reduce using rule 64 (expression -> expression LT expression .)
    CONTINUE        reduce using rule 64 (expression -> expression LT expression .)
    RETURN          reduce using rule 64 (expression -> expression LT expression .)
    CONSOLE         reduce using rule 64 (expression -> expression LT expression .)
    VAR             reduce using rule 64 (expression -> expression LT expression .)
    LEFTPAREN       reduce using rule 64 (expression -> expression LT expression .)
    ID              reduce using rule 64 (expression -> expression LT expression .)
    EVAL            reduce using rule 64 (expression -> expression LT expression .)
    NOT             reduce using rule 64 (expression -> expression LT expression .)
    BINNOT          reduce using rule 64 (expression -> expression LT expression .)
    TYPEOF          reduce using rule 64 (expression -> expression LT expression .)
    IF              reduce using rule 64 (expression -> expression LT expression .)
    WHILE           reduce using rule 64 (expression -> expression LT expression .)
    FOR             reduce using rule 64 (expression -> expression LT expression .)
    FUNCTION        reduce using rule 64 (expression -> expression LT expression .)
    NUMBER          reduce using rule 64 (expression -> expression LT expression .)
    STRING          reduce using rule 64 (expression -> expression LT expression .)
    UNDEFINED       reduce using rule 64 (expression -> expression LT expression .)
    $end            reduce using rule 64 (expression -> expression LT expression .)
    RIGHTBRACE      reduce using rule 64 (expression -> expression LT expression .)
    RIGHTPAREN      reduce using rule 64 (expression -> expression LT expression .)
    ELSE            reduce using rule 64 (expression -> expression LT expression .)
    LEFTBRACE       reduce using rule 64 (expression -> expression LT expression .)
    RIGHTBRACKET    reduce using rule 64 (expression -> expression LT expression .)
    COMMA           reduce using rule 64 (expression -> expression LT expression .)
    PLUS            shift and go to state 92
    MINUS           shift and go to state 86
    INTO            shift and go to state 97
    DIVIDE          shift and go to state 96
    MOD             shift and go to state 103
    EXPO            shift and go to state 93
    LSHIFT          shift and go to state 85
    RSHIFT          shift and go to state 82
    URSHIFT         shift and go to state 101

  ! PLUS            [ reduce using rule 64 (expression -> expression LT expression .) ]
  ! MINUS           [ reduce using rule 64 (expression -> expression LT expression .) ]
  ! INTO            [ reduce using rule 64 (expression -> expression LT expression .) ]
  ! DIVIDE          [ reduce using rule 64 (expression -> expression LT expression .) ]
  ! MOD             [ reduce using rule 64 (expression -> expression LT expression .) ]
  ! EXPO            [ reduce using rule 64 (expression -> expression LT expression .) ]
  ! LSHIFT          [ reduce using rule 64 (expression -> expression LT expression .) ]
  ! RSHIFT          [ reduce using rule 64 (expression -> expression LT expression .) ]
  ! URSHIFT         [ reduce using rule 64 (expression -> expression LT expression .) ]
  ! BINAND          [ shift and go to state 88 ]
  ! BINOR           [ shift and go to state 100 ]
  ! BINXOR          [ shift and go to state 94 ]
  ! LT              [ shift and go to state 91 ]
  ! GT              [ shift and go to state 95 ]
  ! DOUBLEEQ        [ shift and go to state 81 ]
  ! NOTEQUAL        [ shift and go to state 83 ]
  ! LTE             [ shift and go to state 98 ]
  ! GTE             [ shift and go to state 87 ]
  ! STREQUAL        [ shift and go to state 90 ]
  ! STRNEQUAL       [ shift and go to state 84 ]
  ! AND             [ shift and go to state 99 ]
  ! OR              [ shift and go to state 102 ]


state 152

    (52) expression -> expression PLUS expression .
    (52) expression -> expression . PLUS expression
    (53) expression -> expression . MINUS expression
    (54) expression -> expression . INTO expression
    (55) expression -> expression . DIVIDE expression
    (56) expression -> expression . MOD expression
    (57) expression -> expression . EXPO expression
    (60) expression -> expression . BINAND expression
    (61) expression -> expression . BINOR expression
    (62) expression -> expression . BINXOR expression
    (64) expression -> expression . LT expression
    (65) expression -> expression . GT expression
    (66) expression -> expression . DOUBLEEQ expression
    (67) expression -> expression . NOTEQUAL expression
    (68) expression -> expression . LTE expression
    (69) expression -> expression . GTE expression
    (70) expression -> expression . STREQUAL expression
    (71) expression -> expression . STRNEQUAL expression
    (72) expression -> expression . AND expression
    (73) expression -> expression . OR expression
    (74) expression -> expression . LSHIFT expression
    (75) expression -> expression . RSHIFT expression
    (76) expression -> expression . URSHIFT expression

    PLUS            reduce using rule 52 (expression -> expression PLUS expression .)
    MINUS           reduce using rule 52 (expression -> expression PLUS expression .)
    BINAND          reduce using rule 52 (expression -> expression PLUS expression .)
    BINOR           reduce using rule 52 (expression -> expression PLUS expression .)
    BINXOR          reduce using rule 52 (expression -> expression PLUS expression .)
    LT              reduce using rule 52 (expression -> expression PLUS expression .)
    GT              reduce using rule 52 (expression -> expression PLUS expression .)
    DOUBLEEQ        reduce using rule 52 (expression -> expression PLUS expression .)
    NOTEQUAL        reduce using rule 52 (expression -> expression PLUS expression .)
    LTE             reduce using rule 52 (expression -> expression PLUS expression .)
    GTE             reduce using rule 52 (expression -> expression PLUS expression .)
    STREQUAL        reduce using rule 52 (expression -> expression PLUS expression .)
    STRNEQUAL       reduce using rule 52 (expression -> expression PLUS expression .)
    AND             reduce using rule 52 (expression -> expression PLUS expression .)
    OR              reduce using rule 52 (expression -> expression PLUS expression .)
    LSHIFT          reduce using rule 52 (expression -> expression PLUS expression .)
    RSHIFT          reduce using rule 52 (expression -> expression PLUS expression .)
    URSHIFT         reduce using rule 52 (expression -> expression PLUS expression .)
    SEMICOLON       reduce using rule 52 (expression -> expression PLUS expression .)
    BREAK           reduce using rule 52 (expression -> expression PLUS expression .)
    CONTINUE        reduce using rule 52 (expression -> expression PLUS expression .)
    RETURN          reduce using rule 52 (expression -> expression PLUS expression .)
    CONSOLE         reduce using rule 52 (expression -> expression PLUS expression .)
    VAR             reduce using rule 52 (expression -> expression PLUS expression .)
    LEFTPAREN       reduce using rule 52 (expression -> expression PLUS expression .)
    ID              reduce using rule 52 (expression -> expression PLUS expression .)
    EVAL            reduce using rule 52 (expression -> expression PLUS expression .)
    NOT             reduce using rule 52 (expression -> expression PLUS expression .)
    BINNOT          reduce using rule 52 (expression -> expression PLUS expression .)
    TYPEOF          reduce using rule 52 (expression -> expression PLUS expression .)
    IF              reduce using rule 52 (expression -> expression PLUS expression .)
    WHILE           reduce using rule 52 (expression -> expression PLUS expression .)
    FOR             reduce using rule 52 (expression -> expression PLUS expression .)
    FUNCTION        reduce using rule 52 (expression -> expression PLUS expression .)
    NUMBER          reduce using rule 52 (expression -> expression PLUS expression .)
    STRING          reduce using rule 52 (expression -> expression PLUS expression .)
    UNDEFINED       reduce using rule 52 (expression -> expression PLUS expression .)
    $end            reduce using rule 52 (expression -> expression PLUS expression .)
    RIGHTBRACE      reduce using rule 52 (expression -> expression PLUS expression .)
    RIGHTPAREN      reduce using rule 52 (expression -> expression PLUS expression .)
    ELSE            reduce using rule 52 (expression -> expression PLUS expression .)
    LEFTBRACE       reduce using rule 52 (expression -> expression PLUS expression .)
    RIGHTBRACKET    reduce using rule 52 (expression -> expression PLUS expression .)
    COMMA           reduce using rule 52 (expression -> expression PLUS expression .)
    INTO            shift and go to state 97
    DIVIDE          shift and go to state 96
    MOD             shift and go to state 103
    EXPO            shift and go to state 93

  ! INTO            [ reduce using rule 52 (expression -> expression PLUS expression .) ]
  ! DIVIDE          [ reduce using rule 52 (expression -> expression PLUS expression .) ]
  ! MOD             [ reduce using rule 52 (expression -> expression PLUS expression .) ]
  ! EXPO            [ reduce using rule 52 (expression -> expression PLUS expression .) ]
  ! PLUS            [ shift and go to state 92 ]
  ! MINUS           [ shift and go to state 86 ]
  ! BINAND          [ shift and go to state 88 ]
  ! BINOR           [ shift and go to state 100 ]
  ! BINXOR          [ shift and go to state 94 ]
  ! LT              [ shift and go to state 91 ]
  ! GT              [ shift and go to state 95 ]
  ! DOUBLEEQ        [ shift and go to state 81 ]
  ! NOTEQUAL        [ shift and go to state 83 ]
  ! LTE             [ shift and go to state 98 ]
  ! GTE             [ shift and go to state 87 ]
  ! STREQUAL        [ shift and go to state 90 ]
  ! STRNEQUAL       [ shift and go to state 84 ]
  ! AND             [ shift and go to state 99 ]
  ! OR              [ shift and go to state 102 ]
  ! LSHIFT          [ shift and go to state 85 ]
  ! RSHIFT          [ shift and go to state 82 ]
  ! URSHIFT         [ shift and go to state 101 ]


state 153

    (57) expression -> expression EXPO expression .
    (52) expression -> expression . PLUS expression
    (53) expression -> expression . MINUS expression
    (54) expression -> expression . INTO expression
    (55) expression -> expression . DIVIDE expression
    (56) expression -> expression . MOD expression
    (57) expression -> expression . EXPO expression
    (60) expression -> expression . BINAND expression
    (61) expression -> expression . BINOR expression
    (62) expression -> expression . BINXOR expression
    (64) expression -> expression . LT expression
    (65) expression -> expression . GT expression
    (66) expression -> expression . DOUBLEEQ expression
    (67) expression -> expression . NOTEQUAL expression
    (68) expression -> expression . LTE expression
    (69) expression -> expression . GTE expression
    (70) expression -> expression . STREQUAL expression
    (71) expression -> expression . STRNEQUAL expression
    (72) expression -> expression . AND expression
    (73) expression -> expression . OR expression
    (74) expression -> expression . LSHIFT expression
    (75) expression -> expression . RSHIFT expression
    (76) expression -> expression . URSHIFT expression

    PLUS            reduce using rule 57 (expression -> expression EXPO expression .)
    MINUS           reduce using rule 57 (expression -> expression EXPO expression .)
    INTO            reduce using rule 57 (expression -> expression EXPO expression .)
    DIVIDE          reduce using rule 57 (expression -> expression EXPO expression .)
    MOD             reduce using rule 57 (expression -> expression EXPO expression .)
    BINAND          reduce using rule 57 (expression -> expression EXPO expression .)
    BINOR           reduce using rule 57 (expression -> expression EXPO expression .)
    BINXOR          reduce using rule 57 (expression -> expression EXPO expression .)
    LT              reduce using rule 57 (expression -> expression EXPO expression .)
    GT              reduce using rule 57 (expression -> expression EXPO expression .)
    DOUBLEEQ        reduce using rule 57 (expression -> expression EXPO expression .)
    NOTEQUAL        reduce using rule 57 (expression -> expression EXPO expression .)
    LTE             reduce using rule 57 (expression -> expression EXPO expression .)
    GTE             reduce using rule 57 (expression -> expression EXPO expression .)
    STREQUAL        reduce using rule 57 (expression -> expression EXPO expression .)
    STRNEQUAL       reduce using rule 57 (expression -> expression EXPO expression .)
    AND             reduce using rule 57 (expression -> expression EXPO expression .)
    OR              reduce using rule 57 (expression -> expression EXPO expression .)
    LSHIFT          reduce using rule 57 (expression -> expression EXPO expression .)
    RSHIFT          reduce using rule 57 (expression -> expression EXPO expression .)
    URSHIFT         reduce using rule 57 (expression -> expression EXPO expression .)
    SEMICOLON       reduce using rule 57 (expression -> expression EXPO expression .)
    BREAK           reduce using rule 57 (expression -> expression EXPO expression .)
    CONTINUE        reduce using rule 57 (expression -> expression EXPO expression .)
    RETURN          reduce using rule 57 (expression -> expression EXPO expression .)
    CONSOLE         reduce using rule 57 (expression -> expression EXPO expression .)
    VAR             reduce using rule 57 (expression -> expression EXPO expression .)
    LEFTPAREN       reduce using rule 57 (expression -> expression EXPO expression .)
    ID              reduce using rule 57 (expression -> expression EXPO expression .)
    EVAL            reduce using rule 57 (expression -> expression EXPO expression .)
    NOT             reduce using rule 57 (expression -> expression EXPO expression .)
    BINNOT          reduce using rule 57 (expression -> expression EXPO expression .)
    TYPEOF          reduce using rule 57 (expression -> expression EXPO expression .)
    IF              reduce using rule 57 (expression -> expression EXPO expression .)
    WHILE           reduce using rule 57 (expression -> expression EXPO expression .)
    FOR             reduce using rule 57 (expression -> expression EXPO expression .)
    FUNCTION        reduce using rule 57 (expression -> expression EXPO expression .)
    NUMBER          reduce using rule 57 (expression -> expression EXPO expression .)
    STRING          reduce using rule 57 (expression -> expression EXPO expression .)
    UNDEFINED       reduce using rule 57 (expression -> expression EXPO expression .)
    $end            reduce using rule 57 (expression -> expression EXPO expression .)
    RIGHTBRACE      reduce using rule 57 (expression -> expression EXPO expression .)
    RIGHTPAREN      reduce using rule 57 (expression -> expression EXPO expression .)
    ELSE            reduce using rule 57 (expression -> expression EXPO expression .)
    LEFTBRACE       reduce using rule 57 (expression -> expression EXPO expression .)
    RIGHTBRACKET    reduce using rule 57 (expression -> expression EXPO expression .)
    COMMA           reduce using rule 57 (expression -> expression EXPO expression .)
    EXPO            shift and go to state 93

  ! EXPO            [ reduce using rule 57 (expression -> expression EXPO expression .) ]
  ! PLUS            [ shift and go to state 92 ]
  ! MINUS           [ shift and go to state 86 ]
  ! INTO            [ shift and go to state 97 ]
  ! DIVIDE          [ shift and go to state 96 ]
  ! MOD             [ shift and go to state 103 ]
  ! BINAND          [ shift and go to state 88 ]
  ! BINOR           [ shift and go to state 100 ]
  ! BINXOR          [ shift and go to state 94 ]
  ! LT              [ shift and go to state 91 ]
  ! GT              [ shift and go to state 95 ]
  ! DOUBLEEQ        [ shift and go to state 81 ]
  ! NOTEQUAL        [ shift and go to state 83 ]
  ! LTE             [ shift and go to state 98 ]
  ! GTE             [ shift and go to state 87 ]
  ! STREQUAL        [ shift and go to state 90 ]
  ! STRNEQUAL       [ shift and go to state 84 ]
  ! AND             [ shift and go to state 99 ]
  ! OR              [ shift and go to state 102 ]
  ! LSHIFT          [ shift and go to state 85 ]
  ! RSHIFT          [ shift and go to state 82 ]
  ! URSHIFT         [ shift and go to state 101 ]


state 154

    (62) expression -> expression BINXOR expression .
    (52) expression -> expression . PLUS expression
    (53) expression -> expression . MINUS expression
    (54) expression -> expression . INTO expression
    (55) expression -> expression . DIVIDE expression
    (56) expression -> expression . MOD expression
    (57) expression -> expression . EXPO expression
    (60) expression -> expression . BINAND expression
    (61) expression -> expression . BINOR expression
    (62) expression -> expression . BINXOR expression
    (64) expression -> expression . LT expression
    (65) expression -> expression . GT expression
    (66) expression -> expression . DOUBLEEQ expression
    (67) expression -> expression . NOTEQUAL expression
    (68) expression -> expression . LTE expression
    (69) expression -> expression . GTE expression
    (70) expression -> expression . STREQUAL expression
    (71) expression -> expression . STRNEQUAL expression
    (72) expression -> expression . AND expression
    (73) expression -> expression . OR expression
    (74) expression -> expression . LSHIFT expression
    (75) expression -> expression . RSHIFT expression
    (76) expression -> expression . URSHIFT expression

    BINOR           reduce using rule 62 (expression -> expression BINXOR expression .)
    BINXOR          reduce using rule 62 (expression -> expression BINXOR expression .)
    AND             reduce using rule 62 (expression -> expression BINXOR expression .)
    OR              reduce using rule 62 (expression -> expression BINXOR expression .)
    SEMICOLON       reduce using rule 62 (expression -> expression BINXOR expression .)
    BREAK           reduce using rule 62 (expression -> expression BINXOR expression .)
    CONTINUE        reduce using rule 62 (expression -> expression BINXOR expression .)
    RETURN          reduce using rule 62 (expression -> expression BINXOR expression .)
    CONSOLE         reduce using rule 62 (expression -> expression BINXOR expression .)
    VAR             reduce using rule 62 (expression -> expression BINXOR expression .)
    LEFTPAREN       reduce using rule 62 (expression -> expression BINXOR expression .)
    ID              reduce using rule 62 (expression -> expression BINXOR expression .)
    EVAL            reduce using rule 62 (expression -> expression BINXOR expression .)
    NOT             reduce using rule 62 (expression -> expression BINXOR expression .)
    BINNOT          reduce using rule 62 (expression -> expression BINXOR expression .)
    TYPEOF          reduce using rule 62 (expression -> expression BINXOR expression .)
    IF              reduce using rule 62 (expression -> expression BINXOR expression .)
    WHILE           reduce using rule 62 (expression -> expression BINXOR expression .)
    FOR             reduce using rule 62 (expression -> expression BINXOR expression .)
    FUNCTION        reduce using rule 62 (expression -> expression BINXOR expression .)
    NUMBER          reduce using rule 62 (expression -> expression BINXOR expression .)
    STRING          reduce using rule 62 (expression -> expression BINXOR expression .)
    UNDEFINED       reduce using rule 62 (expression -> expression BINXOR expression .)
    $end            reduce using rule 62 (expression -> expression BINXOR expression .)
    RIGHTBRACE      reduce using rule 62 (expression -> expression BINXOR expression .)
    RIGHTPAREN      reduce using rule 62 (expression -> expression BINXOR expression .)
    ELSE            reduce using rule 62 (expression -> expression BINXOR expression .)
    LEFTBRACE       reduce using rule 62 (expression -> expression BINXOR expression .)
    RIGHTBRACKET    reduce using rule 62 (expression -> expression BINXOR expression .)
    COMMA           reduce using rule 62 (expression -> expression BINXOR expression .)
    PLUS            shift and go to state 92
    MINUS           shift and go to state 86
    INTO            shift and go to state 97
    DIVIDE          shift and go to state 96
    MOD             shift and go to state 103
    EXPO            shift and go to state 93
    BINAND          shift and go to state 88
    LT              shift and go to state 91
    GT              shift and go to state 95
    DOUBLEEQ        shift and go to state 81
    NOTEQUAL        shift and go to state 83
    LTE             shift and go to state 98
    GTE             shift and go to state 87
    STREQUAL        shift and go to state 90
    STRNEQUAL       shift and go to state 84
    LSHIFT          shift and go to state 85
    RSHIFT          shift and go to state 82
    URSHIFT         shift and go to state 101

  ! PLUS            [ reduce using rule 62 (expression -> expression BINXOR expression .) ]
  ! MINUS           [ reduce using rule 62 (expression -> expression BINXOR expression .) ]
  ! INTO            [ reduce using rule 62 (expression -> expression BINXOR expression .) ]
  ! DIVIDE          [ reduce using rule 62 (expression -> expression BINXOR expression .) ]
  ! MOD             [ reduce using rule 62 (expression -> expression BINXOR expression .) ]
  ! EXPO            [ reduce using rule 62 (expression -> expression BINXOR expression .) ]
  ! BINAND          [ reduce using rule 62 (expression -> expression BINXOR expression .) ]
  ! LT              [ reduce using rule 62 (expression -> expression BINXOR expression .) ]
  ! GT              [ reduce using rule 62 (expression -> expression BINXOR expression .) ]
  ! DOUBLEEQ        [ reduce using rule 62 (expression -> expression BINXOR expression .) ]
  ! NOTEQUAL        [ reduce using rule 62 (expression -> expression BINXOR expression .) ]
  ! LTE             [ reduce using rule 62 (expression -> expression BINXOR expression .) ]
  ! GTE             [ reduce using rule 62 (expression -> expression BINXOR expression .) ]
  ! STREQUAL        [ reduce using rule 62 (expression -> expression BINXOR expression .) ]
  ! STRNEQUAL       [ reduce using rule 62 (expression -> expression BINXOR expression .) ]
  ! LSHIFT          [ reduce using rule 62 (expression -> expression BINXOR expression .) ]
  ! RSHIFT          [ reduce using rule 62 (expression -> expression BINXOR expression .) ]
  ! URSHIFT         [ reduce using rule 62 (expression -> expression BINXOR expression .) ]
  ! BINOR           [ shift and go to state 100 ]
  ! BINXOR          [ shift and go to state 94 ]
  ! AND             [ shift and go to state 99 ]
  ! OR              [ shift and go to state 102 ]


state 155

    (65) expression -> expression GT expression .
    (52) expression -> expression . PLUS expression
    (53) expression -> expression . MINUS expression
    (54) expression -> expression . INTO expression
    (55) expression -> expression . DIVIDE expression
    (56) expression -> expression . MOD expression
    (57) expression -> expression . EXPO expression
    (60) expression -> expression . BINAND expression
    (61) expression -> expression . BINOR expression
    (62) expression -> expression . BINXOR expression
    (64) expression -> expression . LT expression
    (65) expression -> expression . GT expression
    (66) expression -> expression . DOUBLEEQ expression
    (67) expression -> expression . NOTEQUAL expression
    (68) expression -> expression . LTE expression
    (69) expression -> expression . GTE expression
    (70) expression -> expression . STREQUAL expression
    (71) expression -> expression . STRNEQUAL expression
    (72) expression -> expression . AND expression
    (73) expression -> expression . OR expression
    (74) expression -> expression . LSHIFT expression
    (75) expression -> expression . RSHIFT expression
    (76) expression -> expression . URSHIFT expression

    BINAND          reduce using rule 65 (expression -> expression GT expression .)
    BINOR           reduce using rule 65 (expression -> expression GT expression .)
    BINXOR          reduce using rule 65 (expression -> expression GT expression .)
    LT              reduce using rule 65 (expression -> expression GT expression .)
    GT              reduce using rule 65 (expression -> expression GT expression .)
    DOUBLEEQ        reduce using rule 65 (expression -> expression GT expression .)
    NOTEQUAL        reduce using rule 65 (expression -> expression GT expression .)
    LTE             reduce using rule 65 (expression -> expression GT expression .)
    GTE             reduce using rule 65 (expression -> expression GT expression .)
    STREQUAL        reduce using rule 65 (expression -> expression GT expression .)
    STRNEQUAL       reduce using rule 65 (expression -> expression GT expression .)
    AND             reduce using rule 65 (expression -> expression GT expression .)
    OR              reduce using rule 65 (expression -> expression GT expression .)
    SEMICOLON       reduce using rule 65 (expression -> expression GT expression .)
    BREAK           reduce using rule 65 (expression -> expression GT expression .)
    CONTINUE        reduce using rule 65 (expression -> expression GT expression .)
    RETURN          reduce using rule 65 (expression -> expression GT expression .)
    CONSOLE         reduce using rule 65 (expression -> expression GT expression .)
    VAR             reduce using rule 65 (expression -> expression GT expression .)
    LEFTPAREN       reduce using rule 65 (expression -> expression GT expression .)
    ID              reduce using rule 65 (expression -> expression GT expression .)
    EVAL            reduce using rule 65 (expression -> expression GT expression .)
    NOT             reduce using rule 65 (expression -> expression GT expression .)
    BINNOT          reduce using rule 65 (expression -> expression GT expression .)
    TYPEOF          reduce using rule 65 (expression -> expression GT expression .)
    IF              reduce using rule 65 (expression -> expression GT expression .)
    WHILE           reduce using rule 65 (expression -> expression GT expression .)
    FOR             reduce using rule 65 (expression -> expression GT expression .)
    FUNCTION        reduce using rule 65 (expression -> expression GT expression .)
    NUMBER          reduce using rule 65 (expression -> expression GT expression .)
    STRING          reduce using rule 65 (expression -> expression GT expression .)
    UNDEFINED       reduce using rule 65 (expression -> expression GT expression .)
    $end            reduce using rule 65 (expression -> expression GT expression .)
    RIGHTBRACE      reduce using rule 65 (expression -> expression GT expression .)
    RIGHTPAREN      reduce using rule 65 (expression -> expression GT expression .)
    ELSE            reduce using rule 65 (expression -> expression GT expression .)
    LEFTBRACE       reduce using rule 65 (expression -> expression GT expression .)
    RIGHTBRACKET    reduce using rule 65 (expression -> expression GT expression .)
    COMMA           reduce using rule 65 (expression -> expression GT expression .)
    PLUS            shift and go to state 92
    MINUS           shift and go to state 86
    INTO            shift and go to state 97
    DIVIDE          shift and go to state 96
    MOD             shift and go to state 103
    EXPO            shift and go to state 93
    LSHIFT          shift and go to state 85
    RSHIFT          shift and go to state 82
    URSHIFT         shift and go to state 101

  ! PLUS            [ reduce using rule 65 (expression -> expression GT expression .) ]
  ! MINUS           [ reduce using rule 65 (expression -> expression GT expression .) ]
  ! INTO            [ reduce using rule 65 (expression -> expression GT expression .) ]
  ! DIVIDE          [ reduce using rule 65 (expression -> expression GT expression .) ]
  ! MOD             [ reduce using rule 65 (expression -> expression GT expression .) ]
  ! EXPO            [ reduce using rule 65 (expression -> expression GT expression .) ]
  ! LSHIFT          [ reduce using rule 65 (expression -> expression GT expression .) ]
  ! RSHIFT          [ reduce using rule 65 (expression -> expression GT expression .) ]
  ! URSHIFT         [ reduce using rule 65 (expression -> expression GT expression .) ]
  ! BINAND          [ shift and go to state 88 ]
  ! BINOR           [ shift and go to state 100 ]
  ! BINXOR          [ shift and go to state 94 ]
  ! LT              [ shift and go to state 91 ]
  ! GT              [ shift and go to state 95 ]
  ! DOUBLEEQ        [ shift and go to state 81 ]
  ! NOTEQUAL        [ shift and go to state 83 ]
  ! LTE             [ shift and go to state 98 ]
  ! GTE             [ shift and go to state 87 ]
  ! STREQUAL        [ shift and go to state 90 ]
  ! STRNEQUAL       [ shift and go to state 84 ]
  ! AND             [ shift and go to state 99 ]
  ! OR              [ shift and go to state 102 ]


state 156

    (55) expression -> expression DIVIDE expression .
    (52) expression -> expression . PLUS expression
    (53) expression -> expression . MINUS expression
    (54) expression -> expression . INTO expression
    (55) expression -> expression . DIVIDE expression
    (56) expression -> expression . MOD expression
    (57) expression -> expression . EXPO expression
    (60) expression -> expression . BINAND expression
    (61) expression -> expression . BINOR expression
    (62) expression -> expression . BINXOR expression
    (64) expression -> expression . LT expression
    (65) expression -> expression . GT expression
    (66) expression -> expression . DOUBLEEQ expression
    (67) expression -> expression . NOTEQUAL expression
    (68) expression -> expression . LTE expression
    (69) expression -> expression . GTE expression
    (70) expression -> expression . STREQUAL expression
    (71) expression -> expression . STRNEQUAL expression
    (72) expression -> expression . AND expression
    (73) expression -> expression . OR expression
    (74) expression -> expression . LSHIFT expression
    (75) expression -> expression . RSHIFT expression
    (76) expression -> expression . URSHIFT expression

    PLUS            reduce using rule 55 (expression -> expression DIVIDE expression .)
    MINUS           reduce using rule 55 (expression -> expression DIVIDE expression .)
    INTO            reduce using rule 55 (expression -> expression DIVIDE expression .)
    DIVIDE          reduce using rule 55 (expression -> expression DIVIDE expression .)
    MOD             reduce using rule 55 (expression -> expression DIVIDE expression .)
    BINAND          reduce using rule 55 (expression -> expression DIVIDE expression .)
    BINOR           reduce using rule 55 (expression -> expression DIVIDE expression .)
    BINXOR          reduce using rule 55 (expression -> expression DIVIDE expression .)
    LT              reduce using rule 55 (expression -> expression DIVIDE expression .)
    GT              reduce using rule 55 (expression -> expression DIVIDE expression .)
    DOUBLEEQ        reduce using rule 55 (expression -> expression DIVIDE expression .)
    NOTEQUAL        reduce using rule 55 (expression -> expression DIVIDE expression .)
    LTE             reduce using rule 55 (expression -> expression DIVIDE expression .)
    GTE             reduce using rule 55 (expression -> expression DIVIDE expression .)
    STREQUAL        reduce using rule 55 (expression -> expression DIVIDE expression .)
    STRNEQUAL       reduce using rule 55 (expression -> expression DIVIDE expression .)
    AND             reduce using rule 55 (expression -> expression DIVIDE expression .)
    OR              reduce using rule 55 (expression -> expression DIVIDE expression .)
    LSHIFT          reduce using rule 55 (expression -> expression DIVIDE expression .)
    RSHIFT          reduce using rule 55 (expression -> expression DIVIDE expression .)
    URSHIFT         reduce using rule 55 (expression -> expression DIVIDE expression .)
    SEMICOLON       reduce using rule 55 (expression -> expression DIVIDE expression .)
    BREAK           reduce using rule 55 (expression -> expression DIVIDE expression .)
    CONTINUE        reduce using rule 55 (expression -> expression DIVIDE expression .)
    RETURN          reduce using rule 55 (expression -> expression DIVIDE expression .)
    CONSOLE         reduce using rule 55 (expression -> expression DIVIDE expression .)
    VAR             reduce using rule 55 (expression -> expression DIVIDE expression .)
    LEFTPAREN       reduce using rule 55 (expression -> expression DIVIDE expression .)
    ID              reduce using rule 55 (expression -> expression DIVIDE expression .)
    EVAL            reduce using rule 55 (expression -> expression DIVIDE expression .)
    NOT             reduce using rule 55 (expression -> expression DIVIDE expression .)
    BINNOT          reduce using rule 55 (expression -> expression DIVIDE expression .)
    TYPEOF          reduce using rule 55 (expression -> expression DIVIDE expression .)
    IF              reduce using rule 55 (expression -> expression DIVIDE expression .)
    WHILE           reduce using rule 55 (expression -> expression DIVIDE expression .)
    FOR             reduce using rule 55 (expression -> expression DIVIDE expression .)
    FUNCTION        reduce using rule 55 (expression -> expression DIVIDE expression .)
    NUMBER          reduce using rule 55 (expression -> expression DIVIDE expression .)
    STRING          reduce using rule 55 (expression -> expression DIVIDE expression .)
    UNDEFINED       reduce using rule 55 (expression -> expression DIVIDE expression .)
    $end            reduce using rule 55 (expression -> expression DIVIDE expression .)
    RIGHTBRACE      reduce using rule 55 (expression -> expression DIVIDE expression .)
    RIGHTPAREN      reduce using rule 55 (expression -> expression DIVIDE expression .)
    ELSE            reduce using rule 55 (expression -> expression DIVIDE expression .)
    LEFTBRACE       reduce using rule 55 (expression -> expression DIVIDE expression .)
    RIGHTBRACKET    reduce using rule 55 (expression -> expression DIVIDE expression .)
    COMMA           reduce using rule 55 (expression -> expression DIVIDE expression .)
    EXPO            shift and go to state 93

  ! EXPO            [ reduce using rule 55 (expression -> expression DIVIDE expression .) ]
  ! PLUS            [ shift and go to state 92 ]
  ! MINUS           [ shift and go to state 86 ]
  ! INTO            [ shift and go to state 97 ]
  ! DIVIDE          [ shift and go to state 96 ]
  ! MOD             [ shift and go to state 103 ]
  ! BINAND          [ shift and go to state 88 ]
  ! BINOR           [ shift and go to state 100 ]
  ! BINXOR          [ shift and go to state 94 ]
  ! LT              [ shift and go to state 91 ]
  ! GT              [ shift and go to state 95 ]
  ! DOUBLEEQ        [ shift and go to state 81 ]
  ! NOTEQUAL        [ shift and go to state 83 ]
  ! LTE             [ shift and go to state 98 ]
  ! GTE             [ shift and go to state 87 ]
  ! STREQUAL        [ shift and go to state 90 ]
  ! STRNEQUAL       [ shift and go to state 84 ]
  ! AND             [ shift and go to state 99 ]
  ! OR              [ shift and go to state 102 ]
  ! LSHIFT          [ shift and go to state 85 ]
  ! RSHIFT          [ shift and go to state 82 ]
  ! URSHIFT         [ shift and go to state 101 ]


state 157

    (54) expression -> expression INTO expression .
    (52) expression -> expression . PLUS expression
    (53) expression -> expression . MINUS expression
    (54) expression -> expression . INTO expression
    (55) expression -> expression . DIVIDE expression
    (56) expression -> expression . MOD expression
    (57) expression -> expression . EXPO expression
    (60) expression -> expression . BINAND expression
    (61) expression -> expression . BINOR expression
    (62) expression -> expression . BINXOR expression
    (64) expression -> expression . LT expression
    (65) expression -> expression . GT expression
    (66) expression -> expression . DOUBLEEQ expression
    (67) expression -> expression . NOTEQUAL expression
    (68) expression -> expression . LTE expression
    (69) expression -> expression . GTE expression
    (70) expression -> expression . STREQUAL expression
    (71) expression -> expression . STRNEQUAL expression
    (72) expression -> expression . AND expression
    (73) expression -> expression . OR expression
    (74) expression -> expression . LSHIFT expression
    (75) expression -> expression . RSHIFT expression
    (76) expression -> expression . URSHIFT expression

    PLUS            reduce using rule 54 (expression -> expression INTO expression .)
    MINUS           reduce using rule 54 (expression -> expression INTO expression .)
    INTO            reduce using rule 54 (expression -> expression INTO expression .)
    DIVIDE          reduce using rule 54 (expression -> expression INTO expression .)
    MOD             reduce using rule 54 (expression -> expression INTO expression .)
    BINAND          reduce using rule 54 (expression -> expression INTO expression .)
    BINOR           reduce using rule 54 (expression -> expression INTO expression .)
    BINXOR          reduce using rule 54 (expression -> expression INTO expression .)
    LT              reduce using rule 54 (expression -> expression INTO expression .)
    GT              reduce using rule 54 (expression -> expression INTO expression .)
    DOUBLEEQ        reduce using rule 54 (expression -> expression INTO expression .)
    NOTEQUAL        reduce using rule 54 (expression -> expression INTO expression .)
    LTE             reduce using rule 54 (expression -> expression INTO expression .)
    GTE             reduce using rule 54 (expression -> expression INTO expression .)
    STREQUAL        reduce using rule 54 (expression -> expression INTO expression .)
    STRNEQUAL       reduce using rule 54 (expression -> expression INTO expression .)
    AND             reduce using rule 54 (expression -> expression INTO expression .)
    OR              reduce using rule 54 (expression -> expression INTO expression .)
    LSHIFT          reduce using rule 54 (expression -> expression INTO expression .)
    RSHIFT          reduce using rule 54 (expression -> expression INTO expression .)
    URSHIFT         reduce using rule 54 (expression -> expression INTO expression .)
    SEMICOLON       reduce using rule 54 (expression -> expression INTO expression .)
    BREAK           reduce using rule 54 (expression -> expression INTO expression .)
    CONTINUE        reduce using rule 54 (expression -> expression INTO expression .)
    RETURN          reduce using rule 54 (expression -> expression INTO expression .)
    CONSOLE         reduce using rule 54 (expression -> expression INTO expression .)
    VAR             reduce using rule 54 (expression -> expression INTO expression .)
    LEFTPAREN       reduce using rule 54 (expression -> expression INTO expression .)
    ID              reduce using rule 54 (expression -> expression INTO expression .)
    EVAL            reduce using rule 54 (expression -> expression INTO expression .)
    NOT             reduce using rule 54 (expression -> expression INTO expression .)
    BINNOT          reduce using rule 54 (expression -> expression INTO expression .)
    TYPEOF          reduce using rule 54 (expression -> expression INTO expression .)
    IF              reduce using rule 54 (expression -> expression INTO expression .)
    WHILE           reduce using rule 54 (expression -> expression INTO expression .)
    FOR             reduce using rule 54 (expression -> expression INTO expression .)
    FUNCTION        reduce using rule 54 (expression -> expression INTO expression .)
    NUMBER          reduce using rule 54 (expression -> expression INTO expression .)
    STRING          reduce using rule 54 (expression -> expression INTO expression .)
    UNDEFINED       reduce using rule 54 (expression -> expression INTO expression .)
    $end            reduce using rule 54 (expression -> expression INTO expression .)
    RIGHTBRACE      reduce using rule 54 (expression -> expression INTO expression .)
    RIGHTPAREN      reduce using rule 54 (expression -> expression INTO expression .)
    ELSE            reduce using rule 54 (expression -> expression INTO expression .)
    LEFTBRACE       reduce using rule 54 (expression -> expression INTO expression .)
    RIGHTBRACKET    reduce using rule 54 (expression -> expression INTO expression .)
    COMMA           reduce using rule 54 (expression -> expression INTO expression .)
    EXPO            shift and go to state 93

  ! EXPO            [ reduce using rule 54 (expression -> expression INTO expression .) ]
  ! PLUS            [ shift and go to state 92 ]
  ! MINUS           [ shift and go to state 86 ]
  ! INTO            [ shift and go to state 97 ]
  ! DIVIDE          [ shift and go to state 96 ]
  ! MOD             [ shift and go to state 103 ]
  ! BINAND          [ shift and go to state 88 ]
  ! BINOR           [ shift and go to state 100 ]
  ! BINXOR          [ shift and go to state 94 ]
  ! LT              [ shift and go to state 91 ]
  ! GT              [ shift and go to state 95 ]
  ! DOUBLEEQ        [ shift and go to state 81 ]
  ! NOTEQUAL        [ shift and go to state 83 ]
  ! LTE             [ shift and go to state 98 ]
  ! GTE             [ shift and go to state 87 ]
  ! STREQUAL        [ shift and go to state 90 ]
  ! STRNEQUAL       [ shift and go to state 84 ]
  ! AND             [ shift and go to state 99 ]
  ! OR              [ shift and go to state 102 ]
  ! LSHIFT          [ shift and go to state 85 ]
  ! RSHIFT          [ shift and go to state 82 ]
  ! URSHIFT         [ shift and go to state 101 ]


state 158

    (68) expression -> expression LTE expression .
    (52) expression -> expression . PLUS expression
    (53) expression -> expression . MINUS expression
    (54) expression -> expression . INTO expression
    (55) expression -> expression . DIVIDE expression
    (56) expression -> expression . MOD expression
    (57) expression -> expression . EXPO expression
    (60) expression -> expression . BINAND expression
    (61) expression -> expression . BINOR expression
    (62) expression -> expression . BINXOR expression
    (64) expression -> expression . LT expression
    (65) expression -> expression . GT expression
    (66) expression -> expression . DOUBLEEQ expression
    (67) expression -> expression . NOTEQUAL expression
    (68) expression -> expression . LTE expression
    (69) expression -> expression . GTE expression
    (70) expression -> expression . STREQUAL expression
    (71) expression -> expression . STRNEQUAL expression
    (72) expression -> expression . AND expression
    (73) expression -> expression . OR expression
    (74) expression -> expression . LSHIFT expression
    (75) expression -> expression . RSHIFT expression
    (76) expression -> expression . URSHIFT expression

    BINAND          reduce using rule 68 (expression -> expression LTE expression .)
    BINOR           reduce using rule 68 (expression -> expression LTE expression .)
    BINXOR          reduce using rule 68 (expression -> expression LTE expression .)
    LT              reduce using rule 68 (expression -> expression LTE expression .)
    GT              reduce using rule 68 (expression -> expression LTE expression .)
    DOUBLEEQ        reduce using rule 68 (expression -> expression LTE expression .)
    NOTEQUAL        reduce using rule 68 (expression -> expression LTE expression .)
    LTE             reduce using rule 68 (expression -> expression LTE expression .)
    GTE             reduce using rule 68 (expression -> expression LTE expression .)
    STREQUAL        reduce using rule 68 (expression -> expression LTE expression .)
    STRNEQUAL       reduce using rule 68 (expression -> expression LTE expression .)
    AND             reduce using rule 68 (expression -> expression LTE expression .)
    OR              reduce using rule 68 (expression -> expression LTE expression .)
    SEMICOLON       reduce using rule 68 (expression -> expression LTE expression .)
    BREAK           reduce using rule 68 (expression -> expression LTE expression .)
    CONTINUE        reduce using rule 68 (expression -> expression LTE expression .)
    RETURN          reduce using rule 68 (expression -> expression LTE expression .)
    CONSOLE         reduce using rule 68 (expression -> expression LTE expression .)
    VAR             reduce using rule 68 (expression -> expression LTE expression .)
    LEFTPAREN       reduce using rule 68 (expression -> expression LTE expression .)
    ID              reduce using rule 68 (expression -> expression LTE expression .)
    EVAL            reduce using rule 68 (expression -> expression LTE expression .)
    NOT             reduce using rule 68 (expression -> expression LTE expression .)
    BINNOT          reduce using rule 68 (expression -> expression LTE expression .)
    TYPEOF          reduce using rule 68 (expression -> expression LTE expression .)
    IF              reduce using rule 68 (expression -> expression LTE expression .)
    WHILE           reduce using rule 68 (expression -> expression LTE expression .)
    FOR             reduce using rule 68 (expression -> expression LTE expression .)
    FUNCTION        reduce using rule 68 (expression -> expression LTE expression .)
    NUMBER          reduce using rule 68 (expression -> expression LTE expression .)
    STRING          reduce using rule 68 (expression -> expression LTE expression .)
    UNDEFINED       reduce using rule 68 (expression -> expression LTE expression .)
    $end            reduce using rule 68 (expression -> expression LTE expression .)
    RIGHTBRACE      reduce using rule 68 (expression -> expression LTE expression .)
    RIGHTPAREN      reduce using rule 68 (expression -> expression LTE expression .)
    ELSE            reduce using rule 68 (expression -> expression LTE expression .)
    LEFTBRACE       reduce using rule 68 (expression -> expression LTE expression .)
    RIGHTBRACKET    reduce using rule 68 (expression -> expression LTE expression .)
    COMMA           reduce using rule 68 (expression -> expression LTE expression .)
    PLUS            shift and go to state 92
    MINUS           shift and go to state 86
    INTO            shift and go to state 97
    DIVIDE          shift and go to state 96
    MOD             shift and go to state 103
    EXPO            shift and go to state 93
    LSHIFT          shift and go to state 85
    RSHIFT          shift and go to state 82
    URSHIFT         shift and go to state 101

  ! PLUS            [ reduce using rule 68 (expression -> expression LTE expression .) ]
  ! MINUS           [ reduce using rule 68 (expression -> expression LTE expression .) ]
  ! INTO            [ reduce using rule 68 (expression -> expression LTE expression .) ]
  ! DIVIDE          [ reduce using rule 68 (expression -> expression LTE expression .) ]
  ! MOD             [ reduce using rule 68 (expression -> expression LTE expression .) ]
  ! EXPO            [ reduce using rule 68 (expression -> expression LTE expression .) ]
  ! LSHIFT          [ reduce using rule 68 (expression -> expression LTE expression .) ]
  ! RSHIFT          [ reduce using rule 68 (expression -> expression LTE expression .) ]
  ! URSHIFT         [ reduce using rule 68 (expression -> expression LTE expression .) ]
  ! BINAND          [ shift and go to state 88 ]
  ! BINOR           [ shift and go to state 100 ]
  ! BINXOR          [ shift and go to state 94 ]
  ! LT              [ shift and go to state 91 ]
  ! GT              [ shift and go to state 95 ]
  ! DOUBLEEQ        [ shift and go to state 81 ]
  ! NOTEQUAL        [ shift and go to state 83 ]
  ! LTE             [ shift and go to state 98 ]
  ! GTE             [ shift and go to state 87 ]
  ! STREQUAL        [ shift and go to state 90 ]
  ! STRNEQUAL       [ shift and go to state 84 ]
  ! AND             [ shift and go to state 99 ]
  ! OR              [ shift and go to state 102 ]


state 159

    (72) expression -> expression AND expression .
    (52) expression -> expression . PLUS expression
    (53) expression -> expression . MINUS expression
    (54) expression -> expression . INTO expression
    (55) expression -> expression . DIVIDE expression
    (56) expression -> expression . MOD expression
    (57) expression -> expression . EXPO expression
    (60) expression -> expression . BINAND expression
    (61) expression -> expression . BINOR expression
    (62) expression -> expression . BINXOR expression
    (64) expression -> expression . LT expression
    (65) expression -> expression . GT expression
    (66) expression -> expression . DOUBLEEQ expression
    (67) expression -> expression . NOTEQUAL expression
    (68) expression -> expression . LTE expression
    (69) expression -> expression . GTE expression
    (70) expression -> expression . STREQUAL expression
    (71) expression -> expression . STRNEQUAL expression
    (72) expression -> expression . AND expression
    (73) expression -> expression . OR expression
    (74) expression -> expression . LSHIFT expression
    (75) expression -> expression . RSHIFT expression
    (76) expression -> expression . URSHIFT expression

    AND             reduce using rule 72 (expression -> expression AND expression .)
    OR              reduce using rule 72 (expression -> expression AND expression .)
    SEMICOLON       reduce using rule 72 (expression -> expression AND expression .)
    BREAK           reduce using rule 72 (expression -> expression AND expression .)
    CONTINUE        reduce using rule 72 (expression -> expression AND expression .)
    RETURN          reduce using rule 72 (expression -> expression AND expression .)
    CONSOLE         reduce using rule 72 (expression -> expression AND expression .)
    VAR             reduce using rule 72 (expression -> expression AND expression .)
    LEFTPAREN       reduce using rule 72 (expression -> expression AND expression .)
    ID              reduce using rule 72 (expression -> expression AND expression .)
    EVAL            reduce using rule 72 (expression -> expression AND expression .)
    NOT             reduce using rule 72 (expression -> expression AND expression .)
    BINNOT          reduce using rule 72 (expression -> expression AND expression .)
    TYPEOF          reduce using rule 72 (expression -> expression AND expression .)
    IF              reduce using rule 72 (expression -> expression AND expression .)
    WHILE           reduce using rule 72 (expression -> expression AND expression .)
    FOR             reduce using rule 72 (expression -> expression AND expression .)
    FUNCTION        reduce using rule 72 (expression -> expression AND expression .)
    NUMBER          reduce using rule 72 (expression -> expression AND expression .)
    STRING          reduce using rule 72 (expression -> expression AND expression .)
    UNDEFINED       reduce using rule 72 (expression -> expression AND expression .)
    $end            reduce using rule 72 (expression -> expression AND expression .)
    RIGHTBRACE      reduce using rule 72 (expression -> expression AND expression .)
    RIGHTPAREN      reduce using rule 72 (expression -> expression AND expression .)
    ELSE            reduce using rule 72 (expression -> expression AND expression .)
    LEFTBRACE       reduce using rule 72 (expression -> expression AND expression .)
    RIGHTBRACKET    reduce using rule 72 (expression -> expression AND expression .)
    COMMA           reduce using rule 72 (expression -> expression AND expression .)
    PLUS            shift and go to state 92
    MINUS           shift and go to state 86
    INTO            shift and go to state 97
    DIVIDE          shift and go to state 96
    MOD             shift and go to state 103
    EXPO            shift and go to state 93
    BINAND          shift and go to state 88
    BINOR           shift and go to state 100
    BINXOR          shift and go to state 94
    LT              shift and go to state 91
    GT              shift and go to state 95
    DOUBLEEQ        shift and go to state 81
    NOTEQUAL        shift and go to state 83
    LTE             shift and go to state 98
    GTE             shift and go to state 87
    STREQUAL        shift and go to state 90
    STRNEQUAL       shift and go to state 84
    LSHIFT          shift and go to state 85
    RSHIFT          shift and go to state 82
    URSHIFT         shift and go to state 101

  ! PLUS            [ reduce using rule 72 (expression -> expression AND expression .) ]
  ! MINUS           [ reduce using rule 72 (expression -> expression AND expression .) ]
  ! INTO            [ reduce using rule 72 (expression -> expression AND expression .) ]
  ! DIVIDE          [ reduce using rule 72 (expression -> expression AND expression .) ]
  ! MOD             [ reduce using rule 72 (expression -> expression AND expression .) ]
  ! EXPO            [ reduce using rule 72 (expression -> expression AND expression .) ]
  ! BINAND          [ reduce using rule 72 (expression -> expression AND expression .) ]
  ! BINOR           [ reduce using rule 72 (expression -> expression AND expression .) ]
  ! BINXOR          [ reduce using rule 72 (expression -> expression AND expression .) ]
  ! LT              [ reduce using rule 72 (expression -> expression AND expression .) ]
  ! GT              [ reduce using rule 72 (expression -> expression AND expression .) ]
  ! DOUBLEEQ        [ reduce using rule 72 (expression -> expression AND expression .) ]
  ! NOTEQUAL        [ reduce using rule 72 (expression -> expression AND expression .) ]
  ! LTE             [ reduce using rule 72 (expression -> expression AND expression .) ]
  ! GTE             [ reduce using rule 72 (expression -> expression AND expression .) ]
  ! STREQUAL        [ reduce using rule 72 (expression -> expression AND expression .) ]
  ! STRNEQUAL       [ reduce using rule 72 (expression -> expression AND expression .) ]
  ! LSHIFT          [ reduce using rule 72 (expression -> expression AND expression .) ]
  ! RSHIFT          [ reduce using rule 72 (expression -> expression AND expression .) ]
  ! URSHIFT         [ reduce using rule 72 (expression -> expression AND expression .) ]
  ! AND             [ shift and go to state 99 ]
  ! OR              [ shift and go to state 102 ]


state 160

    (61) expression -> expression BINOR expression .
    (52) expression -> expression . PLUS expression
    (53) expression -> expression . MINUS expression
    (54) expression -> expression . INTO expression
    (55) expression -> expression . DIVIDE expression
    (56) expression -> expression . MOD expression
    (57) expression -> expression . EXPO expression
    (60) expression -> expression . BINAND expression
    (61) expression -> expression . BINOR expression
    (62) expression -> expression . BINXOR expression
    (64) expression -> expression . LT expression
    (65) expression -> expression . GT expression
    (66) expression -> expression . DOUBLEEQ expression
    (67) expression -> expression . NOTEQUAL expression
    (68) expression -> expression . LTE expression
    (69) expression -> expression . GTE expression
    (70) expression -> expression . STREQUAL expression
    (71) expression -> expression . STRNEQUAL expression
    (72) expression -> expression . AND expression
    (73) expression -> expression . OR expression
    (74) expression -> expression . LSHIFT expression
    (75) expression -> expression . RSHIFT expression
    (76) expression -> expression . URSHIFT expression

    BINOR           reduce using rule 61 (expression -> expression BINOR expression .)
    AND             reduce using rule 61 (expression -> expression BINOR expression .)
    OR              reduce using rule 61 (expression -> expression BINOR expression .)
    SEMICOLON       reduce using rule 61 (expression -> expression BINOR expression .)
    BREAK           reduce using rule 61 (expression -> expression BINOR expression .)
    CONTINUE        reduce using rule 61 (expression -> expression BINOR expression .)
    RETURN          reduce using rule 61 (expression -> expression BINOR expression .)
    CONSOLE         reduce using rule 61 (expression -> expression BINOR expression .)
    VAR             reduce using rule 61 (expression -> expression BINOR expression .)
    LEFTPAREN       reduce using rule 61 (expression -> expression BINOR expression .)
    ID              reduce using rule 61 (expression -> expression BINOR expression .)
    EVAL            reduce using rule 61 (expression -> expression BINOR expression .)
    NOT             reduce using rule 61 (expression -> expression BINOR expression .)
    BINNOT          reduce using rule 61 (expression -> expression BINOR expression .)
    TYPEOF          reduce using rule 61 (expression -> expression BINOR expression .)
    IF              reduce using rule 61 (expression -> expression BINOR expression .)
    WHILE           reduce using rule 61 (expression -> expression BINOR expression .)
    FOR             reduce using rule 61 (expression -> expression BINOR expression .)
    FUNCTION        reduce using rule 61 (expression -> expression BINOR expression .)
    NUMBER          reduce using rule 61 (expression -> expression BINOR expression .)
    STRING          reduce using rule 61 (expression -> expression BINOR expression .)
    UNDEFINED       reduce using rule 61 (expression -> expression BINOR expression .)
    $end            reduce using rule 61 (expression -> expression BINOR expression .)
    RIGHTBRACE      reduce using rule 61 (expression -> expression BINOR expression .)
    RIGHTPAREN      reduce using rule 61 (expression -> expression BINOR expression .)
    ELSE            reduce using rule 61 (expression -> expression BINOR expression .)
    LEFTBRACE       reduce using rule 61 (expression -> expression BINOR expression .)
    RIGHTBRACKET    reduce using rule 61 (expression -> expression BINOR expression .)
    COMMA           reduce using rule 61 (expression -> expression BINOR expression .)
    PLUS            shift and go to state 92
    MINUS           shift and go to state 86
    INTO            shift and go to state 97
    DIVIDE          shift and go to state 96
    MOD             shift and go to state 103
    EXPO            shift and go to state 93
    BINAND          shift and go to state 88
    BINXOR          shift and go to state 94
    LT              shift and go to state 91
    GT              shift and go to state 95
    DOUBLEEQ        shift and go to state 81
    NOTEQUAL        shift and go to state 83
    LTE             shift and go to state 98
    GTE             shift and go to state 87
    STREQUAL        shift and go to state 90
    STRNEQUAL       shift and go to state 84
    LSHIFT          shift and go to state 85
    RSHIFT          shift and go to state 82
    URSHIFT         shift and go to state 101

  ! PLUS            [ reduce using rule 61 (expression -> expression BINOR expression .) ]
  ! MINUS           [ reduce using rule 61 (expression -> expression BINOR expression .) ]
  ! INTO            [ reduce using rule 61 (expression -> expression BINOR expression .) ]
  ! DIVIDE          [ reduce using rule 61 (expression -> expression BINOR expression .) ]
  ! MOD             [ reduce using rule 61 (expression -> expression BINOR expression .) ]
  ! EXPO            [ reduce using rule 61 (expression -> expression BINOR expression .) ]
  ! BINAND          [ reduce using rule 61 (expression -> expression BINOR expression .) ]
  ! BINXOR          [ reduce using rule 61 (expression -> expression BINOR expression .) ]
  ! LT              [ reduce using rule 61 (expression -> expression BINOR expression .) ]
  ! GT              [ reduce using rule 61 (expression -> expression BINOR expression .) ]
  ! DOUBLEEQ        [ reduce using rule 61 (expression -> expression BINOR expression .) ]
  ! NOTEQUAL        [ reduce using rule 61 (expression -> expression BINOR expression .) ]
  ! LTE             [ reduce using rule 61 (expression -> expression BINOR expression .) ]
  ! GTE             [ reduce using rule 61 (expression -> expression BINOR expression .) ]
  ! STREQUAL        [ reduce using rule 61 (expression -> expression BINOR expression .) ]
  ! STRNEQUAL       [ reduce using rule 61 (expression -> expression BINOR expression .) ]
  ! LSHIFT          [ reduce using rule 61 (expression -> expression BINOR expression .) ]
  ! RSHIFT          [ reduce using rule 61 (expression -> expression BINOR expression .) ]
  ! URSHIFT         [ reduce using rule 61 (expression -> expression BINOR expression .) ]
  ! BINOR           [ shift and go to state 100 ]
  ! AND             [ shift and go to state 99 ]
  ! OR              [ shift and go to state 102 ]


state 161

    (76) expression -> expression URSHIFT expression .
    (52) expression -> expression . PLUS expression
    (53) expression -> expression . MINUS expression
    (54) expression -> expression . INTO expression
    (55) expression -> expression . DIVIDE expression
    (56) expression -> expression . MOD expression
    (57) expression -> expression . EXPO expression
    (60) expression -> expression . BINAND expression
    (61) expression -> expression . BINOR expression
    (62) expression -> expression . BINXOR expression
    (64) expression -> expression . LT expression
    (65) expression -> expression . GT expression
    (66) expression -> expression . DOUBLEEQ expression
    (67) expression -> expression . NOTEQUAL expression
    (68) expression -> expression . LTE expression
    (69) expression -> expression . GTE expression
    (70) expression -> expression . STREQUAL expression
    (71) expression -> expression . STRNEQUAL expression
    (72) expression -> expression . AND expression
    (73) expression -> expression . OR expression
    (74) expression -> expression . LSHIFT expression
    (75) expression -> expression . RSHIFT expression
    (76) expression -> expression . URSHIFT expression

    BINAND          reduce using rule 76 (expression -> expression URSHIFT expression .)
    BINOR           reduce using rule 76 (expression -> expression URSHIFT expression .)
    BINXOR          reduce using rule 76 (expression -> expression URSHIFT expression .)
    LT              reduce using rule 76 (expression -> expression URSHIFT expression .)
    GT              reduce using rule 76 (expression -> expression URSHIFT expression .)
    DOUBLEEQ        reduce using rule 76 (expression -> expression URSHIFT expression .)
    NOTEQUAL        reduce using rule 76 (expression -> expression URSHIFT expression .)
    LTE             reduce using rule 76 (expression -> expression URSHIFT expression .)
    GTE             reduce using rule 76 (expression -> expression URSHIFT expression .)
    STREQUAL        reduce using rule 76 (expression -> expression URSHIFT expression .)
    STRNEQUAL       reduce using rule 76 (expression -> expression URSHIFT expression .)
    AND             reduce using rule 76 (expression -> expression URSHIFT expression .)
    OR              reduce using rule 76 (expression -> expression URSHIFT expression .)
    LSHIFT          reduce using rule 76 (expression -> expression URSHIFT expression .)
    RSHIFT          reduce using rule 76 (expression -> expression URSHIFT expression .)
    URSHIFT         reduce using rule 76 (expression -> expression URSHIFT expression .)
    SEMICOLON       reduce using rule 76 (expression -> expression URSHIFT expression .)
    BREAK           reduce using rule 76 (expression -> expression URSHIFT expression .)
    CONTINUE        reduce using rule 76 (expression -> expression URSHIFT expression .)
    RETURN          reduce using rule 76 (expression -> expression URSHIFT expression .)
    CONSOLE         reduce using rule 76 (expression -> expression URSHIFT expression .)
    VAR             reduce using rule 76 (expression -> expression URSHIFT expression .)
    LEFTPAREN       reduce using rule 76 (expression -> expression URSHIFT expression .)
    ID              reduce using rule 76 (expression -> expression URSHIFT expression .)
    EVAL            reduce using rule 76 (expression -> expression URSHIFT expression .)
    NOT             reduce using rule 76 (expression -> expression URSHIFT expression .)
    BINNOT          reduce using rule 76 (expression -> expression URSHIFT expression .)
    TYPEOF          reduce using rule 76 (expression -> expression URSHIFT expression .)
    IF              reduce using rule 76 (expression -> expression URSHIFT expression .)
    WHILE           reduce using rule 76 (expression -> expression URSHIFT expression .)
    FOR             reduce using rule 76 (expression -> expression URSHIFT expression .)
    FUNCTION        reduce using rule 76 (expression -> expression URSHIFT expression .)
    NUMBER          reduce using rule 76 (expression -> expression URSHIFT expression .)
    STRING          reduce using rule 76 (expression -> expression URSHIFT expression .)
    UNDEFINED       reduce using rule 76 (expression -> expression URSHIFT expression .)
    $end            reduce using rule 76 (expression -> expression URSHIFT expression .)
    RIGHTBRACE      reduce using rule 76 (expression -> expression URSHIFT expression .)
    RIGHTPAREN      reduce using rule 76 (expression -> expression URSHIFT expression .)
    ELSE            reduce using rule 76 (expression -> expression URSHIFT expression .)
    LEFTBRACE       reduce using rule 76 (expression -> expression URSHIFT expression .)
    RIGHTBRACKET    reduce using rule 76 (expression -> expression URSHIFT expression .)
    COMMA           reduce using rule 76 (expression -> expression URSHIFT expression .)
    PLUS            shift and go to state 92
    MINUS           shift and go to state 86
    INTO            shift and go to state 97
    DIVIDE          shift and go to state 96
    MOD             shift and go to state 103
    EXPO            shift and go to state 93

  ! PLUS            [ reduce using rule 76 (expression -> expression URSHIFT expression .) ]
  ! MINUS           [ reduce using rule 76 (expression -> expression URSHIFT expression .) ]
  ! INTO            [ reduce using rule 76 (expression -> expression URSHIFT expression .) ]
  ! DIVIDE          [ reduce using rule 76 (expression -> expression URSHIFT expression .) ]
  ! MOD             [ reduce using rule 76 (expression -> expression URSHIFT expression .) ]
  ! EXPO            [ reduce using rule 76 (expression -> expression URSHIFT expression .) ]
  ! BINAND          [ shift and go to state 88 ]
  ! BINOR           [ shift and go to state 100 ]
  ! BINXOR          [ shift and go to state 94 ]
  ! LT              [ shift and go to state 91 ]
  ! GT              [ shift and go to state 95 ]
  ! DOUBLEEQ        [ shift and go to state 81 ]
  ! NOTEQUAL        [ shift and go to state 83 ]
  ! LTE             [ shift and go to state 98 ]
  ! GTE             [ shift and go to state 87 ]
  ! STREQUAL        [ shift and go to state 90 ]
  ! STRNEQUAL       [ shift and go to state 84 ]
  ! AND             [ shift and go to state 99 ]
  ! OR              [ shift and go to state 102 ]
  ! LSHIFT          [ shift and go to state 85 ]
  ! RSHIFT          [ shift and go to state 82 ]
  ! URSHIFT         [ shift and go to state 101 ]


state 162

    (73) expression -> expression OR expression .
    (52) expression -> expression . PLUS expression
    (53) expression -> expression . MINUS expression
    (54) expression -> expression . INTO expression
    (55) expression -> expression . DIVIDE expression
    (56) expression -> expression . MOD expression
    (57) expression -> expression . EXPO expression
    (60) expression -> expression . BINAND expression
    (61) expression -> expression . BINOR expression
    (62) expression -> expression . BINXOR expression
    (64) expression -> expression . LT expression
    (65) expression -> expression . GT expression
    (66) expression -> expression . DOUBLEEQ expression
    (67) expression -> expression . NOTEQUAL expression
    (68) expression -> expression . LTE expression
    (69) expression -> expression . GTE expression
    (70) expression -> expression . STREQUAL expression
    (71) expression -> expression . STRNEQUAL expression
    (72) expression -> expression . AND expression
    (73) expression -> expression . OR expression
    (74) expression -> expression . LSHIFT expression
    (75) expression -> expression . RSHIFT expression
    (76) expression -> expression . URSHIFT expression

    OR              reduce using rule 73 (expression -> expression OR expression .)
    SEMICOLON       reduce using rule 73 (expression -> expression OR expression .)
    BREAK           reduce using rule 73 (expression -> expression OR expression .)
    CONTINUE        reduce using rule 73 (expression -> expression OR expression .)
    RETURN          reduce using rule 73 (expression -> expression OR expression .)
    CONSOLE         reduce using rule 73 (expression -> expression OR expression .)
    VAR             reduce using rule 73 (expression -> expression OR expression .)
    LEFTPAREN       reduce using rule 73 (expression -> expression OR expression .)
    ID              reduce using rule 73 (expression -> expression OR expression .)
    EVAL            reduce using rule 73 (expression -> expression OR expression .)
    NOT             reduce using rule 73 (expression -> expression OR expression .)
    BINNOT          reduce using rule 73 (expression -> expression OR expression .)
    TYPEOF          reduce using rule 73 (expression -> expression OR expression .)
    IF              reduce using rule 73 (expression -> expression OR expression .)
    WHILE           reduce using rule 73 (expression -> expression OR expression .)
    FOR             reduce using rule 73 (expression -> expression OR expression .)
    FUNCTION        reduce using rule 73 (expression -> expression OR expression .)
    NUMBER          reduce using rule 73 (expression -> expression OR expression .)
    STRING          reduce using rule 73 (expression -> expression OR expression .)
    UNDEFINED       reduce using rule 73 (expression -> expression OR expression .)
    $end            reduce using rule 73 (expression -> expression OR expression .)
    RIGHTBRACE      reduce using rule 73 (expression -> expression OR expression .)
    RIGHTPAREN      reduce using rule 73 (expression -> expression OR expression .)
    ELSE            reduce using rule 73 (expression -> expression OR expression .)
    LEFTBRACE       reduce using rule 73 (expression -> expression OR expression .)
    RIGHTBRACKET    reduce using rule 73 (expression -> expression OR expression .)
    COMMA           reduce using rule 73 (expression -> expression OR expression .)
    PLUS            shift and go to state 92
    MINUS           shift and go to state 86
    INTO            shift and go to state 97
    DIVIDE          shift and go to state 96
    MOD             shift and go to state 103
    EXPO            shift and go to state 93
    BINAND          shift and go to state 88
    BINOR           shift and go to state 100
    BINXOR          shift and go to state 94
    LT              shift and go to state 91
    GT              shift and go to state 95
    DOUBLEEQ        shift and go to state 81
    NOTEQUAL        shift and go to state 83
    LTE             shift and go to state 98
    GTE             shift and go to state 87
    STREQUAL        shift and go to state 90
    STRNEQUAL       shift and go to state 84
    AND             shift and go to state 99
    LSHIFT          shift and go to state 85
    RSHIFT          shift and go to state 82
    URSHIFT         shift and go to state 101

  ! PLUS            [ reduce using rule 73 (expression -> expression OR expression .) ]
  ! MINUS           [ reduce using rule 73 (expression -> expression OR expression .) ]
  ! INTO            [ reduce using rule 73 (expression -> expression OR expression .) ]
  ! DIVIDE          [ reduce using rule 73 (expression -> expression OR expression .) ]
  ! MOD             [ reduce using rule 73 (expression -> expression OR expression .) ]
  ! EXPO            [ reduce using rule 73 (expression -> expression OR expression .) ]
  ! BINAND          [ reduce using rule 73 (expression -> expression OR expression .) ]
  ! BINOR           [ reduce using rule 73 (expression -> expression OR expression .) ]
  ! BINXOR          [ reduce using rule 73 (expression -> expression OR expression .) ]
  ! LT              [ reduce using rule 73 (expression -> expression OR expression .) ]
  ! GT              [ reduce using rule 73 (expression -> expression OR expression .) ]
  ! DOUBLEEQ        [ reduce using rule 73 (expression -> expression OR expression .) ]
  ! NOTEQUAL        [ reduce using rule 73 (expression -> expression OR expression .) ]
  ! LTE             [ reduce using rule 73 (expression -> expression OR expression .) ]
  ! GTE             [ reduce using rule 73 (expression -> expression OR expression .) ]
  ! STREQUAL        [ reduce using rule 73 (expression -> expression OR expression .) ]
  ! STRNEQUAL       [ reduce using rule 73 (expression -> expression OR expression .) ]
  ! AND             [ reduce using rule 73 (expression -> expression OR expression .) ]
  ! LSHIFT          [ reduce using rule 73 (expression -> expression OR expression .) ]
  ! RSHIFT          [ reduce using rule 73 (expression -> expression OR expression .) ]
  ! URSHIFT         [ reduce using rule 73 (expression -> expression OR expression .) ]
  ! OR              [ shift and go to state 102 ]


state 163

    (56) expression -> expression MOD expression .
    (52) expression -> expression . PLUS expression
    (53) expression -> expression . MINUS expression
    (54) expression -> expression . INTO expression
    (55) expression -> expression . DIVIDE expression
    (56) expression -> expression . MOD expression
    (57) expression -> expression . EXPO expression
    (60) expression -> expression . BINAND expression
    (61) expression -> expression . BINOR expression
    (62) expression -> expression . BINXOR expression
    (64) expression -> expression . LT expression
    (65) expression -> expression . GT expression
    (66) expression -> expression . DOUBLEEQ expression
    (67) expression -> expression . NOTEQUAL expression
    (68) expression -> expression . LTE expression
    (69) expression -> expression . GTE expression
    (70) expression -> expression . STREQUAL expression
    (71) expression -> expression . STRNEQUAL expression
    (72) expression -> expression . AND expression
    (73) expression -> expression . OR expression
    (74) expression -> expression . LSHIFT expression
    (75) expression -> expression . RSHIFT expression
    (76) expression -> expression . URSHIFT expression

    PLUS            reduce using rule 56 (expression -> expression MOD expression .)
    MINUS           reduce using rule 56 (expression -> expression MOD expression .)
    INTO            reduce using rule 56 (expression -> expression MOD expression .)
    DIVIDE          reduce using rule 56 (expression -> expression MOD expression .)
    MOD             reduce using rule 56 (expression -> expression MOD expression .)
    BINAND          reduce using rule 56 (expression -> expression MOD expression .)
    BINOR           reduce using rule 56 (expression -> expression MOD expression .)
    BINXOR          reduce using rule 56 (expression -> expression MOD expression .)
    LT              reduce using rule 56 (expression -> expression MOD expression .)
    GT              reduce using rule 56 (expression -> expression MOD expression .)
    DOUBLEEQ        reduce using rule 56 (expression -> expression MOD expression .)
    NOTEQUAL        reduce using rule 56 (expression -> expression MOD expression .)
    LTE             reduce using rule 56 (expression -> expression MOD expression .)
    GTE             reduce using rule 56 (expression -> expression MOD expression .)
    STREQUAL        reduce using rule 56 (expression -> expression MOD expression .)
    STRNEQUAL       reduce using rule 56 (expression -> expression MOD expression .)
    AND             reduce using rule 56 (expression -> expression MOD expression .)
    OR              reduce using rule 56 (expression -> expression MOD expression .)
    LSHIFT          reduce using rule 56 (expression -> expression MOD expression .)
    RSHIFT          reduce using rule 56 (expression -> expression MOD expression .)
    URSHIFT         reduce using rule 56 (expression -> expression MOD expression .)
    SEMICOLON       reduce using rule 56 (expression -> expression MOD expression .)
    BREAK           reduce using rule 56 (expression -> expression MOD expression .)
    CONTINUE        reduce using rule 56 (expression -> expression MOD expression .)
    RETURN          reduce using rule 56 (expression -> expression MOD expression .)
    CONSOLE         reduce using rule 56 (expression -> expression MOD expression .)
    VAR             reduce using rule 56 (expression -> expression MOD expression .)
    LEFTPAREN       reduce using rule 56 (expression -> expression MOD expression .)
    ID              reduce using rule 56 (expression -> expression MOD expression .)
    EVAL            reduce using rule 56 (expression -> expression MOD expression .)
    NOT             reduce using rule 56 (expression -> expression MOD expression .)
    BINNOT          reduce using rule 56 (expression -> expression MOD expression .)
    TYPEOF          reduce using rule 56 (expression -> expression MOD expression .)
    IF              reduce using rule 56 (expression -> expression MOD expression .)
    WHILE           reduce using rule 56 (expression -> expression MOD expression .)
    FOR             reduce using rule 56 (expression -> expression MOD expression .)
    FUNCTION        reduce using rule 56 (expression -> expression MOD expression .)
    NUMBER          reduce using rule 56 (expression -> expression MOD expression .)
    STRING          reduce using rule 56 (expression -> expression MOD expression .)
    UNDEFINED       reduce using rule 56 (expression -> expression MOD expression .)
    $end            reduce using rule 56 (expression -> expression MOD expression .)
    RIGHTBRACE      reduce using rule 56 (expression -> expression MOD expression .)
    RIGHTPAREN      reduce using rule 56 (expression -> expression MOD expression .)
    ELSE            reduce using rule 56 (expression -> expression MOD expression .)
    LEFTBRACE       reduce using rule 56 (expression -> expression MOD expression .)
    RIGHTBRACKET    reduce using rule 56 (expression -> expression MOD expression .)
    COMMA           reduce using rule 56 (expression -> expression MOD expression .)
    EXPO            shift and go to state 93

  ! EXPO            [ reduce using rule 56 (expression -> expression MOD expression .) ]
  ! PLUS            [ shift and go to state 92 ]
  ! MINUS           [ shift and go to state 86 ]
  ! INTO            [ shift and go to state 97 ]
  ! DIVIDE          [ shift and go to state 96 ]
  ! MOD             [ shift and go to state 103 ]
  ! BINAND          [ shift and go to state 88 ]
  ! BINOR           [ shift and go to state 100 ]
  ! BINXOR          [ shift and go to state 94 ]
  ! LT              [ shift and go to state 91 ]
  ! GT              [ shift and go to state 95 ]
  ! DOUBLEEQ        [ shift and go to state 81 ]
  ! NOTEQUAL        [ shift and go to state 83 ]
  ! LTE             [ shift and go to state 98 ]
  ! GTE             [ shift and go to state 87 ]
  ! STREQUAL        [ shift and go to state 90 ]
  ! STRNEQUAL       [ shift and go to state 84 ]
  ! AND             [ shift and go to state 99 ]
  ! OR              [ shift and go to state 102 ]
  ! LSHIFT          [ shift and go to state 85 ]
  ! RSHIFT          [ shift and go to state 82 ]
  ! URSHIFT         [ shift and go to state 101 ]


state 164

    (91) ifelse -> IF expression cblock ELSE . cblock
    (92) ifelse -> IF expression cblock ELSE . if
    (93) ifelse -> IF expression cblock ELSE . ifelse
    (94) cblock -> . block
    (95) cblock -> . statement
    (90) if -> . IF expression cblock
    (91) ifelse -> . IF expression cblock ELSE cblock
    (92) ifelse -> . IF expression cblock ELSE if
    (93) ifelse -> . IF expression cblock ELSE ifelse
    (3) block -> . LEFTBRACE statements RIGHTBRACE
    (4) block -> . LEFTBRACE RIGHTBRACE
    (7) statement -> . assignment SEMICOLON
    (8) statement -> . reassignment SEMICOLON
    (9) statement -> . BREAK SEMICOLON
    (10) statement -> . CONTINUE SEMICOLON
    (11) statement -> . RETURN expression SEMICOLON
    (12) statement -> . expression SEMICOLON
    (13) statement -> . CONSOLE DOT LOG LEFTPAREN expression RIGHTPAREN SEMICOLON
    (14) statement -> . functioncall SEMICOLON
    (15) statement -> . if
    (16) statement -> . ifelse
    (17) statement -> . whileloop
    (18) statement -> . forloop
    (19) statement -> . funcdecl
    (106) statement -> . assignment
    (107) statement -> . reassignment
    (108) statement -> . BREAK
    (109) statement -> . CONTINUE
    (110) statement -> . expression
    (111) statement -> . CONSOLE DOT LOG LEFTPAREN expression RIGHTPAREN
    (112) statement -> . functioncall
    (20) assignment -> . VAR assignlist
    (21) assignment -> . LEFTPAREN assignment RIGHTPAREN
    (28) reassignment -> . ID EQ expression
    (29) reassignment -> . ID PLUSEQ expression
    (30) reassignment -> . ID MINUSEQ expression
    (31) reassignment -> . ID INTOEQ expression
    (32) reassignment -> . ID DIVEQ expression
    (33) reassignment -> . ID INCR
    (34) reassignment -> . ID DECR
    (35) reassignment -> . ID LSHIFTEQ expression
    (36) reassignment -> . ID RSHIFTEQ expression
    (37) reassignment -> . ID URSHIFTEQ expression
    (38) reassignment -> . ID ANDEQ expression
    (39) reassignment -> . ID OREQ expression
    (40) reassignment -> . ID XOREQ expression
    (41) reassignment -> . ID MODEQ expression
    (42) reassignment -> . arraydecl
    (43) reassignment -> . LEFTPAREN reassignment RIGHTPAREN
    (50) expression -> . EVAL LEFTPAREN statements RIGHTPAREN
    (51) expression -> . EVAL LEFTPAREN block RIGHTPAREN
    (52) expression -> . expression PLUS expression
    (53) expression -> . expression MINUS expression
    (54) expression -> . expression INTO expression
    (55) expression -> . expression DIVIDE expression
    (56) expression -> . expression MOD expression
    (57) expression -> . expression EXPO expression
    (58) expression -> . LEFTPAREN expression RIGHTPAREN
    (59) expression -> . NOT expression
    (60) expression -> . expression BINAND expression
    (61) expression -> . expression BINOR expression
    (62) expression -> . expression BINXOR expression
    (63) expression -> . BINNOT expression
    (64) expression -> . expression LT expression
    (65) expression -> . expression GT expression
    (66) expression -> . expression DOUBLEEQ expression
    (67) expression -> . expression NOTEQUAL expression
    (68) expression -> . expression LTE expression
    (69) expression -> . expression GTE expression
    (70) expression -> . expression STREQUAL expression
    (71) expression -> . expression STRNEQUAL expression
    (72) expression -> . expression AND expression
    (73) expression -> . expression OR expression
    (74) expression -> . expression LSHIFT expression
    (75) expression -> . expression RSHIFT expression
    (76) expression -> . expression URSHIFT expression
    (77) expression -> . basicTypes
    (78) expression -> . functioncall
    (79) expression -> . arrayCall
    (80) expression -> . TYPEOF expression
    (86) functioncall -> . ID LEFTPAREN argList RIGHTPAREN
    (96) whileloop -> . WHILE LEFTPAREN expression RIGHTPAREN cblock
    (97) forloop -> . FOR LEFTPAREN initialization SEMICOLON expression SEMICOLON increment RIGHTPAREN cblock
    (104) funcdecl -> . FUNCTION ID LEFTPAREN argList RIGHTPAREN cblock
    (105) funcdecl -> . VAR ID EQ FUNCTION LEFTPAREN argList RIGHTPAREN cblock SEMICOLON
    (44) arraydecl -> . ID EQ LEFTBRACKET arrayList RIGHTBRACKET
    (82) basicTypes -> . NUMBER
    (83) basicTypes -> . STRING
    (84) basicTypes -> . ID
    (85) basicTypes -> . UNDEFINED
    (81) arrayCall -> . ID LEFTBRACKET expression RIGHTBRACKET

    IF              shift and go to state 3
    LEFTBRACE       shift and go to state 24
    BREAK           shift and go to state 27
    CONTINUE        shift and go to state 28
    RETURN          shift and go to state 5
    CONSOLE         shift and go to state 17
    VAR             shift and go to state 22
    LEFTPAREN       shift and go to state 19
    ID              shift and go to state 23
    EVAL            shift and go to state 20
    NOT             shift and go to state 32
    BINNOT          shift and go to state 25
    TYPEOF          shift and go to state 15
    WHILE           shift and go to state 4
    FOR             shift and go to state 9
    FUNCTION        shift and go to state 31
    NUMBER          shift and go to state 2
    STRING          shift and go to state 14
    UNDEFINED       shift and go to state 21

    whileloop                      shift and go to state 7
    forloop                        shift and go to state 16
    expression                     shift and go to state 34
    funcdecl                       shift and go to state 26
    reassignment                   shift and go to state 8
    arrayCall                      shift and go to state 10
    ifelse                         shift and go to state 186
    arraydecl                      shift and go to state 30
    statement                      shift and go to state 104
    assignment                     shift and go to state 18
    functioncall                   shift and go to state 29
    basicTypes                     shift and go to state 33
    cblock                         shift and go to state 187
    block                          shift and go to state 106
    if                             shift and go to state 185

state 165

    (96) whileloop -> WHILE LEFTPAREN expression RIGHTPAREN . cblock
    (94) cblock -> . block
    (95) cblock -> . statement
    (3) block -> . LEFTBRACE statements RIGHTBRACE
    (4) block -> . LEFTBRACE RIGHTBRACE
    (7) statement -> . assignment SEMICOLON
    (8) statement -> . reassignment SEMICOLON
    (9) statement -> . BREAK SEMICOLON
    (10) statement -> . CONTINUE SEMICOLON
    (11) statement -> . RETURN expression SEMICOLON
    (12) statement -> . expression SEMICOLON
    (13) statement -> . CONSOLE DOT LOG LEFTPAREN expression RIGHTPAREN SEMICOLON
    (14) statement -> . functioncall SEMICOLON
    (15) statement -> . if
    (16) statement -> . ifelse
    (17) statement -> . whileloop
    (18) statement -> . forloop
    (19) statement -> . funcdecl
    (106) statement -> . assignment
    (107) statement -> . reassignment
    (108) statement -> . BREAK
    (109) statement -> . CONTINUE
    (110) statement -> . expression
    (111) statement -> . CONSOLE DOT LOG LEFTPAREN expression RIGHTPAREN
    (112) statement -> . functioncall
    (20) assignment -> . VAR assignlist
    (21) assignment -> . LEFTPAREN assignment RIGHTPAREN
    (28) reassignment -> . ID EQ expression
    (29) reassignment -> . ID PLUSEQ expression
    (30) reassignment -> . ID MINUSEQ expression
    (31) reassignment -> . ID INTOEQ expression
    (32) reassignment -> . ID DIVEQ expression
    (33) reassignment -> . ID INCR
    (34) reassignment -> . ID DECR
    (35) reassignment -> . ID LSHIFTEQ expression
    (36) reassignment -> . ID RSHIFTEQ expression
    (37) reassignment -> . ID URSHIFTEQ expression
    (38) reassignment -> . ID ANDEQ expression
    (39) reassignment -> . ID OREQ expression
    (40) reassignment -> . ID XOREQ expression
    (41) reassignment -> . ID MODEQ expression
    (42) reassignment -> . arraydecl
    (43) reassignment -> . LEFTPAREN reassignment RIGHTPAREN
    (50) expression -> . EVAL LEFTPAREN statements RIGHTPAREN
    (51) expression -> . EVAL LEFTPAREN block RIGHTPAREN
    (52) expression -> . expression PLUS expression
    (53) expression -> . expression MINUS expression
    (54) expression -> . expression INTO expression
    (55) expression -> . expression DIVIDE expression
    (56) expression -> . expression MOD expression
    (57) expression -> . expression EXPO expression
    (58) expression -> . LEFTPAREN expression RIGHTPAREN
    (59) expression -> . NOT expression
    (60) expression -> . expression BINAND expression
    (61) expression -> . expression BINOR expression
    (62) expression -> . expression BINXOR expression
    (63) expression -> . BINNOT expression
    (64) expression -> . expression LT expression
    (65) expression -> . expression GT expression
    (66) expression -> . expression DOUBLEEQ expression
    (67) expression -> . expression NOTEQUAL expression
    (68) expression -> . expression LTE expression
    (69) expression -> . expression GTE expression
    (70) expression -> . expression STREQUAL expression
    (71) expression -> . expression STRNEQUAL expression
    (72) expression -> . expression AND expression
    (73) expression -> . expression OR expression
    (74) expression -> . expression LSHIFT expression
    (75) expression -> . expression RSHIFT expression
    (76) expression -> . expression URSHIFT expression
    (77) expression -> . basicTypes
    (78) expression -> . functioncall
    (79) expression -> . arrayCall
    (80) expression -> . TYPEOF expression
    (86) functioncall -> . ID LEFTPAREN argList RIGHTPAREN
    (90) if -> . IF expression cblock
    (91) ifelse -> . IF expression cblock ELSE cblock
    (92) ifelse -> . IF expression cblock ELSE if
    (93) ifelse -> . IF expression cblock ELSE ifelse
    (96) whileloop -> . WHILE LEFTPAREN expression RIGHTPAREN cblock
    (97) forloop -> . FOR LEFTPAREN initialization SEMICOLON expression SEMICOLON increment RIGHTPAREN cblock
    (104) funcdecl -> . FUNCTION ID LEFTPAREN argList RIGHTPAREN cblock
    (105) funcdecl -> . VAR ID EQ FUNCTION LEFTPAREN argList RIGHTPAREN cblock SEMICOLON
    (44) arraydecl -> . ID EQ LEFTBRACKET arrayList RIGHTBRACKET
    (82) basicTypes -> . NUMBER
    (83) basicTypes -> . STRING
    (84) basicTypes -> . ID
    (85) basicTypes -> . UNDEFINED
    (81) arrayCall -> . ID LEFTBRACKET expression RIGHTBRACKET

    LEFTBRACE       shift and go to state 24
    BREAK           shift and go to state 27
    CONTINUE        shift and go to state 28
    RETURN          shift and go to state 5
    CONSOLE         shift and go to state 17
    VAR             shift and go to state 22
    LEFTPAREN       shift and go to state 19
    ID              shift and go to state 23
    EVAL            shift and go to state 20
    NOT             shift and go to state 32
    BINNOT          shift and go to state 25
    TYPEOF          shift and go to state 15
    IF              shift and go to state 3
    WHILE           shift and go to state 4
    FOR             shift and go to state 9
    FUNCTION        shift and go to state 31
    NUMBER          shift and go to state 2
    STRING          shift and go to state 14
    UNDEFINED       shift and go to state 21

    whileloop                      shift and go to state 7
    forloop                        shift and go to state 16
    expression                     shift and go to state 34
    funcdecl                       shift and go to state 26
    reassignment                   shift and go to state 8
    arrayCall                      shift and go to state 10
    functioncall                   shift and go to state 29
    arraydecl                      shift and go to state 30
    statement                      shift and go to state 104
    assignment                     shift and go to state 18
    ifelse                         shift and go to state 12
    basicTypes                     shift and go to state 33
    cblock                         shift and go to state 188
    block                          shift and go to state 106
    if                             shift and go to state 6

state 166

    (98) initialization -> assignment SEMICOLON . initialization
    (98) initialization -> . assignment SEMICOLON initialization
    (99) initialization -> . reassignment SEMICOLON initialization
    (100) initialization -> . assignment
    (101) initialization -> . reassignment
    (20) assignment -> . VAR assignlist
    (21) assignment -> . LEFTPAREN assignment RIGHTPAREN
    (28) reassignment -> . ID EQ expression
    (29) reassignment -> . ID PLUSEQ expression
    (30) reassignment -> . ID MINUSEQ expression
    (31) reassignment -> . ID INTOEQ expression
    (32) reassignment -> . ID DIVEQ expression
    (33) reassignment -> . ID INCR
    (34) reassignment -> . ID DECR
    (35) reassignment -> . ID LSHIFTEQ expression
    (36) reassignment -> . ID RSHIFTEQ expression
    (37) reassignment -> . ID URSHIFTEQ expression
    (38) reassignment -> . ID ANDEQ expression
    (39) reassignment -> . ID OREQ expression
    (40) reassignment -> . ID XOREQ expression
    (41) reassignment -> . ID MODEQ expression
    (42) reassignment -> . arraydecl
    (43) reassignment -> . LEFTPAREN reassignment RIGHTPAREN
    (44) arraydecl -> . ID EQ LEFTBRACKET arrayList RIGHTBRACKET

    VAR             shift and go to state 49
    LEFTPAREN       shift and go to state 111
    ID              shift and go to state 112

    assignment                     shift and go to state 109
    initialization                 shift and go to state 189
    reassignment                   shift and go to state 113
    arraydecl                      shift and go to state 30

state 167

    (97) forloop -> FOR LEFTPAREN initialization SEMICOLON . expression SEMICOLON increment RIGHTPAREN cblock
    (50) expression -> . EVAL LEFTPAREN statements RIGHTPAREN
    (51) expression -> . EVAL LEFTPAREN block RIGHTPAREN
    (52) expression -> . expression PLUS expression
    (53) expression -> . expression MINUS expression
    (54) expression -> . expression INTO expression
    (55) expression -> . expression DIVIDE expression
    (56) expression -> . expression MOD expression
    (57) expression -> . expression EXPO expression
    (58) expression -> . LEFTPAREN expression RIGHTPAREN
    (59) expression -> . NOT expression
    (60) expression -> . expression BINAND expression
    (61) expression -> . expression BINOR expression
    (62) expression -> . expression BINXOR expression
    (63) expression -> . BINNOT expression
    (64) expression -> . expression LT expression
    (65) expression -> . expression GT expression
    (66) expression -> . expression DOUBLEEQ expression
    (67) expression -> . expression NOTEQUAL expression
    (68) expression -> . expression LTE expression
    (69) expression -> . expression GTE expression
    (70) expression -> . expression STREQUAL expression
    (71) expression -> . expression STRNEQUAL expression
    (72) expression -> . expression AND expression
    (73) expression -> . expression OR expression
    (74) expression -> . expression LSHIFT expression
    (75) expression -> . expression RSHIFT expression
    (76) expression -> . expression URSHIFT expression
    (77) expression -> . basicTypes
    (78) expression -> . functioncall
    (79) expression -> . arrayCall
    (80) expression -> . TYPEOF expression
    (82) basicTypes -> . NUMBER
    (83) basicTypes -> . STRING
    (84) basicTypes -> . ID
    (85) basicTypes -> . UNDEFINED
    (86) functioncall -> . ID LEFTPAREN argList RIGHTPAREN
    (81) arrayCall -> . ID LEFTBRACKET expression RIGHTBRACKET

    EVAL            shift and go to state 20
    LEFTPAREN       shift and go to state 36
    NOT             shift and go to state 32
    BINNOT          shift and go to state 25
    TYPEOF          shift and go to state 15
    NUMBER          shift and go to state 2
    STRING          shift and go to state 14
    ID              shift and go to state 37
    UNDEFINED       shift and go to state 21

    expression                     shift and go to state 190
    arrayCall                      shift and go to state 10
    functioncall                   shift and go to state 38
    basicTypes                     shift and go to state 33

state 168

    (99) initialization -> reassignment SEMICOLON . initialization
    (98) initialization -> . assignment SEMICOLON initialization
    (99) initialization -> . reassignment SEMICOLON initialization
    (100) initialization -> . assignment
    (101) initialization -> . reassignment
    (20) assignment -> . VAR assignlist
    (21) assignment -> . LEFTPAREN assignment RIGHTPAREN
    (28) reassignment -> . ID EQ expression
    (29) reassignment -> . ID PLUSEQ expression
    (30) reassignment -> . ID MINUSEQ expression
    (31) reassignment -> . ID INTOEQ expression
    (32) reassignment -> . ID DIVEQ expression
    (33) reassignment -> . ID INCR
    (34) reassignment -> . ID DECR
    (35) reassignment -> . ID LSHIFTEQ expression
    (36) reassignment -> . ID RSHIFTEQ expression
    (37) reassignment -> . ID URSHIFTEQ expression
    (38) reassignment -> . ID ANDEQ expression
    (39) reassignment -> . ID OREQ expression
    (40) reassignment -> . ID XOREQ expression
    (41) reassignment -> . ID MODEQ expression
    (42) reassignment -> . arraydecl
    (43) reassignment -> . LEFTPAREN reassignment RIGHTPAREN
    (44) arraydecl -> . ID EQ LEFTBRACKET arrayList RIGHTBRACKET

    VAR             shift and go to state 49
    LEFTPAREN       shift and go to state 111
    ID              shift and go to state 112

    assignment                     shift and go to state 109
    initialization                 shift and go to state 191
    reassignment                   shift and go to state 113
    arraydecl                      shift and go to state 30

state 169

    (13) statement -> CONSOLE DOT LOG LEFTPAREN . expression RIGHTPAREN SEMICOLON
    (111) statement -> CONSOLE DOT LOG LEFTPAREN . expression RIGHTPAREN
    (50) expression -> . EVAL LEFTPAREN statements RIGHTPAREN
    (51) expression -> . EVAL LEFTPAREN block RIGHTPAREN
    (52) expression -> . expression PLUS expression
    (53) expression -> . expression MINUS expression
    (54) expression -> . expression INTO expression
    (55) expression -> . expression DIVIDE expression
    (56) expression -> . expression MOD expression
    (57) expression -> . expression EXPO expression
    (58) expression -> . LEFTPAREN expression RIGHTPAREN
    (59) expression -> . NOT expression
    (60) expression -> . expression BINAND expression
    (61) expression -> . expression BINOR expression
    (62) expression -> . expression BINXOR expression
    (63) expression -> . BINNOT expression
    (64) expression -> . expression LT expression
    (65) expression -> . expression GT expression
    (66) expression -> . expression DOUBLEEQ expression
    (67) expression -> . expression NOTEQUAL expression
    (68) expression -> . expression LTE expression
    (69) expression -> . expression GTE expression
    (70) expression -> . expression STREQUAL expression
    (71) expression -> . expression STRNEQUAL expression
    (72) expression -> . expression AND expression
    (73) expression -> . expression OR expression
    (74) expression -> . expression LSHIFT expression
    (75) expression -> . expression RSHIFT expression
    (76) expression -> . expression URSHIFT expression
    (77) expression -> . basicTypes
    (78) expression -> . functioncall
    (79) expression -> . arrayCall
    (80) expression -> . TYPEOF expression
    (82) basicTypes -> . NUMBER
    (83) basicTypes -> . STRING
    (84) basicTypes -> . ID
    (85) basicTypes -> . UNDEFINED
    (86) functioncall -> . ID LEFTPAREN argList RIGHTPAREN
    (81) arrayCall -> . ID LEFTBRACKET expression RIGHTBRACKET

    EVAL            shift and go to state 20
    LEFTPAREN       shift and go to state 36
    NOT             shift and go to state 32
    BINNOT          shift and go to state 25
    TYPEOF          shift and go to state 15
    NUMBER          shift and go to state 2
    STRING          shift and go to state 14
    ID              shift and go to state 37
    UNDEFINED       shift and go to state 21

    arrayCall                      shift and go to state 10
    functioncall                   shift and go to state 38
    expression                     shift and go to state 192
    basicTypes                     shift and go to state 33

state 170

    (22) assignlist -> ID EQ . expression COMMA assignlist
    (25) assignlist -> ID EQ . expression
    (44) arraydecl -> ID EQ . LEFTBRACKET arrayList RIGHTBRACKET
    (50) expression -> . EVAL LEFTPAREN statements RIGHTPAREN
    (51) expression -> . EVAL LEFTPAREN block RIGHTPAREN
    (52) expression -> . expression PLUS expression
    (53) expression -> . expression MINUS expression
    (54) expression -> . expression INTO expression
    (55) expression -> . expression DIVIDE expression
    (56) expression -> . expression MOD expression
    (57) expression -> . expression EXPO expression
    (58) expression -> . LEFTPAREN expression RIGHTPAREN
    (59) expression -> . NOT expression
    (60) expression -> . expression BINAND expression
    (61) expression -> . expression BINOR expression
    (62) expression -> . expression BINXOR expression
    (63) expression -> . BINNOT expression
    (64) expression -> . expression LT expression
    (65) expression -> . expression GT expression
    (66) expression -> . expression DOUBLEEQ expression
    (67) expression -> . expression NOTEQUAL expression
    (68) expression -> . expression LTE expression
    (69) expression -> . expression GTE expression
    (70) expression -> . expression STREQUAL expression
    (71) expression -> . expression STRNEQUAL expression
    (72) expression -> . expression AND expression
    (73) expression -> . expression OR expression
    (74) expression -> . expression LSHIFT expression
    (75) expression -> . expression RSHIFT expression
    (76) expression -> . expression URSHIFT expression
    (77) expression -> . basicTypes
    (78) expression -> . functioncall
    (79) expression -> . arrayCall
    (80) expression -> . TYPEOF expression
    (82) basicTypes -> . NUMBER
    (83) basicTypes -> . STRING
    (84) basicTypes -> . ID
    (85) basicTypes -> . UNDEFINED
    (86) functioncall -> . ID LEFTPAREN argList RIGHTPAREN
    (81) arrayCall -> . ID LEFTBRACKET expression RIGHTBRACKET

    LEFTBRACKET     shift and go to state 136
    EVAL            shift and go to state 20
    LEFTPAREN       shift and go to state 36
    NOT             shift and go to state 32
    BINNOT          shift and go to state 25
    TYPEOF          shift and go to state 15
    NUMBER          shift and go to state 2
    STRING          shift and go to state 14
    ID              shift and go to state 37
    UNDEFINED       shift and go to state 21

    arrayCall                      shift and go to state 10
    functioncall                   shift and go to state 38
    expression                     shift and go to state 175
    basicTypes                     shift and go to state 33

state 171

    (50) expression -> EVAL LEFTPAREN statements RIGHTPAREN .

    PLUS            reduce using rule 50 (expression -> EVAL LEFTPAREN statements RIGHTPAREN .)
    MINUS           reduce using rule 50 (expression -> EVAL LEFTPAREN statements RIGHTPAREN .)
    INTO            reduce using rule 50 (expression -> EVAL LEFTPAREN statements RIGHTPAREN .)
    DIVIDE          reduce using rule 50 (expression -> EVAL LEFTPAREN statements RIGHTPAREN .)
    MOD             reduce using rule 50 (expression -> EVAL LEFTPAREN statements RIGHTPAREN .)
    EXPO            reduce using rule 50 (expression -> EVAL LEFTPAREN statements RIGHTPAREN .)
    BINAND          reduce using rule 50 (expression -> EVAL LEFTPAREN statements RIGHTPAREN .)
    BINOR           reduce using rule 50 (expression -> EVAL LEFTPAREN statements RIGHTPAREN .)
    BINXOR          reduce using rule 50 (expression -> EVAL LEFTPAREN statements RIGHTPAREN .)
    LT              reduce using rule 50 (expression -> EVAL LEFTPAREN statements RIGHTPAREN .)
    GT              reduce using rule 50 (expression -> EVAL LEFTPAREN statements RIGHTPAREN .)
    DOUBLEEQ        reduce using rule 50 (expression -> EVAL LEFTPAREN statements RIGHTPAREN .)
    NOTEQUAL        reduce using rule 50 (expression -> EVAL LEFTPAREN statements RIGHTPAREN .)
    LTE             reduce using rule 50 (expression -> EVAL LEFTPAREN statements RIGHTPAREN .)
    GTE             reduce using rule 50 (expression -> EVAL LEFTPAREN statements RIGHTPAREN .)
    STREQUAL        reduce using rule 50 (expression -> EVAL LEFTPAREN statements RIGHTPAREN .)
    STRNEQUAL       reduce using rule 50 (expression -> EVAL LEFTPAREN statements RIGHTPAREN .)
    AND             reduce using rule 50 (expression -> EVAL LEFTPAREN statements RIGHTPAREN .)
    OR              reduce using rule 50 (expression -> EVAL LEFTPAREN statements RIGHTPAREN .)
    LSHIFT          reduce using rule 50 (expression -> EVAL LEFTPAREN statements RIGHTPAREN .)
    RSHIFT          reduce using rule 50 (expression -> EVAL LEFTPAREN statements RIGHTPAREN .)
    URSHIFT         reduce using rule 50 (expression -> EVAL LEFTPAREN statements RIGHTPAREN .)
    SEMICOLON       reduce using rule 50 (expression -> EVAL LEFTPAREN statements RIGHTPAREN .)
    BREAK           reduce using rule 50 (expression -> EVAL LEFTPAREN statements RIGHTPAREN .)
    CONTINUE        reduce using rule 50 (expression -> EVAL LEFTPAREN statements RIGHTPAREN .)
    RETURN          reduce using rule 50 (expression -> EVAL LEFTPAREN statements RIGHTPAREN .)
    CONSOLE         reduce using rule 50 (expression -> EVAL LEFTPAREN statements RIGHTPAREN .)
    VAR             reduce using rule 50 (expression -> EVAL LEFTPAREN statements RIGHTPAREN .)
    LEFTPAREN       reduce using rule 50 (expression -> EVAL LEFTPAREN statements RIGHTPAREN .)
    ID              reduce using rule 50 (expression -> EVAL LEFTPAREN statements RIGHTPAREN .)
    EVAL            reduce using rule 50 (expression -> EVAL LEFTPAREN statements RIGHTPAREN .)
    NOT             reduce using rule 50 (expression -> EVAL LEFTPAREN statements RIGHTPAREN .)
    BINNOT          reduce using rule 50 (expression -> EVAL LEFTPAREN statements RIGHTPAREN .)
    TYPEOF          reduce using rule 50 (expression -> EVAL LEFTPAREN statements RIGHTPAREN .)
    IF              reduce using rule 50 (expression -> EVAL LEFTPAREN statements RIGHTPAREN .)
    WHILE           reduce using rule 50 (expression -> EVAL LEFTPAREN statements RIGHTPAREN .)
    FOR             reduce using rule 50 (expression -> EVAL LEFTPAREN statements RIGHTPAREN .)
    FUNCTION        reduce using rule 50 (expression -> EVAL LEFTPAREN statements RIGHTPAREN .)
    NUMBER          reduce using rule 50 (expression -> EVAL LEFTPAREN statements RIGHTPAREN .)
    STRING          reduce using rule 50 (expression -> EVAL LEFTPAREN statements RIGHTPAREN .)
    UNDEFINED       reduce using rule 50 (expression -> EVAL LEFTPAREN statements RIGHTPAREN .)
    $end            reduce using rule 50 (expression -> EVAL LEFTPAREN statements RIGHTPAREN .)
    RIGHTBRACE      reduce using rule 50 (expression -> EVAL LEFTPAREN statements RIGHTPAREN .)
    RIGHTPAREN      reduce using rule 50 (expression -> EVAL LEFTPAREN statements RIGHTPAREN .)
    ELSE            reduce using rule 50 (expression -> EVAL LEFTPAREN statements RIGHTPAREN .)
    LEFTBRACE       reduce using rule 50 (expression -> EVAL LEFTPAREN statements RIGHTPAREN .)
    RIGHTBRACKET    reduce using rule 50 (expression -> EVAL LEFTPAREN statements RIGHTPAREN .)
    COMMA           reduce using rule 50 (expression -> EVAL LEFTPAREN statements RIGHTPAREN .)


state 172

    (51) expression -> EVAL LEFTPAREN block RIGHTPAREN .

    PLUS            reduce using rule 51 (expression -> EVAL LEFTPAREN block RIGHTPAREN .)
    MINUS           reduce using rule 51 (expression -> EVAL LEFTPAREN block RIGHTPAREN .)
    INTO            reduce using rule 51 (expression -> EVAL LEFTPAREN block RIGHTPAREN .)
    DIVIDE          reduce using rule 51 (expression -> EVAL LEFTPAREN block RIGHTPAREN .)
    MOD             reduce using rule 51 (expression -> EVAL LEFTPAREN block RIGHTPAREN .)
    EXPO            reduce using rule 51 (expression -> EVAL LEFTPAREN block RIGHTPAREN .)
    BINAND          reduce using rule 51 (expression -> EVAL LEFTPAREN block RIGHTPAREN .)
    BINOR           reduce using rule 51 (expression -> EVAL LEFTPAREN block RIGHTPAREN .)
    BINXOR          reduce using rule 51 (expression -> EVAL LEFTPAREN block RIGHTPAREN .)
    LT              reduce using rule 51 (expression -> EVAL LEFTPAREN block RIGHTPAREN .)
    GT              reduce using rule 51 (expression -> EVAL LEFTPAREN block RIGHTPAREN .)
    DOUBLEEQ        reduce using rule 51 (expression -> EVAL LEFTPAREN block RIGHTPAREN .)
    NOTEQUAL        reduce using rule 51 (expression -> EVAL LEFTPAREN block RIGHTPAREN .)
    LTE             reduce using rule 51 (expression -> EVAL LEFTPAREN block RIGHTPAREN .)
    GTE             reduce using rule 51 (expression -> EVAL LEFTPAREN block RIGHTPAREN .)
    STREQUAL        reduce using rule 51 (expression -> EVAL LEFTPAREN block RIGHTPAREN .)
    STRNEQUAL       reduce using rule 51 (expression -> EVAL LEFTPAREN block RIGHTPAREN .)
    AND             reduce using rule 51 (expression -> EVAL LEFTPAREN block RIGHTPAREN .)
    OR              reduce using rule 51 (expression -> EVAL LEFTPAREN block RIGHTPAREN .)
    LSHIFT          reduce using rule 51 (expression -> EVAL LEFTPAREN block RIGHTPAREN .)
    RSHIFT          reduce using rule 51 (expression -> EVAL LEFTPAREN block RIGHTPAREN .)
    URSHIFT         reduce using rule 51 (expression -> EVAL LEFTPAREN block RIGHTPAREN .)
    SEMICOLON       reduce using rule 51 (expression -> EVAL LEFTPAREN block RIGHTPAREN .)
    BREAK           reduce using rule 51 (expression -> EVAL LEFTPAREN block RIGHTPAREN .)
    CONTINUE        reduce using rule 51 (expression -> EVAL LEFTPAREN block RIGHTPAREN .)
    RETURN          reduce using rule 51 (expression -> EVAL LEFTPAREN block RIGHTPAREN .)
    CONSOLE         reduce using rule 51 (expression -> EVAL LEFTPAREN block RIGHTPAREN .)
    VAR             reduce using rule 51 (expression -> EVAL LEFTPAREN block RIGHTPAREN .)
    LEFTPAREN       reduce using rule 51 (expression -> EVAL LEFTPAREN block RIGHTPAREN .)
    ID              reduce using rule 51 (expression -> EVAL LEFTPAREN block RIGHTPAREN .)
    EVAL            reduce using rule 51 (expression -> EVAL LEFTPAREN block RIGHTPAREN .)
    NOT             reduce using rule 51 (expression -> EVAL LEFTPAREN block RIGHTPAREN .)
    BINNOT          reduce using rule 51 (expression -> EVAL LEFTPAREN block RIGHTPAREN .)
    TYPEOF          reduce using rule 51 (expression -> EVAL LEFTPAREN block RIGHTPAREN .)
    IF              reduce using rule 51 (expression -> EVAL LEFTPAREN block RIGHTPAREN .)
    WHILE           reduce using rule 51 (expression -> EVAL LEFTPAREN block RIGHTPAREN .)
    FOR             reduce using rule 51 (expression -> EVAL LEFTPAREN block RIGHTPAREN .)
    FUNCTION        reduce using rule 51 (expression -> EVAL LEFTPAREN block RIGHTPAREN .)
    NUMBER          reduce using rule 51 (expression -> EVAL LEFTPAREN block RIGHTPAREN .)
    STRING          reduce using rule 51 (expression -> EVAL LEFTPAREN block RIGHTPAREN .)
    UNDEFINED       reduce using rule 51 (expression -> EVAL LEFTPAREN block RIGHTPAREN .)
    $end            reduce using rule 51 (expression -> EVAL LEFTPAREN block RIGHTPAREN .)
    RIGHTBRACE      reduce using rule 51 (expression -> EVAL LEFTPAREN block RIGHTPAREN .)
    RIGHTPAREN      reduce using rule 51 (expression -> EVAL LEFTPAREN block RIGHTPAREN .)
    ELSE            reduce using rule 51 (expression -> EVAL LEFTPAREN block RIGHTPAREN .)
    LEFTBRACE       reduce using rule 51 (expression -> EVAL LEFTPAREN block RIGHTPAREN .)
    RIGHTBRACKET    reduce using rule 51 (expression -> EVAL LEFTPAREN block RIGHTPAREN .)
    COMMA           reduce using rule 51 (expression -> EVAL LEFTPAREN block RIGHTPAREN .)


state 173

    (23) assignlist -> ID COMMA assignlist .

    RIGHTPAREN      reduce using rule 23 (assignlist -> ID COMMA assignlist .)
    SEMICOLON       reduce using rule 23 (assignlist -> ID COMMA assignlist .)
    BREAK           reduce using rule 23 (assignlist -> ID COMMA assignlist .)
    CONTINUE        reduce using rule 23 (assignlist -> ID COMMA assignlist .)
    RETURN          reduce using rule 23 (assignlist -> ID COMMA assignlist .)
    CONSOLE         reduce using rule 23 (assignlist -> ID COMMA assignlist .)
    VAR             reduce using rule 23 (assignlist -> ID COMMA assignlist .)
    LEFTPAREN       reduce using rule 23 (assignlist -> ID COMMA assignlist .)
    ID              reduce using rule 23 (assignlist -> ID COMMA assignlist .)
    EVAL            reduce using rule 23 (assignlist -> ID COMMA assignlist .)
    NOT             reduce using rule 23 (assignlist -> ID COMMA assignlist .)
    BINNOT          reduce using rule 23 (assignlist -> ID COMMA assignlist .)
    TYPEOF          reduce using rule 23 (assignlist -> ID COMMA assignlist .)
    IF              reduce using rule 23 (assignlist -> ID COMMA assignlist .)
    WHILE           reduce using rule 23 (assignlist -> ID COMMA assignlist .)
    FOR             reduce using rule 23 (assignlist -> ID COMMA assignlist .)
    FUNCTION        reduce using rule 23 (assignlist -> ID COMMA assignlist .)
    NUMBER          reduce using rule 23 (assignlist -> ID COMMA assignlist .)
    STRING          reduce using rule 23 (assignlist -> ID COMMA assignlist .)
    UNDEFINED       reduce using rule 23 (assignlist -> ID COMMA assignlist .)
    $end            reduce using rule 23 (assignlist -> ID COMMA assignlist .)
    RIGHTBRACE      reduce using rule 23 (assignlist -> ID COMMA assignlist .)
    ELSE            reduce using rule 23 (assignlist -> ID COMMA assignlist .)


state 174

    (105) funcdecl -> VAR ID EQ FUNCTION . LEFTPAREN argList RIGHTPAREN cblock SEMICOLON

    LEFTPAREN       shift and go to state 193


state 175

    (22) assignlist -> ID EQ expression . COMMA assignlist
    (25) assignlist -> ID EQ expression .
    (52) expression -> expression . PLUS expression
    (53) expression -> expression . MINUS expression
    (54) expression -> expression . INTO expression
    (55) expression -> expression . DIVIDE expression
    (56) expression -> expression . MOD expression
    (57) expression -> expression . EXPO expression
    (60) expression -> expression . BINAND expression
    (61) expression -> expression . BINOR expression
    (62) expression -> expression . BINXOR expression
    (64) expression -> expression . LT expression
    (65) expression -> expression . GT expression
    (66) expression -> expression . DOUBLEEQ expression
    (67) expression -> expression . NOTEQUAL expression
    (68) expression -> expression . LTE expression
    (69) expression -> expression . GTE expression
    (70) expression -> expression . STREQUAL expression
    (71) expression -> expression . STRNEQUAL expression
    (72) expression -> expression . AND expression
    (73) expression -> expression . OR expression
    (74) expression -> expression . LSHIFT expression
    (75) expression -> expression . RSHIFT expression
    (76) expression -> expression . URSHIFT expression

    COMMA           shift and go to state 194
    RIGHTPAREN      reduce using rule 25 (assignlist -> ID EQ expression .)
    SEMICOLON       reduce using rule 25 (assignlist -> ID EQ expression .)
    BREAK           reduce using rule 25 (assignlist -> ID EQ expression .)
    CONTINUE        reduce using rule 25 (assignlist -> ID EQ expression .)
    RETURN          reduce using rule 25 (assignlist -> ID EQ expression .)
    CONSOLE         reduce using rule 25 (assignlist -> ID EQ expression .)
    VAR             reduce using rule 25 (assignlist -> ID EQ expression .)
    LEFTPAREN       reduce using rule 25 (assignlist -> ID EQ expression .)
    ID              reduce using rule 25 (assignlist -> ID EQ expression .)
    EVAL            reduce using rule 25 (assignlist -> ID EQ expression .)
    NOT             reduce using rule 25 (assignlist -> ID EQ expression .)
    BINNOT          reduce using rule 25 (assignlist -> ID EQ expression .)
    TYPEOF          reduce using rule 25 (assignlist -> ID EQ expression .)
    IF              reduce using rule 25 (assignlist -> ID EQ expression .)
    WHILE           reduce using rule 25 (assignlist -> ID EQ expression .)
    FOR             reduce using rule 25 (assignlist -> ID EQ expression .)
    FUNCTION        reduce using rule 25 (assignlist -> ID EQ expression .)
    NUMBER          reduce using rule 25 (assignlist -> ID EQ expression .)
    STRING          reduce using rule 25 (assignlist -> ID EQ expression .)
    UNDEFINED       reduce using rule 25 (assignlist -> ID EQ expression .)
    $end            reduce using rule 25 (assignlist -> ID EQ expression .)
    RIGHTBRACE      reduce using rule 25 (assignlist -> ID EQ expression .)
    ELSE            reduce using rule 25 (assignlist -> ID EQ expression .)
    PLUS            shift and go to state 92
    MINUS           shift and go to state 86
    INTO            shift and go to state 97
    DIVIDE          shift and go to state 96
    MOD             shift and go to state 103
    EXPO            shift and go to state 93
    BINAND          shift and go to state 88
    BINOR           shift and go to state 100
    BINXOR          shift and go to state 94
    LT              shift and go to state 91
    GT              shift and go to state 95
    DOUBLEEQ        shift and go to state 81
    NOTEQUAL        shift and go to state 83
    LTE             shift and go to state 98
    GTE             shift and go to state 87
    STREQUAL        shift and go to state 90
    STRNEQUAL       shift and go to state 84
    AND             shift and go to state 99
    OR              shift and go to state 102
    LSHIFT          shift and go to state 85
    RSHIFT          shift and go to state 82
    URSHIFT         shift and go to state 101


state 176

    (24) assignlist -> arraydecl COMMA assignlist .

    RIGHTPAREN      reduce using rule 24 (assignlist -> arraydecl COMMA assignlist .)
    SEMICOLON       reduce using rule 24 (assignlist -> arraydecl COMMA assignlist .)
    BREAK           reduce using rule 24 (assignlist -> arraydecl COMMA assignlist .)
    CONTINUE        reduce using rule 24 (assignlist -> arraydecl COMMA assignlist .)
    RETURN          reduce using rule 24 (assignlist -> arraydecl COMMA assignlist .)
    CONSOLE         reduce using rule 24 (assignlist -> arraydecl COMMA assignlist .)
    VAR             reduce using rule 24 (assignlist -> arraydecl COMMA assignlist .)
    LEFTPAREN       reduce using rule 24 (assignlist -> arraydecl COMMA assignlist .)
    ID              reduce using rule 24 (assignlist -> arraydecl COMMA assignlist .)
    EVAL            reduce using rule 24 (assignlist -> arraydecl COMMA assignlist .)
    NOT             reduce using rule 24 (assignlist -> arraydecl COMMA assignlist .)
    BINNOT          reduce using rule 24 (assignlist -> arraydecl COMMA assignlist .)
    TYPEOF          reduce using rule 24 (assignlist -> arraydecl COMMA assignlist .)
    IF              reduce using rule 24 (assignlist -> arraydecl COMMA assignlist .)
    WHILE           reduce using rule 24 (assignlist -> arraydecl COMMA assignlist .)
    FOR             reduce using rule 24 (assignlist -> arraydecl COMMA assignlist .)
    FUNCTION        reduce using rule 24 (assignlist -> arraydecl COMMA assignlist .)
    NUMBER          reduce using rule 24 (assignlist -> arraydecl COMMA assignlist .)
    STRING          reduce using rule 24 (assignlist -> arraydecl COMMA assignlist .)
    UNDEFINED       reduce using rule 24 (assignlist -> arraydecl COMMA assignlist .)
    $end            reduce using rule 24 (assignlist -> arraydecl COMMA assignlist .)
    RIGHTBRACE      reduce using rule 24 (assignlist -> arraydecl COMMA assignlist .)
    ELSE            reduce using rule 24 (assignlist -> arraydecl COMMA assignlist .)


state 177

    (81) arrayCall -> ID LEFTBRACKET expression RIGHTBRACKET .

    PLUS            reduce using rule 81 (arrayCall -> ID LEFTBRACKET expression RIGHTBRACKET .)
    MINUS           reduce using rule 81 (arrayCall -> ID LEFTBRACKET expression RIGHTBRACKET .)
    INTO            reduce using rule 81 (arrayCall -> ID LEFTBRACKET expression RIGHTBRACKET .)
    DIVIDE          reduce using rule 81 (arrayCall -> ID LEFTBRACKET expression RIGHTBRACKET .)
    MOD             reduce using rule 81 (arrayCall -> ID LEFTBRACKET expression RIGHTBRACKET .)
    EXPO            reduce using rule 81 (arrayCall -> ID LEFTBRACKET expression RIGHTBRACKET .)
    BINAND          reduce using rule 81 (arrayCall -> ID LEFTBRACKET expression RIGHTBRACKET .)
    BINOR           reduce using rule 81 (arrayCall -> ID LEFTBRACKET expression RIGHTBRACKET .)
    BINXOR          reduce using rule 81 (arrayCall -> ID LEFTBRACKET expression RIGHTBRACKET .)
    LT              reduce using rule 81 (arrayCall -> ID LEFTBRACKET expression RIGHTBRACKET .)
    GT              reduce using rule 81 (arrayCall -> ID LEFTBRACKET expression RIGHTBRACKET .)
    DOUBLEEQ        reduce using rule 81 (arrayCall -> ID LEFTBRACKET expression RIGHTBRACKET .)
    NOTEQUAL        reduce using rule 81 (arrayCall -> ID LEFTBRACKET expression RIGHTBRACKET .)
    LTE             reduce using rule 81 (arrayCall -> ID LEFTBRACKET expression RIGHTBRACKET .)
    GTE             reduce using rule 81 (arrayCall -> ID LEFTBRACKET expression RIGHTBRACKET .)
    STREQUAL        reduce using rule 81 (arrayCall -> ID LEFTBRACKET expression RIGHTBRACKET .)
    STRNEQUAL       reduce using rule 81 (arrayCall -> ID LEFTBRACKET expression RIGHTBRACKET .)
    AND             reduce using rule 81 (arrayCall -> ID LEFTBRACKET expression RIGHTBRACKET .)
    OR              reduce using rule 81 (arrayCall -> ID LEFTBRACKET expression RIGHTBRACKET .)
    LSHIFT          reduce using rule 81 (arrayCall -> ID LEFTBRACKET expression RIGHTBRACKET .)
    RSHIFT          reduce using rule 81 (arrayCall -> ID LEFTBRACKET expression RIGHTBRACKET .)
    URSHIFT         reduce using rule 81 (arrayCall -> ID LEFTBRACKET expression RIGHTBRACKET .)
    SEMICOLON       reduce using rule 81 (arrayCall -> ID LEFTBRACKET expression RIGHTBRACKET .)
    BREAK           reduce using rule 81 (arrayCall -> ID LEFTBRACKET expression RIGHTBRACKET .)
    CONTINUE        reduce using rule 81 (arrayCall -> ID LEFTBRACKET expression RIGHTBRACKET .)
    RETURN          reduce using rule 81 (arrayCall -> ID LEFTBRACKET expression RIGHTBRACKET .)
    CONSOLE         reduce using rule 81 (arrayCall -> ID LEFTBRACKET expression RIGHTBRACKET .)
    VAR             reduce using rule 81 (arrayCall -> ID LEFTBRACKET expression RIGHTBRACKET .)
    LEFTPAREN       reduce using rule 81 (arrayCall -> ID LEFTBRACKET expression RIGHTBRACKET .)
    ID              reduce using rule 81 (arrayCall -> ID LEFTBRACKET expression RIGHTBRACKET .)
    EVAL            reduce using rule 81 (arrayCall -> ID LEFTBRACKET expression RIGHTBRACKET .)
    NOT             reduce using rule 81 (arrayCall -> ID LEFTBRACKET expression RIGHTBRACKET .)
    BINNOT          reduce using rule 81 (arrayCall -> ID LEFTBRACKET expression RIGHTBRACKET .)
    TYPEOF          reduce using rule 81 (arrayCall -> ID LEFTBRACKET expression RIGHTBRACKET .)
    IF              reduce using rule 81 (arrayCall -> ID LEFTBRACKET expression RIGHTBRACKET .)
    WHILE           reduce using rule 81 (arrayCall -> ID LEFTBRACKET expression RIGHTBRACKET .)
    FOR             reduce using rule 81 (arrayCall -> ID LEFTBRACKET expression RIGHTBRACKET .)
    FUNCTION        reduce using rule 81 (arrayCall -> ID LEFTBRACKET expression RIGHTBRACKET .)
    NUMBER          reduce using rule 81 (arrayCall -> ID LEFTBRACKET expression RIGHTBRACKET .)
    STRING          reduce using rule 81 (arrayCall -> ID LEFTBRACKET expression RIGHTBRACKET .)
    UNDEFINED       reduce using rule 81 (arrayCall -> ID LEFTBRACKET expression RIGHTBRACKET .)
    $end            reduce using rule 81 (arrayCall -> ID LEFTBRACKET expression RIGHTBRACKET .)
    LEFTBRACE       reduce using rule 81 (arrayCall -> ID LEFTBRACKET expression RIGHTBRACKET .)
    RIGHTBRACE      reduce using rule 81 (arrayCall -> ID LEFTBRACKET expression RIGHTBRACKET .)
    RIGHTPAREN      reduce using rule 81 (arrayCall -> ID LEFTBRACKET expression RIGHTBRACKET .)
    ELSE            reduce using rule 81 (arrayCall -> ID LEFTBRACKET expression RIGHTBRACKET .)
    RIGHTBRACKET    reduce using rule 81 (arrayCall -> ID LEFTBRACKET expression RIGHTBRACKET .)
    COMMA           reduce using rule 81 (arrayCall -> ID LEFTBRACKET expression RIGHTBRACKET .)


state 178

    (86) functioncall -> ID LEFTPAREN argList RIGHTPAREN .

    RIGHTPAREN      reduce using rule 86 (functioncall -> ID LEFTPAREN argList RIGHTPAREN .)
    PLUS            reduce using rule 86 (functioncall -> ID LEFTPAREN argList RIGHTPAREN .)
    MINUS           reduce using rule 86 (functioncall -> ID LEFTPAREN argList RIGHTPAREN .)
    INTO            reduce using rule 86 (functioncall -> ID LEFTPAREN argList RIGHTPAREN .)
    DIVIDE          reduce using rule 86 (functioncall -> ID LEFTPAREN argList RIGHTPAREN .)
    MOD             reduce using rule 86 (functioncall -> ID LEFTPAREN argList RIGHTPAREN .)
    EXPO            reduce using rule 86 (functioncall -> ID LEFTPAREN argList RIGHTPAREN .)
    BINAND          reduce using rule 86 (functioncall -> ID LEFTPAREN argList RIGHTPAREN .)
    BINOR           reduce using rule 86 (functioncall -> ID LEFTPAREN argList RIGHTPAREN .)
    BINXOR          reduce using rule 86 (functioncall -> ID LEFTPAREN argList RIGHTPAREN .)
    LT              reduce using rule 86 (functioncall -> ID LEFTPAREN argList RIGHTPAREN .)
    GT              reduce using rule 86 (functioncall -> ID LEFTPAREN argList RIGHTPAREN .)
    DOUBLEEQ        reduce using rule 86 (functioncall -> ID LEFTPAREN argList RIGHTPAREN .)
    NOTEQUAL        reduce using rule 86 (functioncall -> ID LEFTPAREN argList RIGHTPAREN .)
    LTE             reduce using rule 86 (functioncall -> ID LEFTPAREN argList RIGHTPAREN .)
    GTE             reduce using rule 86 (functioncall -> ID LEFTPAREN argList RIGHTPAREN .)
    STREQUAL        reduce using rule 86 (functioncall -> ID LEFTPAREN argList RIGHTPAREN .)
    STRNEQUAL       reduce using rule 86 (functioncall -> ID LEFTPAREN argList RIGHTPAREN .)
    AND             reduce using rule 86 (functioncall -> ID LEFTPAREN argList RIGHTPAREN .)
    OR              reduce using rule 86 (functioncall -> ID LEFTPAREN argList RIGHTPAREN .)
    LSHIFT          reduce using rule 86 (functioncall -> ID LEFTPAREN argList RIGHTPAREN .)
    RSHIFT          reduce using rule 86 (functioncall -> ID LEFTPAREN argList RIGHTPAREN .)
    URSHIFT         reduce using rule 86 (functioncall -> ID LEFTPAREN argList RIGHTPAREN .)
    COMMA           reduce using rule 86 (functioncall -> ID LEFTPAREN argList RIGHTPAREN .)
    RIGHTBRACKET    reduce using rule 86 (functioncall -> ID LEFTPAREN argList RIGHTPAREN .)
    SEMICOLON       reduce using rule 86 (functioncall -> ID LEFTPAREN argList RIGHTPAREN .)
    BREAK           reduce using rule 86 (functioncall -> ID LEFTPAREN argList RIGHTPAREN .)
    CONTINUE        reduce using rule 86 (functioncall -> ID LEFTPAREN argList RIGHTPAREN .)
    RETURN          reduce using rule 86 (functioncall -> ID LEFTPAREN argList RIGHTPAREN .)
    CONSOLE         reduce using rule 86 (functioncall -> ID LEFTPAREN argList RIGHTPAREN .)
    VAR             reduce using rule 86 (functioncall -> ID LEFTPAREN argList RIGHTPAREN .)
    LEFTPAREN       reduce using rule 86 (functioncall -> ID LEFTPAREN argList RIGHTPAREN .)
    ID              reduce using rule 86 (functioncall -> ID LEFTPAREN argList RIGHTPAREN .)
    EVAL            reduce using rule 86 (functioncall -> ID LEFTPAREN argList RIGHTPAREN .)
    NOT             reduce using rule 86 (functioncall -> ID LEFTPAREN argList RIGHTPAREN .)
    BINNOT          reduce using rule 86 (functioncall -> ID LEFTPAREN argList RIGHTPAREN .)
    TYPEOF          reduce using rule 86 (functioncall -> ID LEFTPAREN argList RIGHTPAREN .)
    IF              reduce using rule 86 (functioncall -> ID LEFTPAREN argList RIGHTPAREN .)
    WHILE           reduce using rule 86 (functioncall -> ID LEFTPAREN argList RIGHTPAREN .)
    FOR             reduce using rule 86 (functioncall -> ID LEFTPAREN argList RIGHTPAREN .)
    FUNCTION        reduce using rule 86 (functioncall -> ID LEFTPAREN argList RIGHTPAREN .)
    NUMBER          reduce using rule 86 (functioncall -> ID LEFTPAREN argList RIGHTPAREN .)
    STRING          reduce using rule 86 (functioncall -> ID LEFTPAREN argList RIGHTPAREN .)
    UNDEFINED       reduce using rule 86 (functioncall -> ID LEFTPAREN argList RIGHTPAREN .)
    $end            reduce using rule 86 (functioncall -> ID LEFTPAREN argList RIGHTPAREN .)
    RIGHTBRACE      reduce using rule 86 (functioncall -> ID LEFTPAREN argList RIGHTPAREN .)
    ELSE            reduce using rule 86 (functioncall -> ID LEFTPAREN argList RIGHTPAREN .)
    LEFTBRACE       reduce using rule 86 (functioncall -> ID LEFTPAREN argList RIGHTPAREN .)


state 179

    (88) argList -> expression COMMA . argList
    (87) argList -> . expression
    (88) argList -> . expression COMMA argList
    (89) argList -> .
    (50) expression -> . EVAL LEFTPAREN statements RIGHTPAREN
    (51) expression -> . EVAL LEFTPAREN block RIGHTPAREN
    (52) expression -> . expression PLUS expression
    (53) expression -> . expression MINUS expression
    (54) expression -> . expression INTO expression
    (55) expression -> . expression DIVIDE expression
    (56) expression -> . expression MOD expression
    (57) expression -> . expression EXPO expression
    (58) expression -> . LEFTPAREN expression RIGHTPAREN
    (59) expression -> . NOT expression
    (60) expression -> . expression BINAND expression
    (61) expression -> . expression BINOR expression
    (62) expression -> . expression BINXOR expression
    (63) expression -> . BINNOT expression
    (64) expression -> . expression LT expression
    (65) expression -> . expression GT expression
    (66) expression -> . expression DOUBLEEQ expression
    (67) expression -> . expression NOTEQUAL expression
    (68) expression -> . expression LTE expression
    (69) expression -> . expression GTE expression
    (70) expression -> . expression STREQUAL expression
    (71) expression -> . expression STRNEQUAL expression
    (72) expression -> . expression AND expression
    (73) expression -> . expression OR expression
    (74) expression -> . expression LSHIFT expression
    (75) expression -> . expression RSHIFT expression
    (76) expression -> . expression URSHIFT expression
    (77) expression -> . basicTypes
    (78) expression -> . functioncall
    (79) expression -> . arrayCall
    (80) expression -> . TYPEOF expression
    (82) basicTypes -> . NUMBER
    (83) basicTypes -> . STRING
    (84) basicTypes -> . ID
    (85) basicTypes -> . UNDEFINED
    (86) functioncall -> . ID LEFTPAREN argList RIGHTPAREN
    (81) arrayCall -> . ID LEFTBRACKET expression RIGHTBRACKET

    RIGHTPAREN      reduce using rule 89 (argList -> .)
    EVAL            shift and go to state 20
    LEFTPAREN       shift and go to state 36
    NOT             shift and go to state 32
    BINNOT          shift and go to state 25
    TYPEOF          shift and go to state 15
    NUMBER          shift and go to state 2
    STRING          shift and go to state 14
    ID              shift and go to state 37
    UNDEFINED       shift and go to state 21

    arrayCall                      shift and go to state 10
    functioncall                   shift and go to state 38
    argList                        shift and go to state 195
    expression                     shift and go to state 134
    basicTypes                     shift and go to state 33

state 180

    (46) arrayList -> arraydecl . COMMA arrayList
    (47) arrayList -> arraydecl .

    COMMA           shift and go to state 196
    RIGHTBRACKET    reduce using rule 47 (arrayList -> arraydecl .)


state 181

    (44) arraydecl -> ID EQ LEFTBRACKET arrayList . RIGHTBRACKET

    RIGHTBRACKET    shift and go to state 197


state 182

    (44) arraydecl -> ID . EQ LEFTBRACKET arrayList RIGHTBRACKET
    (84) basicTypes -> ID .
    (86) functioncall -> ID . LEFTPAREN argList RIGHTPAREN
    (81) arrayCall -> ID . LEFTBRACKET expression RIGHTBRACKET

    EQ              shift and go to state 198
    COMMA           reduce using rule 84 (basicTypes -> ID .)
    PLUS            reduce using rule 84 (basicTypes -> ID .)
    MINUS           reduce using rule 84 (basicTypes -> ID .)
    INTO            reduce using rule 84 (basicTypes -> ID .)
    DIVIDE          reduce using rule 84 (basicTypes -> ID .)
    MOD             reduce using rule 84 (basicTypes -> ID .)
    EXPO            reduce using rule 84 (basicTypes -> ID .)
    BINAND          reduce using rule 84 (basicTypes -> ID .)
    BINOR           reduce using rule 84 (basicTypes -> ID .)
    BINXOR          reduce using rule 84 (basicTypes -> ID .)
    LT              reduce using rule 84 (basicTypes -> ID .)
    GT              reduce using rule 84 (basicTypes -> ID .)
    DOUBLEEQ        reduce using rule 84 (basicTypes -> ID .)
    NOTEQUAL        reduce using rule 84 (basicTypes -> ID .)
    LTE             reduce using rule 84 (basicTypes -> ID .)
    GTE             reduce using rule 84 (basicTypes -> ID .)
    STREQUAL        reduce using rule 84 (basicTypes -> ID .)
    STRNEQUAL       reduce using rule 84 (basicTypes -> ID .)
    AND             reduce using rule 84 (basicTypes -> ID .)
    OR              reduce using rule 84 (basicTypes -> ID .)
    LSHIFT          reduce using rule 84 (basicTypes -> ID .)
    RSHIFT          reduce using rule 84 (basicTypes -> ID .)
    URSHIFT         reduce using rule 84 (basicTypes -> ID .)
    RIGHTBRACKET    reduce using rule 84 (basicTypes -> ID .)
    LEFTPAREN       shift and go to state 68
    LEFTBRACKET     shift and go to state 64


state 183

    (45) arrayList -> expression . COMMA arrayList
    (48) arrayList -> expression .
    (52) expression -> expression . PLUS expression
    (53) expression -> expression . MINUS expression
    (54) expression -> expression . INTO expression
    (55) expression -> expression . DIVIDE expression
    (56) expression -> expression . MOD expression
    (57) expression -> expression . EXPO expression
    (60) expression -> expression . BINAND expression
    (61) expression -> expression . BINOR expression
    (62) expression -> expression . BINXOR expression
    (64) expression -> expression . LT expression
    (65) expression -> expression . GT expression
    (66) expression -> expression . DOUBLEEQ expression
    (67) expression -> expression . NOTEQUAL expression
    (68) expression -> expression . LTE expression
    (69) expression -> expression . GTE expression
    (70) expression -> expression . STREQUAL expression
    (71) expression -> expression . STRNEQUAL expression
    (72) expression -> expression . AND expression
    (73) expression -> expression . OR expression
    (74) expression -> expression . LSHIFT expression
    (75) expression -> expression . RSHIFT expression
    (76) expression -> expression . URSHIFT expression

    COMMA           shift and go to state 199
    RIGHTBRACKET    reduce using rule 48 (arrayList -> expression .)
    PLUS            shift and go to state 92
    MINUS           shift and go to state 86
    INTO            shift and go to state 97
    DIVIDE          shift and go to state 96
    MOD             shift and go to state 103
    EXPO            shift and go to state 93
    BINAND          shift and go to state 88
    BINOR           shift and go to state 100
    BINXOR          shift and go to state 94
    LT              shift and go to state 91
    GT              shift and go to state 95
    DOUBLEEQ        shift and go to state 81
    NOTEQUAL        shift and go to state 83
    LTE             shift and go to state 98
    GTE             shift and go to state 87
    STREQUAL        shift and go to state 90
    STRNEQUAL       shift and go to state 84
    AND             shift and go to state 99
    OR              shift and go to state 102
    LSHIFT          shift and go to state 85
    RSHIFT          shift and go to state 82
    URSHIFT         shift and go to state 101


state 184

    (104) funcdecl -> FUNCTION ID LEFTPAREN argList . RIGHTPAREN cblock

    RIGHTPAREN      shift and go to state 200


state 185

    (92) ifelse -> IF expression cblock ELSE if .
    (15) statement -> if .

  ! reduce/reduce conflict for ELSE resolved using rule 15 (statement -> if .)
  ! reduce/reduce conflict for BREAK resolved using rule 15 (statement -> if .)
  ! reduce/reduce conflict for CONTINUE resolved using rule 15 (statement -> if .)
  ! reduce/reduce conflict for RETURN resolved using rule 15 (statement -> if .)
  ! reduce/reduce conflict for CONSOLE resolved using rule 15 (statement -> if .)
  ! reduce/reduce conflict for VAR resolved using rule 15 (statement -> if .)
  ! reduce/reduce conflict for LEFTPAREN resolved using rule 15 (statement -> if .)
  ! reduce/reduce conflict for ID resolved using rule 15 (statement -> if .)
  ! reduce/reduce conflict for EVAL resolved using rule 15 (statement -> if .)
  ! reduce/reduce conflict for NOT resolved using rule 15 (statement -> if .)
  ! reduce/reduce conflict for BINNOT resolved using rule 15 (statement -> if .)
  ! reduce/reduce conflict for TYPEOF resolved using rule 15 (statement -> if .)
  ! reduce/reduce conflict for IF resolved using rule 15 (statement -> if .)
  ! reduce/reduce conflict for WHILE resolved using rule 15 (statement -> if .)
  ! reduce/reduce conflict for FOR resolved using rule 15 (statement -> if .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 15 (statement -> if .)
  ! reduce/reduce conflict for NUMBER resolved using rule 15 (statement -> if .)
  ! reduce/reduce conflict for STRING resolved using rule 15 (statement -> if .)
  ! reduce/reduce conflict for UNDEFINED resolved using rule 15 (statement -> if .)
  ! reduce/reduce conflict for $end resolved using rule 15 (statement -> if .)
  ! reduce/reduce conflict for RIGHTBRACE resolved using rule 15 (statement -> if .)
  ! reduce/reduce conflict for RIGHTPAREN resolved using rule 15 (statement -> if .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 15 (statement -> if .)
    ELSE            reduce using rule 15 (statement -> if .)
    BREAK           reduce using rule 15 (statement -> if .)
    CONTINUE        reduce using rule 15 (statement -> if .)
    RETURN          reduce using rule 15 (statement -> if .)
    CONSOLE         reduce using rule 15 (statement -> if .)
    VAR             reduce using rule 15 (statement -> if .)
    LEFTPAREN       reduce using rule 15 (statement -> if .)
    ID              reduce using rule 15 (statement -> if .)
    EVAL            reduce using rule 15 (statement -> if .)
    NOT             reduce using rule 15 (statement -> if .)
    BINNOT          reduce using rule 15 (statement -> if .)
    TYPEOF          reduce using rule 15 (statement -> if .)
    IF              reduce using rule 15 (statement -> if .)
    WHILE           reduce using rule 15 (statement -> if .)
    FOR             reduce using rule 15 (statement -> if .)
    FUNCTION        reduce using rule 15 (statement -> if .)
    NUMBER          reduce using rule 15 (statement -> if .)
    STRING          reduce using rule 15 (statement -> if .)
    UNDEFINED       reduce using rule 15 (statement -> if .)
    $end            reduce using rule 15 (statement -> if .)
    RIGHTBRACE      reduce using rule 15 (statement -> if .)
    RIGHTPAREN      reduce using rule 15 (statement -> if .)
    SEMICOLON       reduce using rule 15 (statement -> if .)

  ! BREAK           [ reduce using rule 92 (ifelse -> IF expression cblock ELSE if .) ]
  ! CONTINUE        [ reduce using rule 92 (ifelse -> IF expression cblock ELSE if .) ]
  ! RETURN          [ reduce using rule 92 (ifelse -> IF expression cblock ELSE if .) ]
  ! CONSOLE         [ reduce using rule 92 (ifelse -> IF expression cblock ELSE if .) ]
  ! VAR             [ reduce using rule 92 (ifelse -> IF expression cblock ELSE if .) ]
  ! LEFTPAREN       [ reduce using rule 92 (ifelse -> IF expression cblock ELSE if .) ]
  ! ID              [ reduce using rule 92 (ifelse -> IF expression cblock ELSE if .) ]
  ! EVAL            [ reduce using rule 92 (ifelse -> IF expression cblock ELSE if .) ]
  ! NOT             [ reduce using rule 92 (ifelse -> IF expression cblock ELSE if .) ]
  ! BINNOT          [ reduce using rule 92 (ifelse -> IF expression cblock ELSE if .) ]
  ! TYPEOF          [ reduce using rule 92 (ifelse -> IF expression cblock ELSE if .) ]
  ! IF              [ reduce using rule 92 (ifelse -> IF expression cblock ELSE if .) ]
  ! WHILE           [ reduce using rule 92 (ifelse -> IF expression cblock ELSE if .) ]
  ! FOR             [ reduce using rule 92 (ifelse -> IF expression cblock ELSE if .) ]
  ! FUNCTION        [ reduce using rule 92 (ifelse -> IF expression cblock ELSE if .) ]
  ! NUMBER          [ reduce using rule 92 (ifelse -> IF expression cblock ELSE if .) ]
  ! STRING          [ reduce using rule 92 (ifelse -> IF expression cblock ELSE if .) ]
  ! UNDEFINED       [ reduce using rule 92 (ifelse -> IF expression cblock ELSE if .) ]
  ! RIGHTBRACE      [ reduce using rule 92 (ifelse -> IF expression cblock ELSE if .) ]
  ! ELSE            [ reduce using rule 92 (ifelse -> IF expression cblock ELSE if .) ]
  ! $end            [ reduce using rule 92 (ifelse -> IF expression cblock ELSE if .) ]
  ! RIGHTPAREN      [ reduce using rule 92 (ifelse -> IF expression cblock ELSE if .) ]
  ! SEMICOLON       [ reduce using rule 92 (ifelse -> IF expression cblock ELSE if .) ]


state 186

    (93) ifelse -> IF expression cblock ELSE ifelse .
    (16) statement -> ifelse .

  ! reduce/reduce conflict for ELSE resolved using rule 16 (statement -> ifelse .)
  ! reduce/reduce conflict for BREAK resolved using rule 16 (statement -> ifelse .)
  ! reduce/reduce conflict for CONTINUE resolved using rule 16 (statement -> ifelse .)
  ! reduce/reduce conflict for RETURN resolved using rule 16 (statement -> ifelse .)
  ! reduce/reduce conflict for CONSOLE resolved using rule 16 (statement -> ifelse .)
  ! reduce/reduce conflict for VAR resolved using rule 16 (statement -> ifelse .)
  ! reduce/reduce conflict for LEFTPAREN resolved using rule 16 (statement -> ifelse .)
  ! reduce/reduce conflict for ID resolved using rule 16 (statement -> ifelse .)
  ! reduce/reduce conflict for EVAL resolved using rule 16 (statement -> ifelse .)
  ! reduce/reduce conflict for NOT resolved using rule 16 (statement -> ifelse .)
  ! reduce/reduce conflict for BINNOT resolved using rule 16 (statement -> ifelse .)
  ! reduce/reduce conflict for TYPEOF resolved using rule 16 (statement -> ifelse .)
  ! reduce/reduce conflict for IF resolved using rule 16 (statement -> ifelse .)
  ! reduce/reduce conflict for WHILE resolved using rule 16 (statement -> ifelse .)
  ! reduce/reduce conflict for FOR resolved using rule 16 (statement -> ifelse .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 16 (statement -> ifelse .)
  ! reduce/reduce conflict for NUMBER resolved using rule 16 (statement -> ifelse .)
  ! reduce/reduce conflict for STRING resolved using rule 16 (statement -> ifelse .)
  ! reduce/reduce conflict for UNDEFINED resolved using rule 16 (statement -> ifelse .)
  ! reduce/reduce conflict for $end resolved using rule 16 (statement -> ifelse .)
  ! reduce/reduce conflict for RIGHTBRACE resolved using rule 16 (statement -> ifelse .)
  ! reduce/reduce conflict for RIGHTPAREN resolved using rule 16 (statement -> ifelse .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 16 (statement -> ifelse .)
    ELSE            reduce using rule 16 (statement -> ifelse .)
    BREAK           reduce using rule 16 (statement -> ifelse .)
    CONTINUE        reduce using rule 16 (statement -> ifelse .)
    RETURN          reduce using rule 16 (statement -> ifelse .)
    CONSOLE         reduce using rule 16 (statement -> ifelse .)
    VAR             reduce using rule 16 (statement -> ifelse .)
    LEFTPAREN       reduce using rule 16 (statement -> ifelse .)
    ID              reduce using rule 16 (statement -> ifelse .)
    EVAL            reduce using rule 16 (statement -> ifelse .)
    NOT             reduce using rule 16 (statement -> ifelse .)
    BINNOT          reduce using rule 16 (statement -> ifelse .)
    TYPEOF          reduce using rule 16 (statement -> ifelse .)
    IF              reduce using rule 16 (statement -> ifelse .)
    WHILE           reduce using rule 16 (statement -> ifelse .)
    FOR             reduce using rule 16 (statement -> ifelse .)
    FUNCTION        reduce using rule 16 (statement -> ifelse .)
    NUMBER          reduce using rule 16 (statement -> ifelse .)
    STRING          reduce using rule 16 (statement -> ifelse .)
    UNDEFINED       reduce using rule 16 (statement -> ifelse .)
    $end            reduce using rule 16 (statement -> ifelse .)
    RIGHTBRACE      reduce using rule 16 (statement -> ifelse .)
    RIGHTPAREN      reduce using rule 16 (statement -> ifelse .)
    SEMICOLON       reduce using rule 16 (statement -> ifelse .)

  ! BREAK           [ reduce using rule 93 (ifelse -> IF expression cblock ELSE ifelse .) ]
  ! CONTINUE        [ reduce using rule 93 (ifelse -> IF expression cblock ELSE ifelse .) ]
  ! RETURN          [ reduce using rule 93 (ifelse -> IF expression cblock ELSE ifelse .) ]
  ! CONSOLE         [ reduce using rule 93 (ifelse -> IF expression cblock ELSE ifelse .) ]
  ! VAR             [ reduce using rule 93 (ifelse -> IF expression cblock ELSE ifelse .) ]
  ! LEFTPAREN       [ reduce using rule 93 (ifelse -> IF expression cblock ELSE ifelse .) ]
  ! ID              [ reduce using rule 93 (ifelse -> IF expression cblock ELSE ifelse .) ]
  ! EVAL            [ reduce using rule 93 (ifelse -> IF expression cblock ELSE ifelse .) ]
  ! NOT             [ reduce using rule 93 (ifelse -> IF expression cblock ELSE ifelse .) ]
  ! BINNOT          [ reduce using rule 93 (ifelse -> IF expression cblock ELSE ifelse .) ]
  ! TYPEOF          [ reduce using rule 93 (ifelse -> IF expression cblock ELSE ifelse .) ]
  ! IF              [ reduce using rule 93 (ifelse -> IF expression cblock ELSE ifelse .) ]
  ! WHILE           [ reduce using rule 93 (ifelse -> IF expression cblock ELSE ifelse .) ]
  ! FOR             [ reduce using rule 93 (ifelse -> IF expression cblock ELSE ifelse .) ]
  ! FUNCTION        [ reduce using rule 93 (ifelse -> IF expression cblock ELSE ifelse .) ]
  ! NUMBER          [ reduce using rule 93 (ifelse -> IF expression cblock ELSE ifelse .) ]
  ! STRING          [ reduce using rule 93 (ifelse -> IF expression cblock ELSE ifelse .) ]
  ! UNDEFINED       [ reduce using rule 93 (ifelse -> IF expression cblock ELSE ifelse .) ]
  ! RIGHTBRACE      [ reduce using rule 93 (ifelse -> IF expression cblock ELSE ifelse .) ]
  ! ELSE            [ reduce using rule 93 (ifelse -> IF expression cblock ELSE ifelse .) ]
  ! $end            [ reduce using rule 93 (ifelse -> IF expression cblock ELSE ifelse .) ]
  ! RIGHTPAREN      [ reduce using rule 93 (ifelse -> IF expression cblock ELSE ifelse .) ]
  ! SEMICOLON       [ reduce using rule 93 (ifelse -> IF expression cblock ELSE ifelse .) ]


state 187

    (91) ifelse -> IF expression cblock ELSE cblock .

    BREAK           reduce using rule 91 (ifelse -> IF expression cblock ELSE cblock .)
    CONTINUE        reduce using rule 91 (ifelse -> IF expression cblock ELSE cblock .)
    RETURN          reduce using rule 91 (ifelse -> IF expression cblock ELSE cblock .)
    CONSOLE         reduce using rule 91 (ifelse -> IF expression cblock ELSE cblock .)
    VAR             reduce using rule 91 (ifelse -> IF expression cblock ELSE cblock .)
    LEFTPAREN       reduce using rule 91 (ifelse -> IF expression cblock ELSE cblock .)
    ID              reduce using rule 91 (ifelse -> IF expression cblock ELSE cblock .)
    EVAL            reduce using rule 91 (ifelse -> IF expression cblock ELSE cblock .)
    NOT             reduce using rule 91 (ifelse -> IF expression cblock ELSE cblock .)
    BINNOT          reduce using rule 91 (ifelse -> IF expression cblock ELSE cblock .)
    TYPEOF          reduce using rule 91 (ifelse -> IF expression cblock ELSE cblock .)
    IF              reduce using rule 91 (ifelse -> IF expression cblock ELSE cblock .)
    WHILE           reduce using rule 91 (ifelse -> IF expression cblock ELSE cblock .)
    FOR             reduce using rule 91 (ifelse -> IF expression cblock ELSE cblock .)
    FUNCTION        reduce using rule 91 (ifelse -> IF expression cblock ELSE cblock .)
    NUMBER          reduce using rule 91 (ifelse -> IF expression cblock ELSE cblock .)
    STRING          reduce using rule 91 (ifelse -> IF expression cblock ELSE cblock .)
    UNDEFINED       reduce using rule 91 (ifelse -> IF expression cblock ELSE cblock .)
    RIGHTBRACE      reduce using rule 91 (ifelse -> IF expression cblock ELSE cblock .)
    ELSE            reduce using rule 91 (ifelse -> IF expression cblock ELSE cblock .)
    $end            reduce using rule 91 (ifelse -> IF expression cblock ELSE cblock .)
    RIGHTPAREN      reduce using rule 91 (ifelse -> IF expression cblock ELSE cblock .)
    SEMICOLON       reduce using rule 91 (ifelse -> IF expression cblock ELSE cblock .)


state 188

    (96) whileloop -> WHILE LEFTPAREN expression RIGHTPAREN cblock .

    SEMICOLON       reduce using rule 96 (whileloop -> WHILE LEFTPAREN expression RIGHTPAREN cblock .)
    ELSE            reduce using rule 96 (whileloop -> WHILE LEFTPAREN expression RIGHTPAREN cblock .)
    BREAK           reduce using rule 96 (whileloop -> WHILE LEFTPAREN expression RIGHTPAREN cblock .)
    CONTINUE        reduce using rule 96 (whileloop -> WHILE LEFTPAREN expression RIGHTPAREN cblock .)
    RETURN          reduce using rule 96 (whileloop -> WHILE LEFTPAREN expression RIGHTPAREN cblock .)
    CONSOLE         reduce using rule 96 (whileloop -> WHILE LEFTPAREN expression RIGHTPAREN cblock .)
    VAR             reduce using rule 96 (whileloop -> WHILE LEFTPAREN expression RIGHTPAREN cblock .)
    LEFTPAREN       reduce using rule 96 (whileloop -> WHILE LEFTPAREN expression RIGHTPAREN cblock .)
    ID              reduce using rule 96 (whileloop -> WHILE LEFTPAREN expression RIGHTPAREN cblock .)
    EVAL            reduce using rule 96 (whileloop -> WHILE LEFTPAREN expression RIGHTPAREN cblock .)
    NOT             reduce using rule 96 (whileloop -> WHILE LEFTPAREN expression RIGHTPAREN cblock .)
    BINNOT          reduce using rule 96 (whileloop -> WHILE LEFTPAREN expression RIGHTPAREN cblock .)
    TYPEOF          reduce using rule 96 (whileloop -> WHILE LEFTPAREN expression RIGHTPAREN cblock .)
    IF              reduce using rule 96 (whileloop -> WHILE LEFTPAREN expression RIGHTPAREN cblock .)
    WHILE           reduce using rule 96 (whileloop -> WHILE LEFTPAREN expression RIGHTPAREN cblock .)
    FOR             reduce using rule 96 (whileloop -> WHILE LEFTPAREN expression RIGHTPAREN cblock .)
    FUNCTION        reduce using rule 96 (whileloop -> WHILE LEFTPAREN expression RIGHTPAREN cblock .)
    NUMBER          reduce using rule 96 (whileloop -> WHILE LEFTPAREN expression RIGHTPAREN cblock .)
    STRING          reduce using rule 96 (whileloop -> WHILE LEFTPAREN expression RIGHTPAREN cblock .)
    UNDEFINED       reduce using rule 96 (whileloop -> WHILE LEFTPAREN expression RIGHTPAREN cblock .)
    $end            reduce using rule 96 (whileloop -> WHILE LEFTPAREN expression RIGHTPAREN cblock .)
    RIGHTBRACE      reduce using rule 96 (whileloop -> WHILE LEFTPAREN expression RIGHTPAREN cblock .)
    RIGHTPAREN      reduce using rule 96 (whileloop -> WHILE LEFTPAREN expression RIGHTPAREN cblock .)


state 189

    (98) initialization -> assignment SEMICOLON initialization .

    SEMICOLON       reduce using rule 98 (initialization -> assignment SEMICOLON initialization .)


state 190

    (97) forloop -> FOR LEFTPAREN initialization SEMICOLON expression . SEMICOLON increment RIGHTPAREN cblock
    (52) expression -> expression . PLUS expression
    (53) expression -> expression . MINUS expression
    (54) expression -> expression . INTO expression
    (55) expression -> expression . DIVIDE expression
    (56) expression -> expression . MOD expression
    (57) expression -> expression . EXPO expression
    (60) expression -> expression . BINAND expression
    (61) expression -> expression . BINOR expression
    (62) expression -> expression . BINXOR expression
    (64) expression -> expression . LT expression
    (65) expression -> expression . GT expression
    (66) expression -> expression . DOUBLEEQ expression
    (67) expression -> expression . NOTEQUAL expression
    (68) expression -> expression . LTE expression
    (69) expression -> expression . GTE expression
    (70) expression -> expression . STREQUAL expression
    (71) expression -> expression . STRNEQUAL expression
    (72) expression -> expression . AND expression
    (73) expression -> expression . OR expression
    (74) expression -> expression . LSHIFT expression
    (75) expression -> expression . RSHIFT expression
    (76) expression -> expression . URSHIFT expression

    SEMICOLON       shift and go to state 201
    PLUS            shift and go to state 92
    MINUS           shift and go to state 86
    INTO            shift and go to state 97
    DIVIDE          shift and go to state 96
    MOD             shift and go to state 103
    EXPO            shift and go to state 93
    BINAND          shift and go to state 88
    BINOR           shift and go to state 100
    BINXOR          shift and go to state 94
    LT              shift and go to state 91
    GT              shift and go to state 95
    DOUBLEEQ        shift and go to state 81
    NOTEQUAL        shift and go to state 83
    LTE             shift and go to state 98
    GTE             shift and go to state 87
    STREQUAL        shift and go to state 90
    STRNEQUAL       shift and go to state 84
    AND             shift and go to state 99
    OR              shift and go to state 102
    LSHIFT          shift and go to state 85
    RSHIFT          shift and go to state 82
    URSHIFT         shift and go to state 101


state 191

    (99) initialization -> reassignment SEMICOLON initialization .

    SEMICOLON       reduce using rule 99 (initialization -> reassignment SEMICOLON initialization .)


state 192

    (13) statement -> CONSOLE DOT LOG LEFTPAREN expression . RIGHTPAREN SEMICOLON
    (111) statement -> CONSOLE DOT LOG LEFTPAREN expression . RIGHTPAREN
    (52) expression -> expression . PLUS expression
    (53) expression -> expression . MINUS expression
    (54) expression -> expression . INTO expression
    (55) expression -> expression . DIVIDE expression
    (56) expression -> expression . MOD expression
    (57) expression -> expression . EXPO expression
    (60) expression -> expression . BINAND expression
    (61) expression -> expression . BINOR expression
    (62) expression -> expression . BINXOR expression
    (64) expression -> expression . LT expression
    (65) expression -> expression . GT expression
    (66) expression -> expression . DOUBLEEQ expression
    (67) expression -> expression . NOTEQUAL expression
    (68) expression -> expression . LTE expression
    (69) expression -> expression . GTE expression
    (70) expression -> expression . STREQUAL expression
    (71) expression -> expression . STRNEQUAL expression
    (72) expression -> expression . AND expression
    (73) expression -> expression . OR expression
    (74) expression -> expression . LSHIFT expression
    (75) expression -> expression . RSHIFT expression
    (76) expression -> expression . URSHIFT expression

    RIGHTPAREN      shift and go to state 202
    PLUS            shift and go to state 92
    MINUS           shift and go to state 86
    INTO            shift and go to state 97
    DIVIDE          shift and go to state 96
    MOD             shift and go to state 103
    EXPO            shift and go to state 93
    BINAND          shift and go to state 88
    BINOR           shift and go to state 100
    BINXOR          shift and go to state 94
    LT              shift and go to state 91
    GT              shift and go to state 95
    DOUBLEEQ        shift and go to state 81
    NOTEQUAL        shift and go to state 83
    LTE             shift and go to state 98
    GTE             shift and go to state 87
    STREQUAL        shift and go to state 90
    STRNEQUAL       shift and go to state 84
    AND             shift and go to state 99
    OR              shift and go to state 102
    LSHIFT          shift and go to state 85
    RSHIFT          shift and go to state 82
    URSHIFT         shift and go to state 101


state 193

    (105) funcdecl -> VAR ID EQ FUNCTION LEFTPAREN . argList RIGHTPAREN cblock SEMICOLON
    (87) argList -> . expression
    (88) argList -> . expression COMMA argList
    (89) argList -> .
    (50) expression -> . EVAL LEFTPAREN statements RIGHTPAREN
    (51) expression -> . EVAL LEFTPAREN block RIGHTPAREN
    (52) expression -> . expression PLUS expression
    (53) expression -> . expression MINUS expression
    (54) expression -> . expression INTO expression
    (55) expression -> . expression DIVIDE expression
    (56) expression -> . expression MOD expression
    (57) expression -> . expression EXPO expression
    (58) expression -> . LEFTPAREN expression RIGHTPAREN
    (59) expression -> . NOT expression
    (60) expression -> . expression BINAND expression
    (61) expression -> . expression BINOR expression
    (62) expression -> . expression BINXOR expression
    (63) expression -> . BINNOT expression
    (64) expression -> . expression LT expression
    (65) expression -> . expression GT expression
    (66) expression -> . expression DOUBLEEQ expression
    (67) expression -> . expression NOTEQUAL expression
    (68) expression -> . expression LTE expression
    (69) expression -> . expression GTE expression
    (70) expression -> . expression STREQUAL expression
    (71) expression -> . expression STRNEQUAL expression
    (72) expression -> . expression AND expression
    (73) expression -> . expression OR expression
    (74) expression -> . expression LSHIFT expression
    (75) expression -> . expression RSHIFT expression
    (76) expression -> . expression URSHIFT expression
    (77) expression -> . basicTypes
    (78) expression -> . functioncall
    (79) expression -> . arrayCall
    (80) expression -> . TYPEOF expression
    (82) basicTypes -> . NUMBER
    (83) basicTypes -> . STRING
    (84) basicTypes -> . ID
    (85) basicTypes -> . UNDEFINED
    (86) functioncall -> . ID LEFTPAREN argList RIGHTPAREN
    (81) arrayCall -> . ID LEFTBRACKET expression RIGHTBRACKET

    RIGHTPAREN      reduce using rule 89 (argList -> .)
    EVAL            shift and go to state 20
    LEFTPAREN       shift and go to state 36
    NOT             shift and go to state 32
    BINNOT          shift and go to state 25
    TYPEOF          shift and go to state 15
    NUMBER          shift and go to state 2
    STRING          shift and go to state 14
    ID              shift and go to state 37
    UNDEFINED       shift and go to state 21

    arrayCall                      shift and go to state 10
    functioncall                   shift and go to state 38
    argList                        shift and go to state 203
    expression                     shift and go to state 134
    basicTypes                     shift and go to state 33

state 194

    (22) assignlist -> ID EQ expression COMMA . assignlist
    (22) assignlist -> . ID EQ expression COMMA assignlist
    (23) assignlist -> . ID COMMA assignlist
    (24) assignlist -> . arraydecl COMMA assignlist
    (25) assignlist -> . ID EQ expression
    (26) assignlist -> . ID
    (27) assignlist -> . arraydecl
    (44) arraydecl -> . ID EQ LEFTBRACKET arrayList RIGHTBRACKET

    ID              shift and go to state 116

    assignlist                     shift and go to state 204
    arraydecl                      shift and go to state 56

state 195

    (88) argList -> expression COMMA argList .

    RIGHTPAREN      reduce using rule 88 (argList -> expression COMMA argList .)


state 196

    (46) arrayList -> arraydecl COMMA . arrayList
    (45) arrayList -> . expression COMMA arrayList
    (46) arrayList -> . arraydecl COMMA arrayList
    (47) arrayList -> . arraydecl
    (48) arrayList -> . expression
    (49) arrayList -> .
    (50) expression -> . EVAL LEFTPAREN statements RIGHTPAREN
    (51) expression -> . EVAL LEFTPAREN block RIGHTPAREN
    (52) expression -> . expression PLUS expression
    (53) expression -> . expression MINUS expression
    (54) expression -> . expression INTO expression
    (55) expression -> . expression DIVIDE expression
    (56) expression -> . expression MOD expression
    (57) expression -> . expression EXPO expression
    (58) expression -> . LEFTPAREN expression RIGHTPAREN
    (59) expression -> . NOT expression
    (60) expression -> . expression BINAND expression
    (61) expression -> . expression BINOR expression
    (62) expression -> . expression BINXOR expression
    (63) expression -> . BINNOT expression
    (64) expression -> . expression LT expression
    (65) expression -> . expression GT expression
    (66) expression -> . expression DOUBLEEQ expression
    (67) expression -> . expression NOTEQUAL expression
    (68) expression -> . expression LTE expression
    (69) expression -> . expression GTE expression
    (70) expression -> . expression STREQUAL expression
    (71) expression -> . expression STRNEQUAL expression
    (72) expression -> . expression AND expression
    (73) expression -> . expression OR expression
    (74) expression -> . expression LSHIFT expression
    (75) expression -> . expression RSHIFT expression
    (76) expression -> . expression URSHIFT expression
    (77) expression -> . basicTypes
    (78) expression -> . functioncall
    (79) expression -> . arrayCall
    (80) expression -> . TYPEOF expression
    (44) arraydecl -> . ID EQ LEFTBRACKET arrayList RIGHTBRACKET
    (82) basicTypes -> . NUMBER
    (83) basicTypes -> . STRING
    (84) basicTypes -> . ID
    (85) basicTypes -> . UNDEFINED
    (86) functioncall -> . ID LEFTPAREN argList RIGHTPAREN
    (81) arrayCall -> . ID LEFTBRACKET expression RIGHTBRACKET

    RIGHTBRACKET    reduce using rule 49 (arrayList -> .)
    EVAL            shift and go to state 20
    LEFTPAREN       shift and go to state 36
    NOT             shift and go to state 32
    BINNOT          shift and go to state 25
    TYPEOF          shift and go to state 15
    ID              shift and go to state 182
    NUMBER          shift and go to state 2
    STRING          shift and go to state 14
    UNDEFINED       shift and go to state 21

    arrayList                      shift and go to state 205
    arrayCall                      shift and go to state 10
    functioncall                   shift and go to state 38
    arraydecl                      shift and go to state 180
    expression                     shift and go to state 183
    basicTypes                     shift and go to state 33

state 197

    (44) arraydecl -> ID EQ LEFTBRACKET arrayList RIGHTBRACKET .

    RIGHTPAREN      reduce using rule 44 (arraydecl -> ID EQ LEFTBRACKET arrayList RIGHTBRACKET .)
    COMMA           reduce using rule 44 (arraydecl -> ID EQ LEFTBRACKET arrayList RIGHTBRACKET .)
    SEMICOLON       reduce using rule 44 (arraydecl -> ID EQ LEFTBRACKET arrayList RIGHTBRACKET .)
    BREAK           reduce using rule 44 (arraydecl -> ID EQ LEFTBRACKET arrayList RIGHTBRACKET .)
    CONTINUE        reduce using rule 44 (arraydecl -> ID EQ LEFTBRACKET arrayList RIGHTBRACKET .)
    RETURN          reduce using rule 44 (arraydecl -> ID EQ LEFTBRACKET arrayList RIGHTBRACKET .)
    CONSOLE         reduce using rule 44 (arraydecl -> ID EQ LEFTBRACKET arrayList RIGHTBRACKET .)
    VAR             reduce using rule 44 (arraydecl -> ID EQ LEFTBRACKET arrayList RIGHTBRACKET .)
    LEFTPAREN       reduce using rule 44 (arraydecl -> ID EQ LEFTBRACKET arrayList RIGHTBRACKET .)
    ID              reduce using rule 44 (arraydecl -> ID EQ LEFTBRACKET arrayList RIGHTBRACKET .)
    EVAL            reduce using rule 44 (arraydecl -> ID EQ LEFTBRACKET arrayList RIGHTBRACKET .)
    NOT             reduce using rule 44 (arraydecl -> ID EQ LEFTBRACKET arrayList RIGHTBRACKET .)
    BINNOT          reduce using rule 44 (arraydecl -> ID EQ LEFTBRACKET arrayList RIGHTBRACKET .)
    TYPEOF          reduce using rule 44 (arraydecl -> ID EQ LEFTBRACKET arrayList RIGHTBRACKET .)
    IF              reduce using rule 44 (arraydecl -> ID EQ LEFTBRACKET arrayList RIGHTBRACKET .)
    WHILE           reduce using rule 44 (arraydecl -> ID EQ LEFTBRACKET arrayList RIGHTBRACKET .)
    FOR             reduce using rule 44 (arraydecl -> ID EQ LEFTBRACKET arrayList RIGHTBRACKET .)
    FUNCTION        reduce using rule 44 (arraydecl -> ID EQ LEFTBRACKET arrayList RIGHTBRACKET .)
    NUMBER          reduce using rule 44 (arraydecl -> ID EQ LEFTBRACKET arrayList RIGHTBRACKET .)
    STRING          reduce using rule 44 (arraydecl -> ID EQ LEFTBRACKET arrayList RIGHTBRACKET .)
    UNDEFINED       reduce using rule 44 (arraydecl -> ID EQ LEFTBRACKET arrayList RIGHTBRACKET .)
    $end            reduce using rule 44 (arraydecl -> ID EQ LEFTBRACKET arrayList RIGHTBRACKET .)
    RIGHTBRACE      reduce using rule 44 (arraydecl -> ID EQ LEFTBRACKET arrayList RIGHTBRACKET .)
    ELSE            reduce using rule 44 (arraydecl -> ID EQ LEFTBRACKET arrayList RIGHTBRACKET .)
    RIGHTBRACKET    reduce using rule 44 (arraydecl -> ID EQ LEFTBRACKET arrayList RIGHTBRACKET .)


state 198

    (44) arraydecl -> ID EQ . LEFTBRACKET arrayList RIGHTBRACKET

    LEFTBRACKET     shift and go to state 136


state 199

    (45) arrayList -> expression COMMA . arrayList
    (45) arrayList -> . expression COMMA arrayList
    (46) arrayList -> . arraydecl COMMA arrayList
    (47) arrayList -> . arraydecl
    (48) arrayList -> . expression
    (49) arrayList -> .
    (50) expression -> . EVAL LEFTPAREN statements RIGHTPAREN
    (51) expression -> . EVAL LEFTPAREN block RIGHTPAREN
    (52) expression -> . expression PLUS expression
    (53) expression -> . expression MINUS expression
    (54) expression -> . expression INTO expression
    (55) expression -> . expression DIVIDE expression
    (56) expression -> . expression MOD expression
    (57) expression -> . expression EXPO expression
    (58) expression -> . LEFTPAREN expression RIGHTPAREN
    (59) expression -> . NOT expression
    (60) expression -> . expression BINAND expression
    (61) expression -> . expression BINOR expression
    (62) expression -> . expression BINXOR expression
    (63) expression -> . BINNOT expression
    (64) expression -> . expression LT expression
    (65) expression -> . expression GT expression
    (66) expression -> . expression DOUBLEEQ expression
    (67) expression -> . expression NOTEQUAL expression
    (68) expression -> . expression LTE expression
    (69) expression -> . expression GTE expression
    (70) expression -> . expression STREQUAL expression
    (71) expression -> . expression STRNEQUAL expression
    (72) expression -> . expression AND expression
    (73) expression -> . expression OR expression
    (74) expression -> . expression LSHIFT expression
    (75) expression -> . expression RSHIFT expression
    (76) expression -> . expression URSHIFT expression
    (77) expression -> . basicTypes
    (78) expression -> . functioncall
    (79) expression -> . arrayCall
    (80) expression -> . TYPEOF expression
    (44) arraydecl -> . ID EQ LEFTBRACKET arrayList RIGHTBRACKET
    (82) basicTypes -> . NUMBER
    (83) basicTypes -> . STRING
    (84) basicTypes -> . ID
    (85) basicTypes -> . UNDEFINED
    (86) functioncall -> . ID LEFTPAREN argList RIGHTPAREN
    (81) arrayCall -> . ID LEFTBRACKET expression RIGHTBRACKET

    RIGHTBRACKET    reduce using rule 49 (arrayList -> .)
    EVAL            shift and go to state 20
    LEFTPAREN       shift and go to state 36
    NOT             shift and go to state 32
    BINNOT          shift and go to state 25
    TYPEOF          shift and go to state 15
    ID              shift and go to state 182
    NUMBER          shift and go to state 2
    STRING          shift and go to state 14
    UNDEFINED       shift and go to state 21

    arrayList                      shift and go to state 206
    arrayCall                      shift and go to state 10
    functioncall                   shift and go to state 38
    arraydecl                      shift and go to state 180
    expression                     shift and go to state 183
    basicTypes                     shift and go to state 33

state 200

    (104) funcdecl -> FUNCTION ID LEFTPAREN argList RIGHTPAREN . cblock
    (94) cblock -> . block
    (95) cblock -> . statement
    (3) block -> . LEFTBRACE statements RIGHTBRACE
    (4) block -> . LEFTBRACE RIGHTBRACE
    (7) statement -> . assignment SEMICOLON
    (8) statement -> . reassignment SEMICOLON
    (9) statement -> . BREAK SEMICOLON
    (10) statement -> . CONTINUE SEMICOLON
    (11) statement -> . RETURN expression SEMICOLON
    (12) statement -> . expression SEMICOLON
    (13) statement -> . CONSOLE DOT LOG LEFTPAREN expression RIGHTPAREN SEMICOLON
    (14) statement -> . functioncall SEMICOLON
    (15) statement -> . if
    (16) statement -> . ifelse
    (17) statement -> . whileloop
    (18) statement -> . forloop
    (19) statement -> . funcdecl
    (106) statement -> . assignment
    (107) statement -> . reassignment
    (108) statement -> . BREAK
    (109) statement -> . CONTINUE
    (110) statement -> . expression
    (111) statement -> . CONSOLE DOT LOG LEFTPAREN expression RIGHTPAREN
    (112) statement -> . functioncall
    (20) assignment -> . VAR assignlist
    (21) assignment -> . LEFTPAREN assignment RIGHTPAREN
    (28) reassignment -> . ID EQ expression
    (29) reassignment -> . ID PLUSEQ expression
    (30) reassignment -> . ID MINUSEQ expression
    (31) reassignment -> . ID INTOEQ expression
    (32) reassignment -> . ID DIVEQ expression
    (33) reassignment -> . ID INCR
    (34) reassignment -> . ID DECR
    (35) reassignment -> . ID LSHIFTEQ expression
    (36) reassignment -> . ID RSHIFTEQ expression
    (37) reassignment -> . ID URSHIFTEQ expression
    (38) reassignment -> . ID ANDEQ expression
    (39) reassignment -> . ID OREQ expression
    (40) reassignment -> . ID XOREQ expression
    (41) reassignment -> . ID MODEQ expression
    (42) reassignment -> . arraydecl
    (43) reassignment -> . LEFTPAREN reassignment RIGHTPAREN
    (50) expression -> . EVAL LEFTPAREN statements RIGHTPAREN
    (51) expression -> . EVAL LEFTPAREN block RIGHTPAREN
    (52) expression -> . expression PLUS expression
    (53) expression -> . expression MINUS expression
    (54) expression -> . expression INTO expression
    (55) expression -> . expression DIVIDE expression
    (56) expression -> . expression MOD expression
    (57) expression -> . expression EXPO expression
    (58) expression -> . LEFTPAREN expression RIGHTPAREN
    (59) expression -> . NOT expression
    (60) expression -> . expression BINAND expression
    (61) expression -> . expression BINOR expression
    (62) expression -> . expression BINXOR expression
    (63) expression -> . BINNOT expression
    (64) expression -> . expression LT expression
    (65) expression -> . expression GT expression
    (66) expression -> . expression DOUBLEEQ expression
    (67) expression -> . expression NOTEQUAL expression
    (68) expression -> . expression LTE expression
    (69) expression -> . expression GTE expression
    (70) expression -> . expression STREQUAL expression
    (71) expression -> . expression STRNEQUAL expression
    (72) expression -> . expression AND expression
    (73) expression -> . expression OR expression
    (74) expression -> . expression LSHIFT expression
    (75) expression -> . expression RSHIFT expression
    (76) expression -> . expression URSHIFT expression
    (77) expression -> . basicTypes
    (78) expression -> . functioncall
    (79) expression -> . arrayCall
    (80) expression -> . TYPEOF expression
    (86) functioncall -> . ID LEFTPAREN argList RIGHTPAREN
    (90) if -> . IF expression cblock
    (91) ifelse -> . IF expression cblock ELSE cblock
    (92) ifelse -> . IF expression cblock ELSE if
    (93) ifelse -> . IF expression cblock ELSE ifelse
    (96) whileloop -> . WHILE LEFTPAREN expression RIGHTPAREN cblock
    (97) forloop -> . FOR LEFTPAREN initialization SEMICOLON expression SEMICOLON increment RIGHTPAREN cblock
    (104) funcdecl -> . FUNCTION ID LEFTPAREN argList RIGHTPAREN cblock
    (105) funcdecl -> . VAR ID EQ FUNCTION LEFTPAREN argList RIGHTPAREN cblock SEMICOLON
    (44) arraydecl -> . ID EQ LEFTBRACKET arrayList RIGHTBRACKET
    (82) basicTypes -> . NUMBER
    (83) basicTypes -> . STRING
    (84) basicTypes -> . ID
    (85) basicTypes -> . UNDEFINED
    (81) arrayCall -> . ID LEFTBRACKET expression RIGHTBRACKET

    LEFTBRACE       shift and go to state 24
    BREAK           shift and go to state 27
    CONTINUE        shift and go to state 28
    RETURN          shift and go to state 5
    CONSOLE         shift and go to state 17
    VAR             shift and go to state 22
    LEFTPAREN       shift and go to state 19
    ID              shift and go to state 23
    EVAL            shift and go to state 20
    NOT             shift and go to state 32
    BINNOT          shift and go to state 25
    TYPEOF          shift and go to state 15
    IF              shift and go to state 3
    WHILE           shift and go to state 4
    FOR             shift and go to state 9
    FUNCTION        shift and go to state 31
    NUMBER          shift and go to state 2
    STRING          shift and go to state 14
    UNDEFINED       shift and go to state 21

    whileloop                      shift and go to state 7
    forloop                        shift and go to state 16
    assignment                     shift and go to state 18
    funcdecl                       shift and go to state 26
    basicTypes                     shift and go to state 33
    reassignment                   shift and go to state 8
    arraydecl                      shift and go to state 30
    arrayCall                      shift and go to state 10
    functioncall                   shift and go to state 29
    expression                     shift and go to state 34
    statement                      shift and go to state 104
    ifelse                         shift and go to state 12
    cblock                         shift and go to state 207
    block                          shift and go to state 106
    if                             shift and go to state 6

state 201

    (97) forloop -> FOR LEFTPAREN initialization SEMICOLON expression SEMICOLON . increment RIGHTPAREN cblock
    (102) increment -> . reassignment SEMICOLON increment
    (103) increment -> . reassignment
    (28) reassignment -> . ID EQ expression
    (29) reassignment -> . ID PLUSEQ expression
    (30) reassignment -> . ID MINUSEQ expression
    (31) reassignment -> . ID INTOEQ expression
    (32) reassignment -> . ID DIVEQ expression
    (33) reassignment -> . ID INCR
    (34) reassignment -> . ID DECR
    (35) reassignment -> . ID LSHIFTEQ expression
    (36) reassignment -> . ID RSHIFTEQ expression
    (37) reassignment -> . ID URSHIFTEQ expression
    (38) reassignment -> . ID ANDEQ expression
    (39) reassignment -> . ID OREQ expression
    (40) reassignment -> . ID XOREQ expression
    (41) reassignment -> . ID MODEQ expression
    (42) reassignment -> . arraydecl
    (43) reassignment -> . LEFTPAREN reassignment RIGHTPAREN
    (44) arraydecl -> . ID EQ LEFTBRACKET arrayList RIGHTBRACKET

    ID              shift and go to state 112
    LEFTPAREN       shift and go to state 209

    reassignment                   shift and go to state 210
    increment                      shift and go to state 208
    arraydecl                      shift and go to state 30

state 202

    (13) statement -> CONSOLE DOT LOG LEFTPAREN expression RIGHTPAREN . SEMICOLON
    (111) statement -> CONSOLE DOT LOG LEFTPAREN expression RIGHTPAREN .

  ! shift/reduce conflict for SEMICOLON resolved as shift
    SEMICOLON       shift and go to state 211
    ELSE            reduce using rule 111 (statement -> CONSOLE DOT LOG LEFTPAREN expression RIGHTPAREN .)
    BREAK           reduce using rule 111 (statement -> CONSOLE DOT LOG LEFTPAREN expression RIGHTPAREN .)
    CONTINUE        reduce using rule 111 (statement -> CONSOLE DOT LOG LEFTPAREN expression RIGHTPAREN .)
    RETURN          reduce using rule 111 (statement -> CONSOLE DOT LOG LEFTPAREN expression RIGHTPAREN .)
    CONSOLE         reduce using rule 111 (statement -> CONSOLE DOT LOG LEFTPAREN expression RIGHTPAREN .)
    VAR             reduce using rule 111 (statement -> CONSOLE DOT LOG LEFTPAREN expression RIGHTPAREN .)
    LEFTPAREN       reduce using rule 111 (statement -> CONSOLE DOT LOG LEFTPAREN expression RIGHTPAREN .)
    ID              reduce using rule 111 (statement -> CONSOLE DOT LOG LEFTPAREN expression RIGHTPAREN .)
    EVAL            reduce using rule 111 (statement -> CONSOLE DOT LOG LEFTPAREN expression RIGHTPAREN .)
    NOT             reduce using rule 111 (statement -> CONSOLE DOT LOG LEFTPAREN expression RIGHTPAREN .)
    BINNOT          reduce using rule 111 (statement -> CONSOLE DOT LOG LEFTPAREN expression RIGHTPAREN .)
    TYPEOF          reduce using rule 111 (statement -> CONSOLE DOT LOG LEFTPAREN expression RIGHTPAREN .)
    IF              reduce using rule 111 (statement -> CONSOLE DOT LOG LEFTPAREN expression RIGHTPAREN .)
    WHILE           reduce using rule 111 (statement -> CONSOLE DOT LOG LEFTPAREN expression RIGHTPAREN .)
    FOR             reduce using rule 111 (statement -> CONSOLE DOT LOG LEFTPAREN expression RIGHTPAREN .)
    FUNCTION        reduce using rule 111 (statement -> CONSOLE DOT LOG LEFTPAREN expression RIGHTPAREN .)
    NUMBER          reduce using rule 111 (statement -> CONSOLE DOT LOG LEFTPAREN expression RIGHTPAREN .)
    STRING          reduce using rule 111 (statement -> CONSOLE DOT LOG LEFTPAREN expression RIGHTPAREN .)
    UNDEFINED       reduce using rule 111 (statement -> CONSOLE DOT LOG LEFTPAREN expression RIGHTPAREN .)
    $end            reduce using rule 111 (statement -> CONSOLE DOT LOG LEFTPAREN expression RIGHTPAREN .)
    RIGHTBRACE      reduce using rule 111 (statement -> CONSOLE DOT LOG LEFTPAREN expression RIGHTPAREN .)
    RIGHTPAREN      reduce using rule 111 (statement -> CONSOLE DOT LOG LEFTPAREN expression RIGHTPAREN .)

  ! SEMICOLON       [ reduce using rule 111 (statement -> CONSOLE DOT LOG LEFTPAREN expression RIGHTPAREN .) ]


state 203

    (105) funcdecl -> VAR ID EQ FUNCTION LEFTPAREN argList . RIGHTPAREN cblock SEMICOLON

    RIGHTPAREN      shift and go to state 212


state 204

    (22) assignlist -> ID EQ expression COMMA assignlist .

    RIGHTPAREN      reduce using rule 22 (assignlist -> ID EQ expression COMMA assignlist .)
    SEMICOLON       reduce using rule 22 (assignlist -> ID EQ expression COMMA assignlist .)
    BREAK           reduce using rule 22 (assignlist -> ID EQ expression COMMA assignlist .)
    CONTINUE        reduce using rule 22 (assignlist -> ID EQ expression COMMA assignlist .)
    RETURN          reduce using rule 22 (assignlist -> ID EQ expression COMMA assignlist .)
    CONSOLE         reduce using rule 22 (assignlist -> ID EQ expression COMMA assignlist .)
    VAR             reduce using rule 22 (assignlist -> ID EQ expression COMMA assignlist .)
    LEFTPAREN       reduce using rule 22 (assignlist -> ID EQ expression COMMA assignlist .)
    ID              reduce using rule 22 (assignlist -> ID EQ expression COMMA assignlist .)
    EVAL            reduce using rule 22 (assignlist -> ID EQ expression COMMA assignlist .)
    NOT             reduce using rule 22 (assignlist -> ID EQ expression COMMA assignlist .)
    BINNOT          reduce using rule 22 (assignlist -> ID EQ expression COMMA assignlist .)
    TYPEOF          reduce using rule 22 (assignlist -> ID EQ expression COMMA assignlist .)
    IF              reduce using rule 22 (assignlist -> ID EQ expression COMMA assignlist .)
    WHILE           reduce using rule 22 (assignlist -> ID EQ expression COMMA assignlist .)
    FOR             reduce using rule 22 (assignlist -> ID EQ expression COMMA assignlist .)
    FUNCTION        reduce using rule 22 (assignlist -> ID EQ expression COMMA assignlist .)
    NUMBER          reduce using rule 22 (assignlist -> ID EQ expression COMMA assignlist .)
    STRING          reduce using rule 22 (assignlist -> ID EQ expression COMMA assignlist .)
    UNDEFINED       reduce using rule 22 (assignlist -> ID EQ expression COMMA assignlist .)
    $end            reduce using rule 22 (assignlist -> ID EQ expression COMMA assignlist .)
    RIGHTBRACE      reduce using rule 22 (assignlist -> ID EQ expression COMMA assignlist .)
    ELSE            reduce using rule 22 (assignlist -> ID EQ expression COMMA assignlist .)


state 205

    (46) arrayList -> arraydecl COMMA arrayList .

    RIGHTBRACKET    reduce using rule 46 (arrayList -> arraydecl COMMA arrayList .)


state 206

    (45) arrayList -> expression COMMA arrayList .

    RIGHTBRACKET    reduce using rule 45 (arrayList -> expression COMMA arrayList .)


state 207

    (104) funcdecl -> FUNCTION ID LEFTPAREN argList RIGHTPAREN cblock .

    ELSE            reduce using rule 104 (funcdecl -> FUNCTION ID LEFTPAREN argList RIGHTPAREN cblock .)
    BREAK           reduce using rule 104 (funcdecl -> FUNCTION ID LEFTPAREN argList RIGHTPAREN cblock .)
    CONTINUE        reduce using rule 104 (funcdecl -> FUNCTION ID LEFTPAREN argList RIGHTPAREN cblock .)
    RETURN          reduce using rule 104 (funcdecl -> FUNCTION ID LEFTPAREN argList RIGHTPAREN cblock .)
    CONSOLE         reduce using rule 104 (funcdecl -> FUNCTION ID LEFTPAREN argList RIGHTPAREN cblock .)
    VAR             reduce using rule 104 (funcdecl -> FUNCTION ID LEFTPAREN argList RIGHTPAREN cblock .)
    LEFTPAREN       reduce using rule 104 (funcdecl -> FUNCTION ID LEFTPAREN argList RIGHTPAREN cblock .)
    ID              reduce using rule 104 (funcdecl -> FUNCTION ID LEFTPAREN argList RIGHTPAREN cblock .)
    EVAL            reduce using rule 104 (funcdecl -> FUNCTION ID LEFTPAREN argList RIGHTPAREN cblock .)
    NOT             reduce using rule 104 (funcdecl -> FUNCTION ID LEFTPAREN argList RIGHTPAREN cblock .)
    BINNOT          reduce using rule 104 (funcdecl -> FUNCTION ID LEFTPAREN argList RIGHTPAREN cblock .)
    TYPEOF          reduce using rule 104 (funcdecl -> FUNCTION ID LEFTPAREN argList RIGHTPAREN cblock .)
    IF              reduce using rule 104 (funcdecl -> FUNCTION ID LEFTPAREN argList RIGHTPAREN cblock .)
    WHILE           reduce using rule 104 (funcdecl -> FUNCTION ID LEFTPAREN argList RIGHTPAREN cblock .)
    FOR             reduce using rule 104 (funcdecl -> FUNCTION ID LEFTPAREN argList RIGHTPAREN cblock .)
    FUNCTION        reduce using rule 104 (funcdecl -> FUNCTION ID LEFTPAREN argList RIGHTPAREN cblock .)
    NUMBER          reduce using rule 104 (funcdecl -> FUNCTION ID LEFTPAREN argList RIGHTPAREN cblock .)
    STRING          reduce using rule 104 (funcdecl -> FUNCTION ID LEFTPAREN argList RIGHTPAREN cblock .)
    UNDEFINED       reduce using rule 104 (funcdecl -> FUNCTION ID LEFTPAREN argList RIGHTPAREN cblock .)
    $end            reduce using rule 104 (funcdecl -> FUNCTION ID LEFTPAREN argList RIGHTPAREN cblock .)
    RIGHTBRACE      reduce using rule 104 (funcdecl -> FUNCTION ID LEFTPAREN argList RIGHTPAREN cblock .)
    RIGHTPAREN      reduce using rule 104 (funcdecl -> FUNCTION ID LEFTPAREN argList RIGHTPAREN cblock .)
    SEMICOLON       reduce using rule 104 (funcdecl -> FUNCTION ID LEFTPAREN argList RIGHTPAREN cblock .)


state 208

    (97) forloop -> FOR LEFTPAREN initialization SEMICOLON expression SEMICOLON increment . RIGHTPAREN cblock

    RIGHTPAREN      shift and go to state 213


state 209

    (43) reassignment -> LEFTPAREN . reassignment RIGHTPAREN
    (28) reassignment -> . ID EQ expression
    (29) reassignment -> . ID PLUSEQ expression
    (30) reassignment -> . ID MINUSEQ expression
    (31) reassignment -> . ID INTOEQ expression
    (32) reassignment -> . ID DIVEQ expression
    (33) reassignment -> . ID INCR
    (34) reassignment -> . ID DECR
    (35) reassignment -> . ID LSHIFTEQ expression
    (36) reassignment -> . ID RSHIFTEQ expression
    (37) reassignment -> . ID URSHIFTEQ expression
    (38) reassignment -> . ID ANDEQ expression
    (39) reassignment -> . ID OREQ expression
    (40) reassignment -> . ID XOREQ expression
    (41) reassignment -> . ID MODEQ expression
    (42) reassignment -> . arraydecl
    (43) reassignment -> . LEFTPAREN reassignment RIGHTPAREN
    (44) arraydecl -> . ID EQ LEFTBRACKET arrayList RIGHTBRACKET

    ID              shift and go to state 112
    LEFTPAREN       shift and go to state 209

    reassignment                   shift and go to state 51
    arraydecl                      shift and go to state 30

state 210

    (102) increment -> reassignment . SEMICOLON increment
    (103) increment -> reassignment .

    SEMICOLON       shift and go to state 214
    RIGHTPAREN      reduce using rule 103 (increment -> reassignment .)


state 211

    (13) statement -> CONSOLE DOT LOG LEFTPAREN expression RIGHTPAREN SEMICOLON .

    ELSE            reduce using rule 13 (statement -> CONSOLE DOT LOG LEFTPAREN expression RIGHTPAREN SEMICOLON .)
    BREAK           reduce using rule 13 (statement -> CONSOLE DOT LOG LEFTPAREN expression RIGHTPAREN SEMICOLON .)
    CONTINUE        reduce using rule 13 (statement -> CONSOLE DOT LOG LEFTPAREN expression RIGHTPAREN SEMICOLON .)
    RETURN          reduce using rule 13 (statement -> CONSOLE DOT LOG LEFTPAREN expression RIGHTPAREN SEMICOLON .)
    CONSOLE         reduce using rule 13 (statement -> CONSOLE DOT LOG LEFTPAREN expression RIGHTPAREN SEMICOLON .)
    VAR             reduce using rule 13 (statement -> CONSOLE DOT LOG LEFTPAREN expression RIGHTPAREN SEMICOLON .)
    LEFTPAREN       reduce using rule 13 (statement -> CONSOLE DOT LOG LEFTPAREN expression RIGHTPAREN SEMICOLON .)
    ID              reduce using rule 13 (statement -> CONSOLE DOT LOG LEFTPAREN expression RIGHTPAREN SEMICOLON .)
    EVAL            reduce using rule 13 (statement -> CONSOLE DOT LOG LEFTPAREN expression RIGHTPAREN SEMICOLON .)
    NOT             reduce using rule 13 (statement -> CONSOLE DOT LOG LEFTPAREN expression RIGHTPAREN SEMICOLON .)
    BINNOT          reduce using rule 13 (statement -> CONSOLE DOT LOG LEFTPAREN expression RIGHTPAREN SEMICOLON .)
    TYPEOF          reduce using rule 13 (statement -> CONSOLE DOT LOG LEFTPAREN expression RIGHTPAREN SEMICOLON .)
    IF              reduce using rule 13 (statement -> CONSOLE DOT LOG LEFTPAREN expression RIGHTPAREN SEMICOLON .)
    WHILE           reduce using rule 13 (statement -> CONSOLE DOT LOG LEFTPAREN expression RIGHTPAREN SEMICOLON .)
    FOR             reduce using rule 13 (statement -> CONSOLE DOT LOG LEFTPAREN expression RIGHTPAREN SEMICOLON .)
    FUNCTION        reduce using rule 13 (statement -> CONSOLE DOT LOG LEFTPAREN expression RIGHTPAREN SEMICOLON .)
    NUMBER          reduce using rule 13 (statement -> CONSOLE DOT LOG LEFTPAREN expression RIGHTPAREN SEMICOLON .)
    STRING          reduce using rule 13 (statement -> CONSOLE DOT LOG LEFTPAREN expression RIGHTPAREN SEMICOLON .)
    UNDEFINED       reduce using rule 13 (statement -> CONSOLE DOT LOG LEFTPAREN expression RIGHTPAREN SEMICOLON .)
    $end            reduce using rule 13 (statement -> CONSOLE DOT LOG LEFTPAREN expression RIGHTPAREN SEMICOLON .)
    RIGHTBRACE      reduce using rule 13 (statement -> CONSOLE DOT LOG LEFTPAREN expression RIGHTPAREN SEMICOLON .)
    RIGHTPAREN      reduce using rule 13 (statement -> CONSOLE DOT LOG LEFTPAREN expression RIGHTPAREN SEMICOLON .)
    SEMICOLON       reduce using rule 13 (statement -> CONSOLE DOT LOG LEFTPAREN expression RIGHTPAREN SEMICOLON .)


state 212

    (105) funcdecl -> VAR ID EQ FUNCTION LEFTPAREN argList RIGHTPAREN . cblock SEMICOLON
    (94) cblock -> . block
    (95) cblock -> . statement
    (3) block -> . LEFTBRACE statements RIGHTBRACE
    (4) block -> . LEFTBRACE RIGHTBRACE
    (7) statement -> . assignment SEMICOLON
    (8) statement -> . reassignment SEMICOLON
    (9) statement -> . BREAK SEMICOLON
    (10) statement -> . CONTINUE SEMICOLON
    (11) statement -> . RETURN expression SEMICOLON
    (12) statement -> . expression SEMICOLON
    (13) statement -> . CONSOLE DOT LOG LEFTPAREN expression RIGHTPAREN SEMICOLON
    (14) statement -> . functioncall SEMICOLON
    (15) statement -> . if
    (16) statement -> . ifelse
    (17) statement -> . whileloop
    (18) statement -> . forloop
    (19) statement -> . funcdecl
    (106) statement -> . assignment
    (107) statement -> . reassignment
    (108) statement -> . BREAK
    (109) statement -> . CONTINUE
    (110) statement -> . expression
    (111) statement -> . CONSOLE DOT LOG LEFTPAREN expression RIGHTPAREN
    (112) statement -> . functioncall
    (20) assignment -> . VAR assignlist
    (21) assignment -> . LEFTPAREN assignment RIGHTPAREN
    (28) reassignment -> . ID EQ expression
    (29) reassignment -> . ID PLUSEQ expression
    (30) reassignment -> . ID MINUSEQ expression
    (31) reassignment -> . ID INTOEQ expression
    (32) reassignment -> . ID DIVEQ expression
    (33) reassignment -> . ID INCR
    (34) reassignment -> . ID DECR
    (35) reassignment -> . ID LSHIFTEQ expression
    (36) reassignment -> . ID RSHIFTEQ expression
    (37) reassignment -> . ID URSHIFTEQ expression
    (38) reassignment -> . ID ANDEQ expression
    (39) reassignment -> . ID OREQ expression
    (40) reassignment -> . ID XOREQ expression
    (41) reassignment -> . ID MODEQ expression
    (42) reassignment -> . arraydecl
    (43) reassignment -> . LEFTPAREN reassignment RIGHTPAREN
    (50) expression -> . EVAL LEFTPAREN statements RIGHTPAREN
    (51) expression -> . EVAL LEFTPAREN block RIGHTPAREN
    (52) expression -> . expression PLUS expression
    (53) expression -> . expression MINUS expression
    (54) expression -> . expression INTO expression
    (55) expression -> . expression DIVIDE expression
    (56) expression -> . expression MOD expression
    (57) expression -> . expression EXPO expression
    (58) expression -> . LEFTPAREN expression RIGHTPAREN
    (59) expression -> . NOT expression
    (60) expression -> . expression BINAND expression
    (61) expression -> . expression BINOR expression
    (62) expression -> . expression BINXOR expression
    (63) expression -> . BINNOT expression
    (64) expression -> . expression LT expression
    (65) expression -> . expression GT expression
    (66) expression -> . expression DOUBLEEQ expression
    (67) expression -> . expression NOTEQUAL expression
    (68) expression -> . expression LTE expression
    (69) expression -> . expression GTE expression
    (70) expression -> . expression STREQUAL expression
    (71) expression -> . expression STRNEQUAL expression
    (72) expression -> . expression AND expression
    (73) expression -> . expression OR expression
    (74) expression -> . expression LSHIFT expression
    (75) expression -> . expression RSHIFT expression
    (76) expression -> . expression URSHIFT expression
    (77) expression -> . basicTypes
    (78) expression -> . functioncall
    (79) expression -> . arrayCall
    (80) expression -> . TYPEOF expression
    (86) functioncall -> . ID LEFTPAREN argList RIGHTPAREN
    (90) if -> . IF expression cblock
    (91) ifelse -> . IF expression cblock ELSE cblock
    (92) ifelse -> . IF expression cblock ELSE if
    (93) ifelse -> . IF expression cblock ELSE ifelse
    (96) whileloop -> . WHILE LEFTPAREN expression RIGHTPAREN cblock
    (97) forloop -> . FOR LEFTPAREN initialization SEMICOLON expression SEMICOLON increment RIGHTPAREN cblock
    (104) funcdecl -> . FUNCTION ID LEFTPAREN argList RIGHTPAREN cblock
    (105) funcdecl -> . VAR ID EQ FUNCTION LEFTPAREN argList RIGHTPAREN cblock SEMICOLON
    (44) arraydecl -> . ID EQ LEFTBRACKET arrayList RIGHTBRACKET
    (82) basicTypes -> . NUMBER
    (83) basicTypes -> . STRING
    (84) basicTypes -> . ID
    (85) basicTypes -> . UNDEFINED
    (81) arrayCall -> . ID LEFTBRACKET expression RIGHTBRACKET

    LEFTBRACE       shift and go to state 24
    BREAK           shift and go to state 27
    CONTINUE        shift and go to state 28
    RETURN          shift and go to state 5
    CONSOLE         shift and go to state 17
    VAR             shift and go to state 22
    LEFTPAREN       shift and go to state 19
    ID              shift and go to state 23
    EVAL            shift and go to state 20
    NOT             shift and go to state 32
    BINNOT          shift and go to state 25
    TYPEOF          shift and go to state 15
    IF              shift and go to state 3
    WHILE           shift and go to state 4
    FOR             shift and go to state 9
    FUNCTION        shift and go to state 31
    NUMBER          shift and go to state 2
    STRING          shift and go to state 14
    UNDEFINED       shift and go to state 21

    whileloop                      shift and go to state 7
    forloop                        shift and go to state 16
    assignment                     shift and go to state 18
    funcdecl                       shift and go to state 26
    basicTypes                     shift and go to state 33
    reassignment                   shift and go to state 8
    arraydecl                      shift and go to state 30
    arrayCall                      shift and go to state 10
    functioncall                   shift and go to state 29
    expression                     shift and go to state 34
    statement                      shift and go to state 104
    ifelse                         shift and go to state 12
    cblock                         shift and go to state 215
    block                          shift and go to state 106
    if                             shift and go to state 6

state 213

    (97) forloop -> FOR LEFTPAREN initialization SEMICOLON expression SEMICOLON increment RIGHTPAREN . cblock
    (94) cblock -> . block
    (95) cblock -> . statement
    (3) block -> . LEFTBRACE statements RIGHTBRACE
    (4) block -> . LEFTBRACE RIGHTBRACE
    (7) statement -> . assignment SEMICOLON
    (8) statement -> . reassignment SEMICOLON
    (9) statement -> . BREAK SEMICOLON
    (10) statement -> . CONTINUE SEMICOLON
    (11) statement -> . RETURN expression SEMICOLON
    (12) statement -> . expression SEMICOLON
    (13) statement -> . CONSOLE DOT LOG LEFTPAREN expression RIGHTPAREN SEMICOLON
    (14) statement -> . functioncall SEMICOLON
    (15) statement -> . if
    (16) statement -> . ifelse
    (17) statement -> . whileloop
    (18) statement -> . forloop
    (19) statement -> . funcdecl
    (106) statement -> . assignment
    (107) statement -> . reassignment
    (108) statement -> . BREAK
    (109) statement -> . CONTINUE
    (110) statement -> . expression
    (111) statement -> . CONSOLE DOT LOG LEFTPAREN expression RIGHTPAREN
    (112) statement -> . functioncall
    (20) assignment -> . VAR assignlist
    (21) assignment -> . LEFTPAREN assignment RIGHTPAREN
    (28) reassignment -> . ID EQ expression
    (29) reassignment -> . ID PLUSEQ expression
    (30) reassignment -> . ID MINUSEQ expression
    (31) reassignment -> . ID INTOEQ expression
    (32) reassignment -> . ID DIVEQ expression
    (33) reassignment -> . ID INCR
    (34) reassignment -> . ID DECR
    (35) reassignment -> . ID LSHIFTEQ expression
    (36) reassignment -> . ID RSHIFTEQ expression
    (37) reassignment -> . ID URSHIFTEQ expression
    (38) reassignment -> . ID ANDEQ expression
    (39) reassignment -> . ID OREQ expression
    (40) reassignment -> . ID XOREQ expression
    (41) reassignment -> . ID MODEQ expression
    (42) reassignment -> . arraydecl
    (43) reassignment -> . LEFTPAREN reassignment RIGHTPAREN
    (50) expression -> . EVAL LEFTPAREN statements RIGHTPAREN
    (51) expression -> . EVAL LEFTPAREN block RIGHTPAREN
    (52) expression -> . expression PLUS expression
    (53) expression -> . expression MINUS expression
    (54) expression -> . expression INTO expression
    (55) expression -> . expression DIVIDE expression
    (56) expression -> . expression MOD expression
    (57) expression -> . expression EXPO expression
    (58) expression -> . LEFTPAREN expression RIGHTPAREN
    (59) expression -> . NOT expression
    (60) expression -> . expression BINAND expression
    (61) expression -> . expression BINOR expression
    (62) expression -> . expression BINXOR expression
    (63) expression -> . BINNOT expression
    (64) expression -> . expression LT expression
    (65) expression -> . expression GT expression
    (66) expression -> . expression DOUBLEEQ expression
    (67) expression -> . expression NOTEQUAL expression
    (68) expression -> . expression LTE expression
    (69) expression -> . expression GTE expression
    (70) expression -> . expression STREQUAL expression
    (71) expression -> . expression STRNEQUAL expression
    (72) expression -> . expression AND expression
    (73) expression -> . expression OR expression
    (74) expression -> . expression LSHIFT expression
    (75) expression -> . expression RSHIFT expression
    (76) expression -> . expression URSHIFT expression
    (77) expression -> . basicTypes
    (78) expression -> . functioncall
    (79) expression -> . arrayCall
    (80) expression -> . TYPEOF expression
    (86) functioncall -> . ID LEFTPAREN argList RIGHTPAREN
    (90) if -> . IF expression cblock
    (91) ifelse -> . IF expression cblock ELSE cblock
    (92) ifelse -> . IF expression cblock ELSE if
    (93) ifelse -> . IF expression cblock ELSE ifelse
    (96) whileloop -> . WHILE LEFTPAREN expression RIGHTPAREN cblock
    (97) forloop -> . FOR LEFTPAREN initialization SEMICOLON expression SEMICOLON increment RIGHTPAREN cblock
    (104) funcdecl -> . FUNCTION ID LEFTPAREN argList RIGHTPAREN cblock
    (105) funcdecl -> . VAR ID EQ FUNCTION LEFTPAREN argList RIGHTPAREN cblock SEMICOLON
    (44) arraydecl -> . ID EQ LEFTBRACKET arrayList RIGHTBRACKET
    (82) basicTypes -> . NUMBER
    (83) basicTypes -> . STRING
    (84) basicTypes -> . ID
    (85) basicTypes -> . UNDEFINED
    (81) arrayCall -> . ID LEFTBRACKET expression RIGHTBRACKET

    LEFTBRACE       shift and go to state 24
    BREAK           shift and go to state 27
    CONTINUE        shift and go to state 28
    RETURN          shift and go to state 5
    CONSOLE         shift and go to state 17
    VAR             shift and go to state 22
    LEFTPAREN       shift and go to state 19
    ID              shift and go to state 23
    EVAL            shift and go to state 20
    NOT             shift and go to state 32
    BINNOT          shift and go to state 25
    TYPEOF          shift and go to state 15
    IF              shift and go to state 3
    WHILE           shift and go to state 4
    FOR             shift and go to state 9
    FUNCTION        shift and go to state 31
    NUMBER          shift and go to state 2
    STRING          shift and go to state 14
    UNDEFINED       shift and go to state 21

    whileloop                      shift and go to state 7
    forloop                        shift and go to state 16
    expression                     shift and go to state 34
    basicTypes                     shift and go to state 33
    reassignment                   shift and go to state 8
    arrayCall                      shift and go to state 10
    functioncall                   shift and go to state 29
    arraydecl                      shift and go to state 30
    statement                      shift and go to state 104
    assignment                     shift and go to state 18
    ifelse                         shift and go to state 12
    cblock                         shift and go to state 216
    funcdecl                       shift and go to state 26
    block                          shift and go to state 106
    if                             shift and go to state 6

state 214

    (102) increment -> reassignment SEMICOLON . increment
    (102) increment -> . reassignment SEMICOLON increment
    (103) increment -> . reassignment
    (28) reassignment -> . ID EQ expression
    (29) reassignment -> . ID PLUSEQ expression
    (30) reassignment -> . ID MINUSEQ expression
    (31) reassignment -> . ID INTOEQ expression
    (32) reassignment -> . ID DIVEQ expression
    (33) reassignment -> . ID INCR
    (34) reassignment -> . ID DECR
    (35) reassignment -> . ID LSHIFTEQ expression
    (36) reassignment -> . ID RSHIFTEQ expression
    (37) reassignment -> . ID URSHIFTEQ expression
    (38) reassignment -> . ID ANDEQ expression
    (39) reassignment -> . ID OREQ expression
    (40) reassignment -> . ID XOREQ expression
    (41) reassignment -> . ID MODEQ expression
    (42) reassignment -> . arraydecl
    (43) reassignment -> . LEFTPAREN reassignment RIGHTPAREN
    (44) arraydecl -> . ID EQ LEFTBRACKET arrayList RIGHTBRACKET

    ID              shift and go to state 112
    LEFTPAREN       shift and go to state 209

    reassignment                   shift and go to state 210
    arraydecl                      shift and go to state 30
    increment                      shift and go to state 217

state 215

    (105) funcdecl -> VAR ID EQ FUNCTION LEFTPAREN argList RIGHTPAREN cblock . SEMICOLON

    SEMICOLON       shift and go to state 218


state 216

    (97) forloop -> FOR LEFTPAREN initialization SEMICOLON expression SEMICOLON increment RIGHTPAREN cblock .

    SEMICOLON       reduce using rule 97 (forloop -> FOR LEFTPAREN initialization SEMICOLON expression SEMICOLON increment RIGHTPAREN cblock .)
    ELSE            reduce using rule 97 (forloop -> FOR LEFTPAREN initialization SEMICOLON expression SEMICOLON increment RIGHTPAREN cblock .)
    BREAK           reduce using rule 97 (forloop -> FOR LEFTPAREN initialization SEMICOLON expression SEMICOLON increment RIGHTPAREN cblock .)
    CONTINUE        reduce using rule 97 (forloop -> FOR LEFTPAREN initialization SEMICOLON expression SEMICOLON increment RIGHTPAREN cblock .)
    RETURN          reduce using rule 97 (forloop -> FOR LEFTPAREN initialization SEMICOLON expression SEMICOLON increment RIGHTPAREN cblock .)
    CONSOLE         reduce using rule 97 (forloop -> FOR LEFTPAREN initialization SEMICOLON expression SEMICOLON increment RIGHTPAREN cblock .)
    VAR             reduce using rule 97 (forloop -> FOR LEFTPAREN initialization SEMICOLON expression SEMICOLON increment RIGHTPAREN cblock .)
    LEFTPAREN       reduce using rule 97 (forloop -> FOR LEFTPAREN initialization SEMICOLON expression SEMICOLON increment RIGHTPAREN cblock .)
    ID              reduce using rule 97 (forloop -> FOR LEFTPAREN initialization SEMICOLON expression SEMICOLON increment RIGHTPAREN cblock .)
    EVAL            reduce using rule 97 (forloop -> FOR LEFTPAREN initialization SEMICOLON expression SEMICOLON increment RIGHTPAREN cblock .)
    NOT             reduce using rule 97 (forloop -> FOR LEFTPAREN initialization SEMICOLON expression SEMICOLON increment RIGHTPAREN cblock .)
    BINNOT          reduce using rule 97 (forloop -> FOR LEFTPAREN initialization SEMICOLON expression SEMICOLON increment RIGHTPAREN cblock .)
    TYPEOF          reduce using rule 97 (forloop -> FOR LEFTPAREN initialization SEMICOLON expression SEMICOLON increment RIGHTPAREN cblock .)
    IF              reduce using rule 97 (forloop -> FOR LEFTPAREN initialization SEMICOLON expression SEMICOLON increment RIGHTPAREN cblock .)
    WHILE           reduce using rule 97 (forloop -> FOR LEFTPAREN initialization SEMICOLON expression SEMICOLON increment RIGHTPAREN cblock .)
    FOR             reduce using rule 97 (forloop -> FOR LEFTPAREN initialization SEMICOLON expression SEMICOLON increment RIGHTPAREN cblock .)
    FUNCTION        reduce using rule 97 (forloop -> FOR LEFTPAREN initialization SEMICOLON expression SEMICOLON increment RIGHTPAREN cblock .)
    NUMBER          reduce using rule 97 (forloop -> FOR LEFTPAREN initialization SEMICOLON expression SEMICOLON increment RIGHTPAREN cblock .)
    STRING          reduce using rule 97 (forloop -> FOR LEFTPAREN initialization SEMICOLON expression SEMICOLON increment RIGHTPAREN cblock .)
    UNDEFINED       reduce using rule 97 (forloop -> FOR LEFTPAREN initialization SEMICOLON expression SEMICOLON increment RIGHTPAREN cblock .)
    $end            reduce using rule 97 (forloop -> FOR LEFTPAREN initialization SEMICOLON expression SEMICOLON increment RIGHTPAREN cblock .)
    RIGHTBRACE      reduce using rule 97 (forloop -> FOR LEFTPAREN initialization SEMICOLON expression SEMICOLON increment RIGHTPAREN cblock .)
    RIGHTPAREN      reduce using rule 97 (forloop -> FOR LEFTPAREN initialization SEMICOLON expression SEMICOLON increment RIGHTPAREN cblock .)


state 217

    (102) increment -> reassignment SEMICOLON increment .

    RIGHTPAREN      reduce using rule 102 (increment -> reassignment SEMICOLON increment .)


state 218

    (105) funcdecl -> VAR ID EQ FUNCTION LEFTPAREN argList RIGHTPAREN cblock SEMICOLON .

    ELSE            reduce using rule 105 (funcdecl -> VAR ID EQ FUNCTION LEFTPAREN argList RIGHTPAREN cblock SEMICOLON .)
    BREAK           reduce using rule 105 (funcdecl -> VAR ID EQ FUNCTION LEFTPAREN argList RIGHTPAREN cblock SEMICOLON .)
    CONTINUE        reduce using rule 105 (funcdecl -> VAR ID EQ FUNCTION LEFTPAREN argList RIGHTPAREN cblock SEMICOLON .)
    RETURN          reduce using rule 105 (funcdecl -> VAR ID EQ FUNCTION LEFTPAREN argList RIGHTPAREN cblock SEMICOLON .)
    CONSOLE         reduce using rule 105 (funcdecl -> VAR ID EQ FUNCTION LEFTPAREN argList RIGHTPAREN cblock SEMICOLON .)
    VAR             reduce using rule 105 (funcdecl -> VAR ID EQ FUNCTION LEFTPAREN argList RIGHTPAREN cblock SEMICOLON .)
    LEFTPAREN       reduce using rule 105 (funcdecl -> VAR ID EQ FUNCTION LEFTPAREN argList RIGHTPAREN cblock SEMICOLON .)
    ID              reduce using rule 105 (funcdecl -> VAR ID EQ FUNCTION LEFTPAREN argList RIGHTPAREN cblock SEMICOLON .)
    EVAL            reduce using rule 105 (funcdecl -> VAR ID EQ FUNCTION LEFTPAREN argList RIGHTPAREN cblock SEMICOLON .)
    NOT             reduce using rule 105 (funcdecl -> VAR ID EQ FUNCTION LEFTPAREN argList RIGHTPAREN cblock SEMICOLON .)
    BINNOT          reduce using rule 105 (funcdecl -> VAR ID EQ FUNCTION LEFTPAREN argList RIGHTPAREN cblock SEMICOLON .)
    TYPEOF          reduce using rule 105 (funcdecl -> VAR ID EQ FUNCTION LEFTPAREN argList RIGHTPAREN cblock SEMICOLON .)
    IF              reduce using rule 105 (funcdecl -> VAR ID EQ FUNCTION LEFTPAREN argList RIGHTPAREN cblock SEMICOLON .)
    WHILE           reduce using rule 105 (funcdecl -> VAR ID EQ FUNCTION LEFTPAREN argList RIGHTPAREN cblock SEMICOLON .)
    FOR             reduce using rule 105 (funcdecl -> VAR ID EQ FUNCTION LEFTPAREN argList RIGHTPAREN cblock SEMICOLON .)
    FUNCTION        reduce using rule 105 (funcdecl -> VAR ID EQ FUNCTION LEFTPAREN argList RIGHTPAREN cblock SEMICOLON .)
    NUMBER          reduce using rule 105 (funcdecl -> VAR ID EQ FUNCTION LEFTPAREN argList RIGHTPAREN cblock SEMICOLON .)
    STRING          reduce using rule 105 (funcdecl -> VAR ID EQ FUNCTION LEFTPAREN argList RIGHTPAREN cblock SEMICOLON .)
    UNDEFINED       reduce using rule 105 (funcdecl -> VAR ID EQ FUNCTION LEFTPAREN argList RIGHTPAREN cblock SEMICOLON .)
    $end            reduce using rule 105 (funcdecl -> VAR ID EQ FUNCTION LEFTPAREN argList RIGHTPAREN cblock SEMICOLON .)
    RIGHTBRACE      reduce using rule 105 (funcdecl -> VAR ID EQ FUNCTION LEFTPAREN argList RIGHTPAREN cblock SEMICOLON .)
    RIGHTPAREN      reduce using rule 105 (funcdecl -> VAR ID EQ FUNCTION LEFTPAREN argList RIGHTPAREN cblock SEMICOLON .)
    SEMICOLON       reduce using rule 105 (funcdecl -> VAR ID EQ FUNCTION LEFTPAREN argList RIGHTPAREN cblock SEMICOLON .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for SEMICOLON in state 8 resolved as shift
WARNING: shift/reduce conflict for SEMICOLON in state 18 resolved as shift
WARNING: shift/reduce conflict for LEFTPAREN in state 23 resolved as shift
WARNING: shift/reduce conflict for SEMICOLON in state 27 resolved as shift
WARNING: shift/reduce conflict for SEMICOLON in state 28 resolved as shift
WARNING: shift/reduce conflict for SEMICOLON in state 29 resolved as shift
WARNING: shift/reduce conflict for SEMICOLON in state 29 resolved as shift
WARNING: shift/reduce conflict for SEMICOLON in state 34 resolved as shift
WARNING: shift/reduce conflict for LEFTPAREN in state 37 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 45 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 45 resolved as shift
WARNING: shift/reduce conflict for INTO in state 45 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 45 resolved as shift
WARNING: shift/reduce conflict for MOD in state 45 resolved as shift
WARNING: shift/reduce conflict for EXPO in state 45 resolved as shift
WARNING: shift/reduce conflict for BINAND in state 45 resolved as shift
WARNING: shift/reduce conflict for BINOR in state 45 resolved as shift
WARNING: shift/reduce conflict for BINXOR in state 45 resolved as shift
WARNING: shift/reduce conflict for LT in state 45 resolved as shift
WARNING: shift/reduce conflict for GT in state 45 resolved as shift
WARNING: shift/reduce conflict for DOUBLEEQ in state 45 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 45 resolved as shift
WARNING: shift/reduce conflict for LTE in state 45 resolved as shift
WARNING: shift/reduce conflict for GTE in state 45 resolved as shift
WARNING: shift/reduce conflict for STREQUAL in state 45 resolved as shift
WARNING: shift/reduce conflict for STRNEQUAL in state 45 resolved as shift
WARNING: shift/reduce conflict for AND in state 45 resolved as shift
WARNING: shift/reduce conflict for OR in state 45 resolved as shift
WARNING: shift/reduce conflict for LSHIFT in state 45 resolved as shift
WARNING: shift/reduce conflict for RSHIFT in state 45 resolved as shift
WARNING: shift/reduce conflict for URSHIFT in state 45 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 105 resolved as shift
WARNING: shift/reduce conflict for SEMICOLON in state 109 resolved as shift
WARNING: shift/reduce conflict for SEMICOLON in state 113 resolved as shift
WARNING: shift/reduce conflict for SEMICOLON in state 202 resolved as shift
WARNING: reduce/reduce conflict in state 29 resolved using rule (expression -> functioncall)
WARNING: rejected rule (statement -> functioncall) in state 29
WARNING: reduce/reduce conflict in state 185 resolved using rule (statement -> if)
WARNING: rejected rule (ifelse -> IF expression cblock ELSE if) in state 185
WARNING: reduce/reduce conflict in state 186 resolved using rule (statement -> ifelse)
WARNING: rejected rule (ifelse -> IF expression cblock ELSE ifelse) in state 186
WARNING: Rule (statement -> functioncall) is never reduced
WARNING: Rule (ifelse -> IF expression cblock ELSE if) is never reduced
WARNING: Rule (ifelse -> IF expression cblock ELSE ifelse) is never reduced
