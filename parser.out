Created by PLY version 3.8 (http://www.dabeaz.com/ply)

Unused terminals:

    DO
    LCOMMENT
    SETPROP
    NEW
    WITH
    CASE
    SWITCH
    EXPO
    GETP
    COLON
    DELETE
    GETPROP
    BCOMMENT
    REGEX
    SETP
    CONDOP
    THIS

Grammar

Rule 0     S' -> start
Rule 1     start -> block
Rule 2     start -> statements
Rule 3     block -> LEFTBRACE blockmarker statements RIGHTBRACE
Rule 4     blockmarker -> <empty>
Rule 5     statements -> statement statements
Rule 6     statements -> statement
Rule 7     statement -> assignment SEMICOLON
Rule 8     statement -> declaration SEMICOLON
Rule 9     statement -> reassignment SEMICOLON
Rule 10    statement -> BREAK SEMICOLON
Rule 11    statement -> CONTINUE SEMICOLON
Rule 12    statement -> funcstmt SEMICOLON
Rule 13    statement -> if
Rule 14    statement -> ifelse
Rule 15    statement -> whileloop
Rule 16    statement -> funcdecl
Rule 17    statement -> forloop
Rule 18    statement -> reassignmentarray SEMICOLON
Rule 19    statement -> RETURN expression SEMICOLON
Rule 20    statement -> CONSOLE DOT LOG LEFTPAREN printList RIGHTPAREN SEMICOLON
Rule 21    printList -> expression COMMA printList
Rule 22    printList -> expression
Rule 23    declaration -> VAR declarationList
Rule 24    declarationList -> ID COMMA declarationList
Rule 25    declarationList -> ID
Rule 26    assignment -> VAR assignlist
Rule 27    assignlist -> ID EQ expression COMMA assignlist
Rule 28    assignlist -> ID EQ expression
Rule 29    assignlist -> ID EQ array
Rule 30    reassignment -> ID EQ expression
Rule 31    reassignment -> ID PLUSEQ expression
Rule 32    reassignment -> ID MINUSEQ expression
Rule 33    reassignment -> ID INTOEQ expression
Rule 34    reassignment -> ID DIVEQ expression
Rule 35    reassignment -> ID INCR
Rule 36    reassignment -> ID DECR
Rule 37    reassignment -> ID LSHIFTEQ expression
Rule 38    reassignment -> ID RSHIFTEQ expression
Rule 39    reassignment -> ID URSHIFTEQ expression
Rule 40    reassignment -> ID ANDEQ expression
Rule 41    reassignment -> ID OREQ expression
Rule 42    reassignment -> ID XOREQ expression
Rule 43    reassignment -> ID MODEQ expression
Rule 44    reassignment -> LEFTPAREN reassignment RIGHTPAREN
Rule 45    casemarker -> <empty>
Rule 46    endcasemarker -> <empty>
Rule 47    array -> LEFTBRACKET arrayList RIGHTBRACKET
Rule 48    arrayList -> array COMMA arrayList
Rule 49    arrayList -> array
Rule 50    arrayList -> expression COMMA arrayList
Rule 51    arrayList -> expression
Rule 52    expression -> expression PLUS expression
Rule 53    expression -> expression MINUS expression
Rule 54    expression -> expression INTO expression
Rule 55    expression -> expression DIVIDE expression
Rule 56    expression -> expression MOD expression
Rule 57    expression -> LEFTPAREN expression RIGHTPAREN
Rule 58    expression -> NOT expression
Rule 59    expression -> expression BINAND expression
Rule 60    expression -> expression BINOR expression
Rule 61    expression -> expression BINXOR expression
Rule 62    expression -> BINNOT expression
Rule 63    expression -> expression LT expression
Rule 64    expression -> expression GT expression
Rule 65    expression -> expression DOUBLEEQ expression
Rule 66    expression -> expression NOTEQUAL expression
Rule 67    expression -> expression LTE expression
Rule 68    expression -> expression GTE expression
Rule 69    expression -> expression STREQUAL expression
Rule 70    expression -> expression STRNEQUAL expression
Rule 71    expression -> expression AND expression
Rule 72    expression -> expression OR expression
Rule 73    expression -> expression LSHIFT expression
Rule 74    expression -> expression RSHIFT expression
Rule 75    expression -> expression URSHIFT expression
Rule 76    expression -> EVAL LEFTPAREN evalmarker statements evalendmarker RIGHTPAREN
Rule 77    expression -> EVAL LEFTPAREN block RIGHTPAREN
Rule 78    expression -> EVAL LEFTPAREN expression RIGHTPAREN
Rule 79    evalmarker -> <empty>
Rule 80    evalendmarker -> <empty>
Rule 81    expression -> basicTypes
Rule 82    expression -> ID
Rule 83    expression -> TYPEOF expression
Rule 84    funcstmt -> ID EQ functioncall
Rule 85    funcstmt -> functioncall
Rule 86    funcstmt -> VAR ID EQ functioncall
Rule 87    expression -> arrayCall
Rule 88    reassignmentarray -> arrayCall EQ expression
Rule 89    arrayCall -> ID reference
Rule 90    reference -> LEFTBRACKET expression RIGHTBRACKET reference
Rule 91    reference -> LEFTBRACKET expression RIGHTBRACKET
Rule 92    basicTypes -> NUMBER
Rule 93    basicTypes -> BOOLEAN
Rule 94    basicTypes -> STRING
Rule 95    basicTypes -> UNDEFINED
Rule 96    functioncall -> ID LEFTPAREN argList RIGHTPAREN
Rule 97    argList -> expression
Rule 98    argList -> expression COMMA argList
Rule 99    argList -> <empty>
Rule 100   if -> IF expression ifelseblock block ifblockend
Rule 101   ifblockend -> <empty>
Rule 102   ifelse -> IF expression ifelseblock block ELSE elseblock block elseblockend
Rule 103   ifelseblock -> <empty>
Rule 104   elseblock -> empty
Rule 105   elseblockend -> empty
Rule 106   whileloop -> WHILE whileblockstart LEFTPAREN expression RIGHTPAREN exprcheck block whileblockend
Rule 107   whileblockstart -> empty
Rule 108   exprcheck -> empty
Rule 109   whileblockend -> empty
Rule 110   forloop -> FOR scope_marker LEFTPAREN initialization SEMICOLON forexpr_marker for_expr forcheck_marker SEMICOLON increment increment_marker RIGHTPAREN forblock endblock_marker
Rule 111   scope_marker -> <empty>
Rule 112   forexpr_marker -> <empty>
Rule 113   forcheck_marker -> <empty>
Rule 114   increment_marker -> <empty>
Rule 115   endblock_marker -> <empty>
Rule 116   forblock -> LEFTBRACE statements RIGHTBRACE
Rule 117   initialization -> assignment
Rule 118   initialization -> reinitialization
Rule 119   reinitialization -> reassignment COMMA reinitialization
Rule 120   reinitialization -> reassignment
Rule 121   for_expr -> expression
Rule 122   increment -> reassignment SEMICOLON increment
Rule 123   increment -> reassignment
Rule 124   funcarghead -> funcargList
Rule 125   funcargList -> ID COMMA funcargList
Rule 126   funcargList -> ID
Rule 127   funcargList -> <empty>
Rule 128   funcdecl -> FUNCTION ID funcscopedefnormal LEFTPAREN funcarghead RIGHTPAREN funblock endfunc
Rule 129   funcscopedefnormal -> <empty>
Rule 130   endfunc -> empty
Rule 131   funcdecl -> VAR ID EQ FUNCTION funcscopedef LEFTPAREN funcarghead RIGHTPAREN funblock SEMICOLON endfuncdecl
Rule 132   funblock -> LEFTBRACE statements RIGHTBRACE
Rule 133   funcscopedef -> <empty>
Rule 134   endfuncdecl -> <empty>
Rule 135   empty -> <empty>

Terminals, with rules where they appear

AND                  : 71
ANDEQ                : 40
BCOMMENT             : 
BINAND               : 59
BINNOT               : 62
BINOR                : 60
BINXOR               : 61
BOOLEAN              : 93
BREAK                : 10
CASE                 : 
COLON                : 
COMMA                : 21 24 27 48 50 98 119 125
CONDOP               : 
CONSOLE              : 20
CONTINUE             : 11
DECR                 : 36
DELETE               : 
DIVEQ                : 34
DIVIDE               : 55
DO                   : 
DOT                  : 20
DOUBLEEQ             : 65
ELSE                 : 102
EQ                   : 27 28 29 30 84 86 88 131
EVAL                 : 76 77 78
EXPO                 : 
FOR                  : 110
FUNCTION             : 128 131
GETP                 : 
GETPROP              : 
GT                   : 64
GTE                  : 68
ID                   : 24 25 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 82 84 86 89 96 125 126 128 131
IF                   : 100 102
INCR                 : 35
INTO                 : 54
INTOEQ               : 33
LCOMMENT             : 
LEFTBRACE            : 3 116 132
LEFTBRACKET          : 47 90 91
LEFTPAREN            : 20 44 57 76 77 78 96 106 110 128 131
LOG                  : 20
LSHIFT               : 73
LSHIFTEQ             : 37
LT                   : 63
LTE                  : 67
MINUS                : 53
MINUSEQ              : 32
MOD                  : 56
MODEQ                : 43
NEW                  : 
NOT                  : 58
NOTEQUAL             : 66
NUMBER               : 92
OR                   : 72
OREQ                 : 41
PLUS                 : 52
PLUSEQ               : 31
REGEX                : 
RETURN               : 19
RIGHTBRACE           : 3 116 132
RIGHTBRACKET         : 47 90 91
RIGHTPAREN           : 20 44 57 76 77 78 96 106 110 128 131
RSHIFT               : 74
RSHIFTEQ             : 38
SEMICOLON            : 7 8 9 10 11 12 18 19 20 110 110 122 131
SETP                 : 
SETPROP              : 
STREQUAL             : 69
STRING               : 94
STRNEQUAL            : 70
SWITCH               : 
THIS                 : 
TYPEOF               : 83
UNDEFINED            : 95
URSHIFT              : 75
URSHIFTEQ            : 39
VAR                  : 23 26 86 131
WHILE                : 106
WITH                 : 
XOREQ                : 42
error                : 

Nonterminals, with rules where they appear

argList              : 96 98
array                : 29 48 49
arrayCall            : 87 88
arrayList            : 47 48 50
assignlist           : 26 27
assignment           : 7 117
basicTypes           : 81
block                : 1 77 100 102 102 106
blockmarker          : 3
casemarker           : 
declaration          : 8
declarationList      : 23 24
elseblock            : 102
elseblockend         : 102
empty                : 104 105 107 108 109 130
endblock_marker      : 110
endcasemarker        : 
endfunc              : 128
endfuncdecl          : 131
evalendmarker        : 76
evalmarker           : 76
exprcheck            : 106
expression           : 19 21 22 27 28 30 31 32 33 34 37 38 39 40 41 42 43 50 51 52 52 53 53 54 54 55 55 56 56 57 58 59 59 60 60 61 61 62 63 63 64 64 65 65 66 66 67 67 68 68 69 69 70 70 71 71 72 72 73 73 74 74 75 75 78 83 88 90 91 97 98 100 102 106 121
for_expr             : 110
forblock             : 110
forcheck_marker      : 110
forexpr_marker       : 110
forloop              : 17
funblock             : 128 131
funcargList          : 124 125
funcarghead          : 128 131
funcdecl             : 16
funcscopedef         : 131
funcscopedefnormal   : 128
funcstmt             : 12
functioncall         : 84 85 86
if                   : 13
ifblockend           : 100
ifelse               : 14
ifelseblock          : 100 102
increment            : 110 122
increment_marker     : 110
initialization       : 110
printList            : 20 21
reassignment         : 9 44 119 120 122 123
reassignmentarray    : 18
reference            : 89 90
reinitialization     : 118 119
scope_marker         : 110
start                : 0
statement            : 5 6
statements           : 2 3 5 76 116 132
whileblockend        : 106
whileblockstart      : 106
whileloop            : 15

Parsing method: LALR

state 0

    (0) S' -> . start
    (1) start -> . block
    (2) start -> . statements
    (3) block -> . LEFTBRACE blockmarker statements RIGHTBRACE
    (5) statements -> . statement statements
    (6) statements -> . statement
    (7) statement -> . assignment SEMICOLON
    (8) statement -> . declaration SEMICOLON
    (9) statement -> . reassignment SEMICOLON
    (10) statement -> . BREAK SEMICOLON
    (11) statement -> . CONTINUE SEMICOLON
    (12) statement -> . funcstmt SEMICOLON
    (13) statement -> . if
    (14) statement -> . ifelse
    (15) statement -> . whileloop
    (16) statement -> . funcdecl
    (17) statement -> . forloop
    (18) statement -> . reassignmentarray SEMICOLON
    (19) statement -> . RETURN expression SEMICOLON
    (20) statement -> . CONSOLE DOT LOG LEFTPAREN printList RIGHTPAREN SEMICOLON
    (26) assignment -> . VAR assignlist
    (23) declaration -> . VAR declarationList
    (30) reassignment -> . ID EQ expression
    (31) reassignment -> . ID PLUSEQ expression
    (32) reassignment -> . ID MINUSEQ expression
    (33) reassignment -> . ID INTOEQ expression
    (34) reassignment -> . ID DIVEQ expression
    (35) reassignment -> . ID INCR
    (36) reassignment -> . ID DECR
    (37) reassignment -> . ID LSHIFTEQ expression
    (38) reassignment -> . ID RSHIFTEQ expression
    (39) reassignment -> . ID URSHIFTEQ expression
    (40) reassignment -> . ID ANDEQ expression
    (41) reassignment -> . ID OREQ expression
    (42) reassignment -> . ID XOREQ expression
    (43) reassignment -> . ID MODEQ expression
    (44) reassignment -> . LEFTPAREN reassignment RIGHTPAREN
    (84) funcstmt -> . ID EQ functioncall
    (85) funcstmt -> . functioncall
    (86) funcstmt -> . VAR ID EQ functioncall
    (100) if -> . IF expression ifelseblock block ifblockend
    (102) ifelse -> . IF expression ifelseblock block ELSE elseblock block elseblockend
    (106) whileloop -> . WHILE whileblockstart LEFTPAREN expression RIGHTPAREN exprcheck block whileblockend
    (128) funcdecl -> . FUNCTION ID funcscopedefnormal LEFTPAREN funcarghead RIGHTPAREN funblock endfunc
    (131) funcdecl -> . VAR ID EQ FUNCTION funcscopedef LEFTPAREN funcarghead RIGHTPAREN funblock SEMICOLON endfuncdecl
    (110) forloop -> . FOR scope_marker LEFTPAREN initialization SEMICOLON forexpr_marker for_expr forcheck_marker SEMICOLON increment increment_marker RIGHTPAREN forblock endblock_marker
    (88) reassignmentarray -> . arrayCall EQ expression
    (96) functioncall -> . ID LEFTPAREN argList RIGHTPAREN
    (89) arrayCall -> . ID reference

    LEFTBRACE       shift and go to state 23
    BREAK           shift and go to state 25
    CONTINUE        shift and go to state 26
    RETURN          shift and go to state 3
    CONSOLE         shift and go to state 17
    VAR             shift and go to state 21
    ID              shift and go to state 22
    LEFTPAREN       shift and go to state 19
    IF              shift and go to state 14
    WHILE           shift and go to state 2
    FUNCTION        shift and go to state 15
    FOR             shift and go to state 7

    statements                     shift and go to state 1
    if                             shift and go to state 4
    whileloop                      shift and go to state 5
    funcstmt                       shift and go to state 8
    arrayCall                      shift and go to state 9
    start                          shift and go to state 10
    reassignmentarray              shift and go to state 11
    ifelse                         shift and go to state 12
    statement                      shift and go to state 13
    forloop                        shift and go to state 16
    assignment                     shift and go to state 18
    declaration                    shift and go to state 20
    funcdecl                       shift and go to state 24
    reassignment                   shift and go to state 6
    functioncall                   shift and go to state 27
    block                          shift and go to state 28

state 1

    (2) start -> statements .

    $end            reduce using rule 2 (start -> statements .)


state 2

    (106) whileloop -> WHILE . whileblockstart LEFTPAREN expression RIGHTPAREN exprcheck block whileblockend
    (107) whileblockstart -> . empty
    (135) empty -> .

    LEFTPAREN       reduce using rule 135 (empty -> .)

    whileblockstart                shift and go to state 29
    empty                          shift and go to state 30

state 3

    (19) statement -> RETURN . expression SEMICOLON
    (52) expression -> . expression PLUS expression
    (53) expression -> . expression MINUS expression
    (54) expression -> . expression INTO expression
    (55) expression -> . expression DIVIDE expression
    (56) expression -> . expression MOD expression
    (57) expression -> . LEFTPAREN expression RIGHTPAREN
    (58) expression -> . NOT expression
    (59) expression -> . expression BINAND expression
    (60) expression -> . expression BINOR expression
    (61) expression -> . expression BINXOR expression
    (62) expression -> . BINNOT expression
    (63) expression -> . expression LT expression
    (64) expression -> . expression GT expression
    (65) expression -> . expression DOUBLEEQ expression
    (66) expression -> . expression NOTEQUAL expression
    (67) expression -> . expression LTE expression
    (68) expression -> . expression GTE expression
    (69) expression -> . expression STREQUAL expression
    (70) expression -> . expression STRNEQUAL expression
    (71) expression -> . expression AND expression
    (72) expression -> . expression OR expression
    (73) expression -> . expression LSHIFT expression
    (74) expression -> . expression RSHIFT expression
    (75) expression -> . expression URSHIFT expression
    (76) expression -> . EVAL LEFTPAREN evalmarker statements evalendmarker RIGHTPAREN
    (77) expression -> . EVAL LEFTPAREN block RIGHTPAREN
    (78) expression -> . EVAL LEFTPAREN expression RIGHTPAREN
    (81) expression -> . basicTypes
    (82) expression -> . ID
    (83) expression -> . TYPEOF expression
    (87) expression -> . arrayCall
    (92) basicTypes -> . NUMBER
    (93) basicTypes -> . BOOLEAN
    (94) basicTypes -> . STRING
    (95) basicTypes -> . UNDEFINED
    (89) arrayCall -> . ID reference

    LEFTPAREN       shift and go to state 37
    NOT             shift and go to state 41
    BINNOT          shift and go to state 43
    EVAL            shift and go to state 31
    ID              shift and go to state 38
    TYPEOF          shift and go to state 36
    NUMBER          shift and go to state 32
    BOOLEAN         shift and go to state 40
    STRING          shift and go to state 35
    UNDEFINED       shift and go to state 33

    arrayCall                      shift and go to state 34
    expression                     shift and go to state 39
    basicTypes                     shift and go to state 42

state 4

    (13) statement -> if .

    BREAK           reduce using rule 13 (statement -> if .)
    CONTINUE        reduce using rule 13 (statement -> if .)
    RETURN          reduce using rule 13 (statement -> if .)
    CONSOLE         reduce using rule 13 (statement -> if .)
    VAR             reduce using rule 13 (statement -> if .)
    ID              reduce using rule 13 (statement -> if .)
    LEFTPAREN       reduce using rule 13 (statement -> if .)
    IF              reduce using rule 13 (statement -> if .)
    WHILE           reduce using rule 13 (statement -> if .)
    FUNCTION        reduce using rule 13 (statement -> if .)
    FOR             reduce using rule 13 (statement -> if .)
    RIGHTBRACE      reduce using rule 13 (statement -> if .)
    $end            reduce using rule 13 (statement -> if .)
    RIGHTPAREN      reduce using rule 13 (statement -> if .)


state 5

    (15) statement -> whileloop .

    BREAK           reduce using rule 15 (statement -> whileloop .)
    CONTINUE        reduce using rule 15 (statement -> whileloop .)
    RETURN          reduce using rule 15 (statement -> whileloop .)
    CONSOLE         reduce using rule 15 (statement -> whileloop .)
    VAR             reduce using rule 15 (statement -> whileloop .)
    ID              reduce using rule 15 (statement -> whileloop .)
    LEFTPAREN       reduce using rule 15 (statement -> whileloop .)
    IF              reduce using rule 15 (statement -> whileloop .)
    WHILE           reduce using rule 15 (statement -> whileloop .)
    FUNCTION        reduce using rule 15 (statement -> whileloop .)
    FOR             reduce using rule 15 (statement -> whileloop .)
    RIGHTBRACE      reduce using rule 15 (statement -> whileloop .)
    $end            reduce using rule 15 (statement -> whileloop .)
    RIGHTPAREN      reduce using rule 15 (statement -> whileloop .)


state 6

    (9) statement -> reassignment . SEMICOLON

    SEMICOLON       shift and go to state 44


state 7

    (110) forloop -> FOR . scope_marker LEFTPAREN initialization SEMICOLON forexpr_marker for_expr forcheck_marker SEMICOLON increment increment_marker RIGHTPAREN forblock endblock_marker
    (111) scope_marker -> .

    LEFTPAREN       reduce using rule 111 (scope_marker -> .)

    scope_marker                   shift and go to state 45

state 8

    (12) statement -> funcstmt . SEMICOLON

    SEMICOLON       shift and go to state 46


state 9

    (88) reassignmentarray -> arrayCall . EQ expression

    EQ              shift and go to state 47


state 10

    (0) S' -> start .



state 11

    (18) statement -> reassignmentarray . SEMICOLON

    SEMICOLON       shift and go to state 48


state 12

    (14) statement -> ifelse .

    BREAK           reduce using rule 14 (statement -> ifelse .)
    CONTINUE        reduce using rule 14 (statement -> ifelse .)
    RETURN          reduce using rule 14 (statement -> ifelse .)
    CONSOLE         reduce using rule 14 (statement -> ifelse .)
    VAR             reduce using rule 14 (statement -> ifelse .)
    ID              reduce using rule 14 (statement -> ifelse .)
    LEFTPAREN       reduce using rule 14 (statement -> ifelse .)
    IF              reduce using rule 14 (statement -> ifelse .)
    WHILE           reduce using rule 14 (statement -> ifelse .)
    FUNCTION        reduce using rule 14 (statement -> ifelse .)
    FOR             reduce using rule 14 (statement -> ifelse .)
    RIGHTBRACE      reduce using rule 14 (statement -> ifelse .)
    $end            reduce using rule 14 (statement -> ifelse .)
    RIGHTPAREN      reduce using rule 14 (statement -> ifelse .)


state 13

    (5) statements -> statement . statements
    (6) statements -> statement .
    (5) statements -> . statement statements
    (6) statements -> . statement
    (7) statement -> . assignment SEMICOLON
    (8) statement -> . declaration SEMICOLON
    (9) statement -> . reassignment SEMICOLON
    (10) statement -> . BREAK SEMICOLON
    (11) statement -> . CONTINUE SEMICOLON
    (12) statement -> . funcstmt SEMICOLON
    (13) statement -> . if
    (14) statement -> . ifelse
    (15) statement -> . whileloop
    (16) statement -> . funcdecl
    (17) statement -> . forloop
    (18) statement -> . reassignmentarray SEMICOLON
    (19) statement -> . RETURN expression SEMICOLON
    (20) statement -> . CONSOLE DOT LOG LEFTPAREN printList RIGHTPAREN SEMICOLON
    (26) assignment -> . VAR assignlist
    (23) declaration -> . VAR declarationList
    (30) reassignment -> . ID EQ expression
    (31) reassignment -> . ID PLUSEQ expression
    (32) reassignment -> . ID MINUSEQ expression
    (33) reassignment -> . ID INTOEQ expression
    (34) reassignment -> . ID DIVEQ expression
    (35) reassignment -> . ID INCR
    (36) reassignment -> . ID DECR
    (37) reassignment -> . ID LSHIFTEQ expression
    (38) reassignment -> . ID RSHIFTEQ expression
    (39) reassignment -> . ID URSHIFTEQ expression
    (40) reassignment -> . ID ANDEQ expression
    (41) reassignment -> . ID OREQ expression
    (42) reassignment -> . ID XOREQ expression
    (43) reassignment -> . ID MODEQ expression
    (44) reassignment -> . LEFTPAREN reassignment RIGHTPAREN
    (84) funcstmt -> . ID EQ functioncall
    (85) funcstmt -> . functioncall
    (86) funcstmt -> . VAR ID EQ functioncall
    (100) if -> . IF expression ifelseblock block ifblockend
    (102) ifelse -> . IF expression ifelseblock block ELSE elseblock block elseblockend
    (106) whileloop -> . WHILE whileblockstart LEFTPAREN expression RIGHTPAREN exprcheck block whileblockend
    (128) funcdecl -> . FUNCTION ID funcscopedefnormal LEFTPAREN funcarghead RIGHTPAREN funblock endfunc
    (131) funcdecl -> . VAR ID EQ FUNCTION funcscopedef LEFTPAREN funcarghead RIGHTPAREN funblock SEMICOLON endfuncdecl
    (110) forloop -> . FOR scope_marker LEFTPAREN initialization SEMICOLON forexpr_marker for_expr forcheck_marker SEMICOLON increment increment_marker RIGHTPAREN forblock endblock_marker
    (88) reassignmentarray -> . arrayCall EQ expression
    (96) functioncall -> . ID LEFTPAREN argList RIGHTPAREN
    (89) arrayCall -> . ID reference

    RIGHTPAREN      reduce using rule 6 (statements -> statement .)
    $end            reduce using rule 6 (statements -> statement .)
    RIGHTBRACE      reduce using rule 6 (statements -> statement .)
    BREAK           shift and go to state 25
    CONTINUE        shift and go to state 26
    RETURN          shift and go to state 3
    CONSOLE         shift and go to state 17
    VAR             shift and go to state 21
    ID              shift and go to state 22
    LEFTPAREN       shift and go to state 19
    IF              shift and go to state 14
    WHILE           shift and go to state 2
    FUNCTION        shift and go to state 15
    FOR             shift and go to state 7

    statements                     shift and go to state 49
    if                             shift and go to state 4
    whileloop                      shift and go to state 5
    funcstmt                       shift and go to state 8
    arrayCall                      shift and go to state 9
    reassignmentarray              shift and go to state 11
    ifelse                         shift and go to state 12
    statement                      shift and go to state 13
    forloop                        shift and go to state 16
    assignment                     shift and go to state 18
    declaration                    shift and go to state 20
    funcdecl                       shift and go to state 24
    reassignment                   shift and go to state 6
    functioncall                   shift and go to state 27

state 14

    (100) if -> IF . expression ifelseblock block ifblockend
    (102) ifelse -> IF . expression ifelseblock block ELSE elseblock block elseblockend
    (52) expression -> . expression PLUS expression
    (53) expression -> . expression MINUS expression
    (54) expression -> . expression INTO expression
    (55) expression -> . expression DIVIDE expression
    (56) expression -> . expression MOD expression
    (57) expression -> . LEFTPAREN expression RIGHTPAREN
    (58) expression -> . NOT expression
    (59) expression -> . expression BINAND expression
    (60) expression -> . expression BINOR expression
    (61) expression -> . expression BINXOR expression
    (62) expression -> . BINNOT expression
    (63) expression -> . expression LT expression
    (64) expression -> . expression GT expression
    (65) expression -> . expression DOUBLEEQ expression
    (66) expression -> . expression NOTEQUAL expression
    (67) expression -> . expression LTE expression
    (68) expression -> . expression GTE expression
    (69) expression -> . expression STREQUAL expression
    (70) expression -> . expression STRNEQUAL expression
    (71) expression -> . expression AND expression
    (72) expression -> . expression OR expression
    (73) expression -> . expression LSHIFT expression
    (74) expression -> . expression RSHIFT expression
    (75) expression -> . expression URSHIFT expression
    (76) expression -> . EVAL LEFTPAREN evalmarker statements evalendmarker RIGHTPAREN
    (77) expression -> . EVAL LEFTPAREN block RIGHTPAREN
    (78) expression -> . EVAL LEFTPAREN expression RIGHTPAREN
    (81) expression -> . basicTypes
    (82) expression -> . ID
    (83) expression -> . TYPEOF expression
    (87) expression -> . arrayCall
    (92) basicTypes -> . NUMBER
    (93) basicTypes -> . BOOLEAN
    (94) basicTypes -> . STRING
    (95) basicTypes -> . UNDEFINED
    (89) arrayCall -> . ID reference

    LEFTPAREN       shift and go to state 37
    NOT             shift and go to state 41
    BINNOT          shift and go to state 43
    EVAL            shift and go to state 31
    ID              shift and go to state 38
    TYPEOF          shift and go to state 36
    NUMBER          shift and go to state 32
    BOOLEAN         shift and go to state 40
    STRING          shift and go to state 35
    UNDEFINED       shift and go to state 33

    arrayCall                      shift and go to state 34
    expression                     shift and go to state 50
    basicTypes                     shift and go to state 42

state 15

    (128) funcdecl -> FUNCTION . ID funcscopedefnormal LEFTPAREN funcarghead RIGHTPAREN funblock endfunc

    ID              shift and go to state 51


state 16

    (17) statement -> forloop .

    BREAK           reduce using rule 17 (statement -> forloop .)
    CONTINUE        reduce using rule 17 (statement -> forloop .)
    RETURN          reduce using rule 17 (statement -> forloop .)
    CONSOLE         reduce using rule 17 (statement -> forloop .)
    VAR             reduce using rule 17 (statement -> forloop .)
    ID              reduce using rule 17 (statement -> forloop .)
    LEFTPAREN       reduce using rule 17 (statement -> forloop .)
    IF              reduce using rule 17 (statement -> forloop .)
    WHILE           reduce using rule 17 (statement -> forloop .)
    FUNCTION        reduce using rule 17 (statement -> forloop .)
    FOR             reduce using rule 17 (statement -> forloop .)
    RIGHTBRACE      reduce using rule 17 (statement -> forloop .)
    $end            reduce using rule 17 (statement -> forloop .)
    RIGHTPAREN      reduce using rule 17 (statement -> forloop .)


state 17

    (20) statement -> CONSOLE . DOT LOG LEFTPAREN printList RIGHTPAREN SEMICOLON

    DOT             shift and go to state 52


state 18

    (7) statement -> assignment . SEMICOLON

    SEMICOLON       shift and go to state 53


state 19

    (44) reassignment -> LEFTPAREN . reassignment RIGHTPAREN
    (30) reassignment -> . ID EQ expression
    (31) reassignment -> . ID PLUSEQ expression
    (32) reassignment -> . ID MINUSEQ expression
    (33) reassignment -> . ID INTOEQ expression
    (34) reassignment -> . ID DIVEQ expression
    (35) reassignment -> . ID INCR
    (36) reassignment -> . ID DECR
    (37) reassignment -> . ID LSHIFTEQ expression
    (38) reassignment -> . ID RSHIFTEQ expression
    (39) reassignment -> . ID URSHIFTEQ expression
    (40) reassignment -> . ID ANDEQ expression
    (41) reassignment -> . ID OREQ expression
    (42) reassignment -> . ID XOREQ expression
    (43) reassignment -> . ID MODEQ expression
    (44) reassignment -> . LEFTPAREN reassignment RIGHTPAREN

    ID              shift and go to state 55
    LEFTPAREN       shift and go to state 19

    reassignment                   shift and go to state 54

state 20

    (8) statement -> declaration . SEMICOLON

    SEMICOLON       shift and go to state 56


state 21

    (26) assignment -> VAR . assignlist
    (23) declaration -> VAR . declarationList
    (86) funcstmt -> VAR . ID EQ functioncall
    (131) funcdecl -> VAR . ID EQ FUNCTION funcscopedef LEFTPAREN funcarghead RIGHTPAREN funblock SEMICOLON endfuncdecl
    (27) assignlist -> . ID EQ expression COMMA assignlist
    (28) assignlist -> . ID EQ expression
    (29) assignlist -> . ID EQ array
    (24) declarationList -> . ID COMMA declarationList
    (25) declarationList -> . ID

    ID              shift and go to state 59

    declarationList                shift and go to state 58
    assignlist                     shift and go to state 57

state 22

    (30) reassignment -> ID . EQ expression
    (31) reassignment -> ID . PLUSEQ expression
    (32) reassignment -> ID . MINUSEQ expression
    (33) reassignment -> ID . INTOEQ expression
    (34) reassignment -> ID . DIVEQ expression
    (35) reassignment -> ID . INCR
    (36) reassignment -> ID . DECR
    (37) reassignment -> ID . LSHIFTEQ expression
    (38) reassignment -> ID . RSHIFTEQ expression
    (39) reassignment -> ID . URSHIFTEQ expression
    (40) reassignment -> ID . ANDEQ expression
    (41) reassignment -> ID . OREQ expression
    (42) reassignment -> ID . XOREQ expression
    (43) reassignment -> ID . MODEQ expression
    (84) funcstmt -> ID . EQ functioncall
    (96) functioncall -> ID . LEFTPAREN argList RIGHTPAREN
    (89) arrayCall -> ID . reference
    (90) reference -> . LEFTBRACKET expression RIGHTBRACKET reference
    (91) reference -> . LEFTBRACKET expression RIGHTBRACKET

    EQ              shift and go to state 74
    PLUSEQ          shift and go to state 76
    MINUSEQ         shift and go to state 67
    INTOEQ          shift and go to state 62
    DIVEQ           shift and go to state 70
    INCR            shift and go to state 64
    DECR            shift and go to state 63
    LSHIFTEQ        shift and go to state 71
    RSHIFTEQ        shift and go to state 75
    URSHIFTEQ       shift and go to state 66
    ANDEQ           shift and go to state 73
    OREQ            shift and go to state 69
    XOREQ           shift and go to state 65
    MODEQ           shift and go to state 61
    LEFTPAREN       shift and go to state 72
    LEFTBRACKET     shift and go to state 68

    reference                      shift and go to state 60

state 23

    (3) block -> LEFTBRACE . blockmarker statements RIGHTBRACE
    (4) blockmarker -> .

    BREAK           reduce using rule 4 (blockmarker -> .)
    CONTINUE        reduce using rule 4 (blockmarker -> .)
    RETURN          reduce using rule 4 (blockmarker -> .)
    CONSOLE         reduce using rule 4 (blockmarker -> .)
    VAR             reduce using rule 4 (blockmarker -> .)
    ID              reduce using rule 4 (blockmarker -> .)
    LEFTPAREN       reduce using rule 4 (blockmarker -> .)
    IF              reduce using rule 4 (blockmarker -> .)
    WHILE           reduce using rule 4 (blockmarker -> .)
    FUNCTION        reduce using rule 4 (blockmarker -> .)
    FOR             reduce using rule 4 (blockmarker -> .)

    blockmarker                    shift and go to state 77

state 24

    (16) statement -> funcdecl .

    BREAK           reduce using rule 16 (statement -> funcdecl .)
    CONTINUE        reduce using rule 16 (statement -> funcdecl .)
    RETURN          reduce using rule 16 (statement -> funcdecl .)
    CONSOLE         reduce using rule 16 (statement -> funcdecl .)
    VAR             reduce using rule 16 (statement -> funcdecl .)
    ID              reduce using rule 16 (statement -> funcdecl .)
    LEFTPAREN       reduce using rule 16 (statement -> funcdecl .)
    IF              reduce using rule 16 (statement -> funcdecl .)
    WHILE           reduce using rule 16 (statement -> funcdecl .)
    FUNCTION        reduce using rule 16 (statement -> funcdecl .)
    FOR             reduce using rule 16 (statement -> funcdecl .)
    RIGHTBRACE      reduce using rule 16 (statement -> funcdecl .)
    $end            reduce using rule 16 (statement -> funcdecl .)
    RIGHTPAREN      reduce using rule 16 (statement -> funcdecl .)


state 25

    (10) statement -> BREAK . SEMICOLON

    SEMICOLON       shift and go to state 78


state 26

    (11) statement -> CONTINUE . SEMICOLON

    SEMICOLON       shift and go to state 79


state 27

    (85) funcstmt -> functioncall .

    SEMICOLON       reduce using rule 85 (funcstmt -> functioncall .)


state 28

    (1) start -> block .

    $end            reduce using rule 1 (start -> block .)


state 29

    (106) whileloop -> WHILE whileblockstart . LEFTPAREN expression RIGHTPAREN exprcheck block whileblockend

    LEFTPAREN       shift and go to state 80


state 30

    (107) whileblockstart -> empty .

    LEFTPAREN       reduce using rule 107 (whileblockstart -> empty .)


state 31

    (76) expression -> EVAL . LEFTPAREN evalmarker statements evalendmarker RIGHTPAREN
    (77) expression -> EVAL . LEFTPAREN block RIGHTPAREN
    (78) expression -> EVAL . LEFTPAREN expression RIGHTPAREN

    LEFTPAREN       shift and go to state 81


state 32

    (92) basicTypes -> NUMBER .

    RIGHTPAREN      reduce using rule 92 (basicTypes -> NUMBER .)
    PLUS            reduce using rule 92 (basicTypes -> NUMBER .)
    MINUS           reduce using rule 92 (basicTypes -> NUMBER .)
    INTO            reduce using rule 92 (basicTypes -> NUMBER .)
    DIVIDE          reduce using rule 92 (basicTypes -> NUMBER .)
    MOD             reduce using rule 92 (basicTypes -> NUMBER .)
    BINAND          reduce using rule 92 (basicTypes -> NUMBER .)
    BINOR           reduce using rule 92 (basicTypes -> NUMBER .)
    BINXOR          reduce using rule 92 (basicTypes -> NUMBER .)
    LT              reduce using rule 92 (basicTypes -> NUMBER .)
    GT              reduce using rule 92 (basicTypes -> NUMBER .)
    DOUBLEEQ        reduce using rule 92 (basicTypes -> NUMBER .)
    NOTEQUAL        reduce using rule 92 (basicTypes -> NUMBER .)
    LTE             reduce using rule 92 (basicTypes -> NUMBER .)
    GTE             reduce using rule 92 (basicTypes -> NUMBER .)
    STREQUAL        reduce using rule 92 (basicTypes -> NUMBER .)
    STRNEQUAL       reduce using rule 92 (basicTypes -> NUMBER .)
    AND             reduce using rule 92 (basicTypes -> NUMBER .)
    OR              reduce using rule 92 (basicTypes -> NUMBER .)
    LSHIFT          reduce using rule 92 (basicTypes -> NUMBER .)
    RSHIFT          reduce using rule 92 (basicTypes -> NUMBER .)
    URSHIFT         reduce using rule 92 (basicTypes -> NUMBER .)
    SEMICOLON       reduce using rule 92 (basicTypes -> NUMBER .)
    LEFTBRACE       reduce using rule 92 (basicTypes -> NUMBER .)
    COMMA           reduce using rule 92 (basicTypes -> NUMBER .)
    RIGHTBRACKET    reduce using rule 92 (basicTypes -> NUMBER .)


state 33

    (95) basicTypes -> UNDEFINED .

    RIGHTPAREN      reduce using rule 95 (basicTypes -> UNDEFINED .)
    PLUS            reduce using rule 95 (basicTypes -> UNDEFINED .)
    MINUS           reduce using rule 95 (basicTypes -> UNDEFINED .)
    INTO            reduce using rule 95 (basicTypes -> UNDEFINED .)
    DIVIDE          reduce using rule 95 (basicTypes -> UNDEFINED .)
    MOD             reduce using rule 95 (basicTypes -> UNDEFINED .)
    BINAND          reduce using rule 95 (basicTypes -> UNDEFINED .)
    BINOR           reduce using rule 95 (basicTypes -> UNDEFINED .)
    BINXOR          reduce using rule 95 (basicTypes -> UNDEFINED .)
    LT              reduce using rule 95 (basicTypes -> UNDEFINED .)
    GT              reduce using rule 95 (basicTypes -> UNDEFINED .)
    DOUBLEEQ        reduce using rule 95 (basicTypes -> UNDEFINED .)
    NOTEQUAL        reduce using rule 95 (basicTypes -> UNDEFINED .)
    LTE             reduce using rule 95 (basicTypes -> UNDEFINED .)
    GTE             reduce using rule 95 (basicTypes -> UNDEFINED .)
    STREQUAL        reduce using rule 95 (basicTypes -> UNDEFINED .)
    STRNEQUAL       reduce using rule 95 (basicTypes -> UNDEFINED .)
    AND             reduce using rule 95 (basicTypes -> UNDEFINED .)
    OR              reduce using rule 95 (basicTypes -> UNDEFINED .)
    LSHIFT          reduce using rule 95 (basicTypes -> UNDEFINED .)
    RSHIFT          reduce using rule 95 (basicTypes -> UNDEFINED .)
    URSHIFT         reduce using rule 95 (basicTypes -> UNDEFINED .)
    SEMICOLON       reduce using rule 95 (basicTypes -> UNDEFINED .)
    LEFTBRACE       reduce using rule 95 (basicTypes -> UNDEFINED .)
    COMMA           reduce using rule 95 (basicTypes -> UNDEFINED .)
    RIGHTBRACKET    reduce using rule 95 (basicTypes -> UNDEFINED .)


state 34

    (87) expression -> arrayCall .

    PLUS            reduce using rule 87 (expression -> arrayCall .)
    MINUS           reduce using rule 87 (expression -> arrayCall .)
    INTO            reduce using rule 87 (expression -> arrayCall .)
    DIVIDE          reduce using rule 87 (expression -> arrayCall .)
    MOD             reduce using rule 87 (expression -> arrayCall .)
    BINAND          reduce using rule 87 (expression -> arrayCall .)
    BINOR           reduce using rule 87 (expression -> arrayCall .)
    BINXOR          reduce using rule 87 (expression -> arrayCall .)
    LT              reduce using rule 87 (expression -> arrayCall .)
    GT              reduce using rule 87 (expression -> arrayCall .)
    DOUBLEEQ        reduce using rule 87 (expression -> arrayCall .)
    NOTEQUAL        reduce using rule 87 (expression -> arrayCall .)
    LTE             reduce using rule 87 (expression -> arrayCall .)
    GTE             reduce using rule 87 (expression -> arrayCall .)
    STREQUAL        reduce using rule 87 (expression -> arrayCall .)
    STRNEQUAL       reduce using rule 87 (expression -> arrayCall .)
    AND             reduce using rule 87 (expression -> arrayCall .)
    OR              reduce using rule 87 (expression -> arrayCall .)
    LSHIFT          reduce using rule 87 (expression -> arrayCall .)
    RSHIFT          reduce using rule 87 (expression -> arrayCall .)
    URSHIFT         reduce using rule 87 (expression -> arrayCall .)
    SEMICOLON       reduce using rule 87 (expression -> arrayCall .)
    RIGHTPAREN      reduce using rule 87 (expression -> arrayCall .)
    COMMA           reduce using rule 87 (expression -> arrayCall .)
    LEFTBRACE       reduce using rule 87 (expression -> arrayCall .)
    RIGHTBRACKET    reduce using rule 87 (expression -> arrayCall .)


state 35

    (94) basicTypes -> STRING .

    RIGHTPAREN      reduce using rule 94 (basicTypes -> STRING .)
    PLUS            reduce using rule 94 (basicTypes -> STRING .)
    MINUS           reduce using rule 94 (basicTypes -> STRING .)
    INTO            reduce using rule 94 (basicTypes -> STRING .)
    DIVIDE          reduce using rule 94 (basicTypes -> STRING .)
    MOD             reduce using rule 94 (basicTypes -> STRING .)
    BINAND          reduce using rule 94 (basicTypes -> STRING .)
    BINOR           reduce using rule 94 (basicTypes -> STRING .)
    BINXOR          reduce using rule 94 (basicTypes -> STRING .)
    LT              reduce using rule 94 (basicTypes -> STRING .)
    GT              reduce using rule 94 (basicTypes -> STRING .)
    DOUBLEEQ        reduce using rule 94 (basicTypes -> STRING .)
    NOTEQUAL        reduce using rule 94 (basicTypes -> STRING .)
    LTE             reduce using rule 94 (basicTypes -> STRING .)
    GTE             reduce using rule 94 (basicTypes -> STRING .)
    STREQUAL        reduce using rule 94 (basicTypes -> STRING .)
    STRNEQUAL       reduce using rule 94 (basicTypes -> STRING .)
    AND             reduce using rule 94 (basicTypes -> STRING .)
    OR              reduce using rule 94 (basicTypes -> STRING .)
    LSHIFT          reduce using rule 94 (basicTypes -> STRING .)
    RSHIFT          reduce using rule 94 (basicTypes -> STRING .)
    URSHIFT         reduce using rule 94 (basicTypes -> STRING .)
    SEMICOLON       reduce using rule 94 (basicTypes -> STRING .)
    LEFTBRACE       reduce using rule 94 (basicTypes -> STRING .)
    COMMA           reduce using rule 94 (basicTypes -> STRING .)
    RIGHTBRACKET    reduce using rule 94 (basicTypes -> STRING .)


state 36

    (83) expression -> TYPEOF . expression
    (52) expression -> . expression PLUS expression
    (53) expression -> . expression MINUS expression
    (54) expression -> . expression INTO expression
    (55) expression -> . expression DIVIDE expression
    (56) expression -> . expression MOD expression
    (57) expression -> . LEFTPAREN expression RIGHTPAREN
    (58) expression -> . NOT expression
    (59) expression -> . expression BINAND expression
    (60) expression -> . expression BINOR expression
    (61) expression -> . expression BINXOR expression
    (62) expression -> . BINNOT expression
    (63) expression -> . expression LT expression
    (64) expression -> . expression GT expression
    (65) expression -> . expression DOUBLEEQ expression
    (66) expression -> . expression NOTEQUAL expression
    (67) expression -> . expression LTE expression
    (68) expression -> . expression GTE expression
    (69) expression -> . expression STREQUAL expression
    (70) expression -> . expression STRNEQUAL expression
    (71) expression -> . expression AND expression
    (72) expression -> . expression OR expression
    (73) expression -> . expression LSHIFT expression
    (74) expression -> . expression RSHIFT expression
    (75) expression -> . expression URSHIFT expression
    (76) expression -> . EVAL LEFTPAREN evalmarker statements evalendmarker RIGHTPAREN
    (77) expression -> . EVAL LEFTPAREN block RIGHTPAREN
    (78) expression -> . EVAL LEFTPAREN expression RIGHTPAREN
    (81) expression -> . basicTypes
    (82) expression -> . ID
    (83) expression -> . TYPEOF expression
    (87) expression -> . arrayCall
    (92) basicTypes -> . NUMBER
    (93) basicTypes -> . BOOLEAN
    (94) basicTypes -> . STRING
    (95) basicTypes -> . UNDEFINED
    (89) arrayCall -> . ID reference

    LEFTPAREN       shift and go to state 37
    NOT             shift and go to state 41
    BINNOT          shift and go to state 43
    EVAL            shift and go to state 31
    ID              shift and go to state 38
    TYPEOF          shift and go to state 36
    NUMBER          shift and go to state 32
    BOOLEAN         shift and go to state 40
    STRING          shift and go to state 35
    UNDEFINED       shift and go to state 33

    arrayCall                      shift and go to state 34
    expression                     shift and go to state 82
    basicTypes                     shift and go to state 42

state 37

    (57) expression -> LEFTPAREN . expression RIGHTPAREN
    (52) expression -> . expression PLUS expression
    (53) expression -> . expression MINUS expression
    (54) expression -> . expression INTO expression
    (55) expression -> . expression DIVIDE expression
    (56) expression -> . expression MOD expression
    (57) expression -> . LEFTPAREN expression RIGHTPAREN
    (58) expression -> . NOT expression
    (59) expression -> . expression BINAND expression
    (60) expression -> . expression BINOR expression
    (61) expression -> . expression BINXOR expression
    (62) expression -> . BINNOT expression
    (63) expression -> . expression LT expression
    (64) expression -> . expression GT expression
    (65) expression -> . expression DOUBLEEQ expression
    (66) expression -> . expression NOTEQUAL expression
    (67) expression -> . expression LTE expression
    (68) expression -> . expression GTE expression
    (69) expression -> . expression STREQUAL expression
    (70) expression -> . expression STRNEQUAL expression
    (71) expression -> . expression AND expression
    (72) expression -> . expression OR expression
    (73) expression -> . expression LSHIFT expression
    (74) expression -> . expression RSHIFT expression
    (75) expression -> . expression URSHIFT expression
    (76) expression -> . EVAL LEFTPAREN evalmarker statements evalendmarker RIGHTPAREN
    (77) expression -> . EVAL LEFTPAREN block RIGHTPAREN
    (78) expression -> . EVAL LEFTPAREN expression RIGHTPAREN
    (81) expression -> . basicTypes
    (82) expression -> . ID
    (83) expression -> . TYPEOF expression
    (87) expression -> . arrayCall
    (92) basicTypes -> . NUMBER
    (93) basicTypes -> . BOOLEAN
    (94) basicTypes -> . STRING
    (95) basicTypes -> . UNDEFINED
    (89) arrayCall -> . ID reference

    LEFTPAREN       shift and go to state 37
    NOT             shift and go to state 41
    BINNOT          shift and go to state 43
    EVAL            shift and go to state 31
    ID              shift and go to state 38
    TYPEOF          shift and go to state 36
    NUMBER          shift and go to state 32
    BOOLEAN         shift and go to state 40
    STRING          shift and go to state 35
    UNDEFINED       shift and go to state 33

    arrayCall                      shift and go to state 34
    expression                     shift and go to state 83
    basicTypes                     shift and go to state 42

state 38

    (82) expression -> ID .
    (89) arrayCall -> ID . reference
    (90) reference -> . LEFTBRACKET expression RIGHTBRACKET reference
    (91) reference -> . LEFTBRACKET expression RIGHTBRACKET

    PLUS            reduce using rule 82 (expression -> ID .)
    MINUS           reduce using rule 82 (expression -> ID .)
    INTO            reduce using rule 82 (expression -> ID .)
    DIVIDE          reduce using rule 82 (expression -> ID .)
    MOD             reduce using rule 82 (expression -> ID .)
    BINAND          reduce using rule 82 (expression -> ID .)
    BINOR           reduce using rule 82 (expression -> ID .)
    BINXOR          reduce using rule 82 (expression -> ID .)
    LT              reduce using rule 82 (expression -> ID .)
    GT              reduce using rule 82 (expression -> ID .)
    DOUBLEEQ        reduce using rule 82 (expression -> ID .)
    NOTEQUAL        reduce using rule 82 (expression -> ID .)
    LTE             reduce using rule 82 (expression -> ID .)
    GTE             reduce using rule 82 (expression -> ID .)
    STREQUAL        reduce using rule 82 (expression -> ID .)
    STRNEQUAL       reduce using rule 82 (expression -> ID .)
    AND             reduce using rule 82 (expression -> ID .)
    OR              reduce using rule 82 (expression -> ID .)
    LSHIFT          reduce using rule 82 (expression -> ID .)
    RSHIFT          reduce using rule 82 (expression -> ID .)
    URSHIFT         reduce using rule 82 (expression -> ID .)
    SEMICOLON       reduce using rule 82 (expression -> ID .)
    RIGHTPAREN      reduce using rule 82 (expression -> ID .)
    COMMA           reduce using rule 82 (expression -> ID .)
    LEFTBRACE       reduce using rule 82 (expression -> ID .)
    RIGHTBRACKET    reduce using rule 82 (expression -> ID .)
    LEFTBRACKET     shift and go to state 68

    reference                      shift and go to state 60

state 39

    (19) statement -> RETURN expression . SEMICOLON
    (52) expression -> expression . PLUS expression
    (53) expression -> expression . MINUS expression
    (54) expression -> expression . INTO expression
    (55) expression -> expression . DIVIDE expression
    (56) expression -> expression . MOD expression
    (59) expression -> expression . BINAND expression
    (60) expression -> expression . BINOR expression
    (61) expression -> expression . BINXOR expression
    (63) expression -> expression . LT expression
    (64) expression -> expression . GT expression
    (65) expression -> expression . DOUBLEEQ expression
    (66) expression -> expression . NOTEQUAL expression
    (67) expression -> expression . LTE expression
    (68) expression -> expression . GTE expression
    (69) expression -> expression . STREQUAL expression
    (70) expression -> expression . STRNEQUAL expression
    (71) expression -> expression . AND expression
    (72) expression -> expression . OR expression
    (73) expression -> expression . LSHIFT expression
    (74) expression -> expression . RSHIFT expression
    (75) expression -> expression . URSHIFT expression

    SEMICOLON       shift and go to state 92
    PLUS            shift and go to state 95
    MINUS           shift and go to state 89
    INTO            shift and go to state 99
    DIVIDE          shift and go to state 98
    MOD             shift and go to state 105
    BINAND          shift and go to state 91
    BINOR           shift and go to state 102
    BINXOR          shift and go to state 96
    LT              shift and go to state 94
    GT              shift and go to state 97
    DOUBLEEQ        shift and go to state 84
    NOTEQUAL        shift and go to state 85
    LTE             shift and go to state 100
    GTE             shift and go to state 90
    STREQUAL        shift and go to state 93
    STRNEQUAL       shift and go to state 86
    AND             shift and go to state 101
    OR              shift and go to state 104
    LSHIFT          shift and go to state 87
    RSHIFT          shift and go to state 88
    URSHIFT         shift and go to state 103


state 40

    (93) basicTypes -> BOOLEAN .

    RIGHTPAREN      reduce using rule 93 (basicTypes -> BOOLEAN .)
    PLUS            reduce using rule 93 (basicTypes -> BOOLEAN .)
    MINUS           reduce using rule 93 (basicTypes -> BOOLEAN .)
    INTO            reduce using rule 93 (basicTypes -> BOOLEAN .)
    DIVIDE          reduce using rule 93 (basicTypes -> BOOLEAN .)
    MOD             reduce using rule 93 (basicTypes -> BOOLEAN .)
    BINAND          reduce using rule 93 (basicTypes -> BOOLEAN .)
    BINOR           reduce using rule 93 (basicTypes -> BOOLEAN .)
    BINXOR          reduce using rule 93 (basicTypes -> BOOLEAN .)
    LT              reduce using rule 93 (basicTypes -> BOOLEAN .)
    GT              reduce using rule 93 (basicTypes -> BOOLEAN .)
    DOUBLEEQ        reduce using rule 93 (basicTypes -> BOOLEAN .)
    NOTEQUAL        reduce using rule 93 (basicTypes -> BOOLEAN .)
    LTE             reduce using rule 93 (basicTypes -> BOOLEAN .)
    GTE             reduce using rule 93 (basicTypes -> BOOLEAN .)
    STREQUAL        reduce using rule 93 (basicTypes -> BOOLEAN .)
    STRNEQUAL       reduce using rule 93 (basicTypes -> BOOLEAN .)
    AND             reduce using rule 93 (basicTypes -> BOOLEAN .)
    OR              reduce using rule 93 (basicTypes -> BOOLEAN .)
    LSHIFT          reduce using rule 93 (basicTypes -> BOOLEAN .)
    RSHIFT          reduce using rule 93 (basicTypes -> BOOLEAN .)
    URSHIFT         reduce using rule 93 (basicTypes -> BOOLEAN .)
    SEMICOLON       reduce using rule 93 (basicTypes -> BOOLEAN .)
    LEFTBRACE       reduce using rule 93 (basicTypes -> BOOLEAN .)
    COMMA           reduce using rule 93 (basicTypes -> BOOLEAN .)
    RIGHTBRACKET    reduce using rule 93 (basicTypes -> BOOLEAN .)


state 41

    (58) expression -> NOT . expression
    (52) expression -> . expression PLUS expression
    (53) expression -> . expression MINUS expression
    (54) expression -> . expression INTO expression
    (55) expression -> . expression DIVIDE expression
    (56) expression -> . expression MOD expression
    (57) expression -> . LEFTPAREN expression RIGHTPAREN
    (58) expression -> . NOT expression
    (59) expression -> . expression BINAND expression
    (60) expression -> . expression BINOR expression
    (61) expression -> . expression BINXOR expression
    (62) expression -> . BINNOT expression
    (63) expression -> . expression LT expression
    (64) expression -> . expression GT expression
    (65) expression -> . expression DOUBLEEQ expression
    (66) expression -> . expression NOTEQUAL expression
    (67) expression -> . expression LTE expression
    (68) expression -> . expression GTE expression
    (69) expression -> . expression STREQUAL expression
    (70) expression -> . expression STRNEQUAL expression
    (71) expression -> . expression AND expression
    (72) expression -> . expression OR expression
    (73) expression -> . expression LSHIFT expression
    (74) expression -> . expression RSHIFT expression
    (75) expression -> . expression URSHIFT expression
    (76) expression -> . EVAL LEFTPAREN evalmarker statements evalendmarker RIGHTPAREN
    (77) expression -> . EVAL LEFTPAREN block RIGHTPAREN
    (78) expression -> . EVAL LEFTPAREN expression RIGHTPAREN
    (81) expression -> . basicTypes
    (82) expression -> . ID
    (83) expression -> . TYPEOF expression
    (87) expression -> . arrayCall
    (92) basicTypes -> . NUMBER
    (93) basicTypes -> . BOOLEAN
    (94) basicTypes -> . STRING
    (95) basicTypes -> . UNDEFINED
    (89) arrayCall -> . ID reference

    LEFTPAREN       shift and go to state 37
    NOT             shift and go to state 41
    BINNOT          shift and go to state 43
    EVAL            shift and go to state 31
    ID              shift and go to state 38
    TYPEOF          shift and go to state 36
    NUMBER          shift and go to state 32
    BOOLEAN         shift and go to state 40
    STRING          shift and go to state 35
    UNDEFINED       shift and go to state 33

    arrayCall                      shift and go to state 34
    expression                     shift and go to state 106
    basicTypes                     shift and go to state 42

state 42

    (81) expression -> basicTypes .

    PLUS            reduce using rule 81 (expression -> basicTypes .)
    MINUS           reduce using rule 81 (expression -> basicTypes .)
    INTO            reduce using rule 81 (expression -> basicTypes .)
    DIVIDE          reduce using rule 81 (expression -> basicTypes .)
    MOD             reduce using rule 81 (expression -> basicTypes .)
    BINAND          reduce using rule 81 (expression -> basicTypes .)
    BINOR           reduce using rule 81 (expression -> basicTypes .)
    BINXOR          reduce using rule 81 (expression -> basicTypes .)
    LT              reduce using rule 81 (expression -> basicTypes .)
    GT              reduce using rule 81 (expression -> basicTypes .)
    DOUBLEEQ        reduce using rule 81 (expression -> basicTypes .)
    NOTEQUAL        reduce using rule 81 (expression -> basicTypes .)
    LTE             reduce using rule 81 (expression -> basicTypes .)
    GTE             reduce using rule 81 (expression -> basicTypes .)
    STREQUAL        reduce using rule 81 (expression -> basicTypes .)
    STRNEQUAL       reduce using rule 81 (expression -> basicTypes .)
    AND             reduce using rule 81 (expression -> basicTypes .)
    OR              reduce using rule 81 (expression -> basicTypes .)
    LSHIFT          reduce using rule 81 (expression -> basicTypes .)
    RSHIFT          reduce using rule 81 (expression -> basicTypes .)
    URSHIFT         reduce using rule 81 (expression -> basicTypes .)
    SEMICOLON       reduce using rule 81 (expression -> basicTypes .)
    RIGHTPAREN      reduce using rule 81 (expression -> basicTypes .)
    COMMA           reduce using rule 81 (expression -> basicTypes .)
    LEFTBRACE       reduce using rule 81 (expression -> basicTypes .)
    RIGHTBRACKET    reduce using rule 81 (expression -> basicTypes .)


state 43

    (62) expression -> BINNOT . expression
    (52) expression -> . expression PLUS expression
    (53) expression -> . expression MINUS expression
    (54) expression -> . expression INTO expression
    (55) expression -> . expression DIVIDE expression
    (56) expression -> . expression MOD expression
    (57) expression -> . LEFTPAREN expression RIGHTPAREN
    (58) expression -> . NOT expression
    (59) expression -> . expression BINAND expression
    (60) expression -> . expression BINOR expression
    (61) expression -> . expression BINXOR expression
    (62) expression -> . BINNOT expression
    (63) expression -> . expression LT expression
    (64) expression -> . expression GT expression
    (65) expression -> . expression DOUBLEEQ expression
    (66) expression -> . expression NOTEQUAL expression
    (67) expression -> . expression LTE expression
    (68) expression -> . expression GTE expression
    (69) expression -> . expression STREQUAL expression
    (70) expression -> . expression STRNEQUAL expression
    (71) expression -> . expression AND expression
    (72) expression -> . expression OR expression
    (73) expression -> . expression LSHIFT expression
    (74) expression -> . expression RSHIFT expression
    (75) expression -> . expression URSHIFT expression
    (76) expression -> . EVAL LEFTPAREN evalmarker statements evalendmarker RIGHTPAREN
    (77) expression -> . EVAL LEFTPAREN block RIGHTPAREN
    (78) expression -> . EVAL LEFTPAREN expression RIGHTPAREN
    (81) expression -> . basicTypes
    (82) expression -> . ID
    (83) expression -> . TYPEOF expression
    (87) expression -> . arrayCall
    (92) basicTypes -> . NUMBER
    (93) basicTypes -> . BOOLEAN
    (94) basicTypes -> . STRING
    (95) basicTypes -> . UNDEFINED
    (89) arrayCall -> . ID reference

    LEFTPAREN       shift and go to state 37
    NOT             shift and go to state 41
    BINNOT          shift and go to state 43
    EVAL            shift and go to state 31
    ID              shift and go to state 38
    TYPEOF          shift and go to state 36
    NUMBER          shift and go to state 32
    BOOLEAN         shift and go to state 40
    STRING          shift and go to state 35
    UNDEFINED       shift and go to state 33

    arrayCall                      shift and go to state 34
    expression                     shift and go to state 107
    basicTypes                     shift and go to state 42

state 44

    (9) statement -> reassignment SEMICOLON .

    BREAK           reduce using rule 9 (statement -> reassignment SEMICOLON .)
    CONTINUE        reduce using rule 9 (statement -> reassignment SEMICOLON .)
    RETURN          reduce using rule 9 (statement -> reassignment SEMICOLON .)
    CONSOLE         reduce using rule 9 (statement -> reassignment SEMICOLON .)
    VAR             reduce using rule 9 (statement -> reassignment SEMICOLON .)
    ID              reduce using rule 9 (statement -> reassignment SEMICOLON .)
    LEFTPAREN       reduce using rule 9 (statement -> reassignment SEMICOLON .)
    IF              reduce using rule 9 (statement -> reassignment SEMICOLON .)
    WHILE           reduce using rule 9 (statement -> reassignment SEMICOLON .)
    FUNCTION        reduce using rule 9 (statement -> reassignment SEMICOLON .)
    FOR             reduce using rule 9 (statement -> reassignment SEMICOLON .)
    RIGHTBRACE      reduce using rule 9 (statement -> reassignment SEMICOLON .)
    $end            reduce using rule 9 (statement -> reassignment SEMICOLON .)
    RIGHTPAREN      reduce using rule 9 (statement -> reassignment SEMICOLON .)


state 45

    (110) forloop -> FOR scope_marker . LEFTPAREN initialization SEMICOLON forexpr_marker for_expr forcheck_marker SEMICOLON increment increment_marker RIGHTPAREN forblock endblock_marker

    LEFTPAREN       shift and go to state 108


state 46

    (12) statement -> funcstmt SEMICOLON .

    BREAK           reduce using rule 12 (statement -> funcstmt SEMICOLON .)
    CONTINUE        reduce using rule 12 (statement -> funcstmt SEMICOLON .)
    RETURN          reduce using rule 12 (statement -> funcstmt SEMICOLON .)
    CONSOLE         reduce using rule 12 (statement -> funcstmt SEMICOLON .)
    VAR             reduce using rule 12 (statement -> funcstmt SEMICOLON .)
    ID              reduce using rule 12 (statement -> funcstmt SEMICOLON .)
    LEFTPAREN       reduce using rule 12 (statement -> funcstmt SEMICOLON .)
    IF              reduce using rule 12 (statement -> funcstmt SEMICOLON .)
    WHILE           reduce using rule 12 (statement -> funcstmt SEMICOLON .)
    FUNCTION        reduce using rule 12 (statement -> funcstmt SEMICOLON .)
    FOR             reduce using rule 12 (statement -> funcstmt SEMICOLON .)
    RIGHTBRACE      reduce using rule 12 (statement -> funcstmt SEMICOLON .)
    $end            reduce using rule 12 (statement -> funcstmt SEMICOLON .)
    RIGHTPAREN      reduce using rule 12 (statement -> funcstmt SEMICOLON .)


state 47

    (88) reassignmentarray -> arrayCall EQ . expression
    (52) expression -> . expression PLUS expression
    (53) expression -> . expression MINUS expression
    (54) expression -> . expression INTO expression
    (55) expression -> . expression DIVIDE expression
    (56) expression -> . expression MOD expression
    (57) expression -> . LEFTPAREN expression RIGHTPAREN
    (58) expression -> . NOT expression
    (59) expression -> . expression BINAND expression
    (60) expression -> . expression BINOR expression
    (61) expression -> . expression BINXOR expression
    (62) expression -> . BINNOT expression
    (63) expression -> . expression LT expression
    (64) expression -> . expression GT expression
    (65) expression -> . expression DOUBLEEQ expression
    (66) expression -> . expression NOTEQUAL expression
    (67) expression -> . expression LTE expression
    (68) expression -> . expression GTE expression
    (69) expression -> . expression STREQUAL expression
    (70) expression -> . expression STRNEQUAL expression
    (71) expression -> . expression AND expression
    (72) expression -> . expression OR expression
    (73) expression -> . expression LSHIFT expression
    (74) expression -> . expression RSHIFT expression
    (75) expression -> . expression URSHIFT expression
    (76) expression -> . EVAL LEFTPAREN evalmarker statements evalendmarker RIGHTPAREN
    (77) expression -> . EVAL LEFTPAREN block RIGHTPAREN
    (78) expression -> . EVAL LEFTPAREN expression RIGHTPAREN
    (81) expression -> . basicTypes
    (82) expression -> . ID
    (83) expression -> . TYPEOF expression
    (87) expression -> . arrayCall
    (92) basicTypes -> . NUMBER
    (93) basicTypes -> . BOOLEAN
    (94) basicTypes -> . STRING
    (95) basicTypes -> . UNDEFINED
    (89) arrayCall -> . ID reference

    LEFTPAREN       shift and go to state 37
    NOT             shift and go to state 41
    BINNOT          shift and go to state 43
    EVAL            shift and go to state 31
    ID              shift and go to state 38
    TYPEOF          shift and go to state 36
    NUMBER          shift and go to state 32
    BOOLEAN         shift and go to state 40
    STRING          shift and go to state 35
    UNDEFINED       shift and go to state 33

    arrayCall                      shift and go to state 34
    expression                     shift and go to state 109
    basicTypes                     shift and go to state 42

state 48

    (18) statement -> reassignmentarray SEMICOLON .

    BREAK           reduce using rule 18 (statement -> reassignmentarray SEMICOLON .)
    CONTINUE        reduce using rule 18 (statement -> reassignmentarray SEMICOLON .)
    RETURN          reduce using rule 18 (statement -> reassignmentarray SEMICOLON .)
    CONSOLE         reduce using rule 18 (statement -> reassignmentarray SEMICOLON .)
    VAR             reduce using rule 18 (statement -> reassignmentarray SEMICOLON .)
    ID              reduce using rule 18 (statement -> reassignmentarray SEMICOLON .)
    LEFTPAREN       reduce using rule 18 (statement -> reassignmentarray SEMICOLON .)
    IF              reduce using rule 18 (statement -> reassignmentarray SEMICOLON .)
    WHILE           reduce using rule 18 (statement -> reassignmentarray SEMICOLON .)
    FUNCTION        reduce using rule 18 (statement -> reassignmentarray SEMICOLON .)
    FOR             reduce using rule 18 (statement -> reassignmentarray SEMICOLON .)
    RIGHTBRACE      reduce using rule 18 (statement -> reassignmentarray SEMICOLON .)
    $end            reduce using rule 18 (statement -> reassignmentarray SEMICOLON .)
    RIGHTPAREN      reduce using rule 18 (statement -> reassignmentarray SEMICOLON .)


state 49

    (5) statements -> statement statements .

    RIGHTPAREN      reduce using rule 5 (statements -> statement statements .)
    $end            reduce using rule 5 (statements -> statement statements .)
    RIGHTBRACE      reduce using rule 5 (statements -> statement statements .)


state 50

    (100) if -> IF expression . ifelseblock block ifblockend
    (102) ifelse -> IF expression . ifelseblock block ELSE elseblock block elseblockend
    (52) expression -> expression . PLUS expression
    (53) expression -> expression . MINUS expression
    (54) expression -> expression . INTO expression
    (55) expression -> expression . DIVIDE expression
    (56) expression -> expression . MOD expression
    (59) expression -> expression . BINAND expression
    (60) expression -> expression . BINOR expression
    (61) expression -> expression . BINXOR expression
    (63) expression -> expression . LT expression
    (64) expression -> expression . GT expression
    (65) expression -> expression . DOUBLEEQ expression
    (66) expression -> expression . NOTEQUAL expression
    (67) expression -> expression . LTE expression
    (68) expression -> expression . GTE expression
    (69) expression -> expression . STREQUAL expression
    (70) expression -> expression . STRNEQUAL expression
    (71) expression -> expression . AND expression
    (72) expression -> expression . OR expression
    (73) expression -> expression . LSHIFT expression
    (74) expression -> expression . RSHIFT expression
    (75) expression -> expression . URSHIFT expression
    (103) ifelseblock -> .

    PLUS            shift and go to state 95
    MINUS           shift and go to state 89
    INTO            shift and go to state 99
    DIVIDE          shift and go to state 98
    MOD             shift and go to state 105
    BINAND          shift and go to state 91
    BINOR           shift and go to state 102
    BINXOR          shift and go to state 96
    LT              shift and go to state 94
    GT              shift and go to state 97
    DOUBLEEQ        shift and go to state 84
    NOTEQUAL        shift and go to state 85
    LTE             shift and go to state 100
    GTE             shift and go to state 90
    STREQUAL        shift and go to state 93
    STRNEQUAL       shift and go to state 86
    AND             shift and go to state 101
    OR              shift and go to state 104
    LSHIFT          shift and go to state 87
    RSHIFT          shift and go to state 88
    URSHIFT         shift and go to state 103
    LEFTBRACE       reduce using rule 103 (ifelseblock -> .)

    ifelseblock                    shift and go to state 110

state 51

    (128) funcdecl -> FUNCTION ID . funcscopedefnormal LEFTPAREN funcarghead RIGHTPAREN funblock endfunc
    (129) funcscopedefnormal -> .

    LEFTPAREN       reduce using rule 129 (funcscopedefnormal -> .)

    funcscopedefnormal             shift and go to state 111

state 52

    (20) statement -> CONSOLE DOT . LOG LEFTPAREN printList RIGHTPAREN SEMICOLON

    LOG             shift and go to state 112


state 53

    (7) statement -> assignment SEMICOLON .

    BREAK           reduce using rule 7 (statement -> assignment SEMICOLON .)
    CONTINUE        reduce using rule 7 (statement -> assignment SEMICOLON .)
    RETURN          reduce using rule 7 (statement -> assignment SEMICOLON .)
    CONSOLE         reduce using rule 7 (statement -> assignment SEMICOLON .)
    VAR             reduce using rule 7 (statement -> assignment SEMICOLON .)
    ID              reduce using rule 7 (statement -> assignment SEMICOLON .)
    LEFTPAREN       reduce using rule 7 (statement -> assignment SEMICOLON .)
    IF              reduce using rule 7 (statement -> assignment SEMICOLON .)
    WHILE           reduce using rule 7 (statement -> assignment SEMICOLON .)
    FUNCTION        reduce using rule 7 (statement -> assignment SEMICOLON .)
    FOR             reduce using rule 7 (statement -> assignment SEMICOLON .)
    RIGHTBRACE      reduce using rule 7 (statement -> assignment SEMICOLON .)
    $end            reduce using rule 7 (statement -> assignment SEMICOLON .)
    RIGHTPAREN      reduce using rule 7 (statement -> assignment SEMICOLON .)


state 54

    (44) reassignment -> LEFTPAREN reassignment . RIGHTPAREN

    RIGHTPAREN      shift and go to state 113


state 55

    (30) reassignment -> ID . EQ expression
    (31) reassignment -> ID . PLUSEQ expression
    (32) reassignment -> ID . MINUSEQ expression
    (33) reassignment -> ID . INTOEQ expression
    (34) reassignment -> ID . DIVEQ expression
    (35) reassignment -> ID . INCR
    (36) reassignment -> ID . DECR
    (37) reassignment -> ID . LSHIFTEQ expression
    (38) reassignment -> ID . RSHIFTEQ expression
    (39) reassignment -> ID . URSHIFTEQ expression
    (40) reassignment -> ID . ANDEQ expression
    (41) reassignment -> ID . OREQ expression
    (42) reassignment -> ID . XOREQ expression
    (43) reassignment -> ID . MODEQ expression

    EQ              shift and go to state 114
    PLUSEQ          shift and go to state 76
    MINUSEQ         shift and go to state 67
    INTOEQ          shift and go to state 62
    DIVEQ           shift and go to state 70
    INCR            shift and go to state 64
    DECR            shift and go to state 63
    LSHIFTEQ        shift and go to state 71
    RSHIFTEQ        shift and go to state 75
    URSHIFTEQ       shift and go to state 66
    ANDEQ           shift and go to state 73
    OREQ            shift and go to state 69
    XOREQ           shift and go to state 65
    MODEQ           shift and go to state 61


state 56

    (8) statement -> declaration SEMICOLON .

    BREAK           reduce using rule 8 (statement -> declaration SEMICOLON .)
    CONTINUE        reduce using rule 8 (statement -> declaration SEMICOLON .)
    RETURN          reduce using rule 8 (statement -> declaration SEMICOLON .)
    CONSOLE         reduce using rule 8 (statement -> declaration SEMICOLON .)
    VAR             reduce using rule 8 (statement -> declaration SEMICOLON .)
    ID              reduce using rule 8 (statement -> declaration SEMICOLON .)
    LEFTPAREN       reduce using rule 8 (statement -> declaration SEMICOLON .)
    IF              reduce using rule 8 (statement -> declaration SEMICOLON .)
    WHILE           reduce using rule 8 (statement -> declaration SEMICOLON .)
    FUNCTION        reduce using rule 8 (statement -> declaration SEMICOLON .)
    FOR             reduce using rule 8 (statement -> declaration SEMICOLON .)
    RIGHTBRACE      reduce using rule 8 (statement -> declaration SEMICOLON .)
    $end            reduce using rule 8 (statement -> declaration SEMICOLON .)
    RIGHTPAREN      reduce using rule 8 (statement -> declaration SEMICOLON .)


state 57

    (26) assignment -> VAR assignlist .

    SEMICOLON       reduce using rule 26 (assignment -> VAR assignlist .)


state 58

    (23) declaration -> VAR declarationList .

    SEMICOLON       reduce using rule 23 (declaration -> VAR declarationList .)


state 59

    (86) funcstmt -> VAR ID . EQ functioncall
    (131) funcdecl -> VAR ID . EQ FUNCTION funcscopedef LEFTPAREN funcarghead RIGHTPAREN funblock SEMICOLON endfuncdecl
    (27) assignlist -> ID . EQ expression COMMA assignlist
    (28) assignlist -> ID . EQ expression
    (29) assignlist -> ID . EQ array
    (24) declarationList -> ID . COMMA declarationList
    (25) declarationList -> ID .

    EQ              shift and go to state 116
    COMMA           shift and go to state 115
    SEMICOLON       reduce using rule 25 (declarationList -> ID .)


state 60

    (89) arrayCall -> ID reference .

    PLUS            reduce using rule 89 (arrayCall -> ID reference .)
    MINUS           reduce using rule 89 (arrayCall -> ID reference .)
    INTO            reduce using rule 89 (arrayCall -> ID reference .)
    DIVIDE          reduce using rule 89 (arrayCall -> ID reference .)
    MOD             reduce using rule 89 (arrayCall -> ID reference .)
    BINAND          reduce using rule 89 (arrayCall -> ID reference .)
    BINOR           reduce using rule 89 (arrayCall -> ID reference .)
    BINXOR          reduce using rule 89 (arrayCall -> ID reference .)
    LT              reduce using rule 89 (arrayCall -> ID reference .)
    GT              reduce using rule 89 (arrayCall -> ID reference .)
    DOUBLEEQ        reduce using rule 89 (arrayCall -> ID reference .)
    NOTEQUAL        reduce using rule 89 (arrayCall -> ID reference .)
    LTE             reduce using rule 89 (arrayCall -> ID reference .)
    GTE             reduce using rule 89 (arrayCall -> ID reference .)
    STREQUAL        reduce using rule 89 (arrayCall -> ID reference .)
    STRNEQUAL       reduce using rule 89 (arrayCall -> ID reference .)
    AND             reduce using rule 89 (arrayCall -> ID reference .)
    OR              reduce using rule 89 (arrayCall -> ID reference .)
    LSHIFT          reduce using rule 89 (arrayCall -> ID reference .)
    RSHIFT          reduce using rule 89 (arrayCall -> ID reference .)
    URSHIFT         reduce using rule 89 (arrayCall -> ID reference .)
    SEMICOLON       reduce using rule 89 (arrayCall -> ID reference .)
    LEFTBRACE       reduce using rule 89 (arrayCall -> ID reference .)
    RIGHTPAREN      reduce using rule 89 (arrayCall -> ID reference .)
    COMMA           reduce using rule 89 (arrayCall -> ID reference .)
    RIGHTBRACKET    reduce using rule 89 (arrayCall -> ID reference .)
    EQ              reduce using rule 89 (arrayCall -> ID reference .)


state 61

    (43) reassignment -> ID MODEQ . expression
    (52) expression -> . expression PLUS expression
    (53) expression -> . expression MINUS expression
    (54) expression -> . expression INTO expression
    (55) expression -> . expression DIVIDE expression
    (56) expression -> . expression MOD expression
    (57) expression -> . LEFTPAREN expression RIGHTPAREN
    (58) expression -> . NOT expression
    (59) expression -> . expression BINAND expression
    (60) expression -> . expression BINOR expression
    (61) expression -> . expression BINXOR expression
    (62) expression -> . BINNOT expression
    (63) expression -> . expression LT expression
    (64) expression -> . expression GT expression
    (65) expression -> . expression DOUBLEEQ expression
    (66) expression -> . expression NOTEQUAL expression
    (67) expression -> . expression LTE expression
    (68) expression -> . expression GTE expression
    (69) expression -> . expression STREQUAL expression
    (70) expression -> . expression STRNEQUAL expression
    (71) expression -> . expression AND expression
    (72) expression -> . expression OR expression
    (73) expression -> . expression LSHIFT expression
    (74) expression -> . expression RSHIFT expression
    (75) expression -> . expression URSHIFT expression
    (76) expression -> . EVAL LEFTPAREN evalmarker statements evalendmarker RIGHTPAREN
    (77) expression -> . EVAL LEFTPAREN block RIGHTPAREN
    (78) expression -> . EVAL LEFTPAREN expression RIGHTPAREN
    (81) expression -> . basicTypes
    (82) expression -> . ID
    (83) expression -> . TYPEOF expression
    (87) expression -> . arrayCall
    (92) basicTypes -> . NUMBER
    (93) basicTypes -> . BOOLEAN
    (94) basicTypes -> . STRING
    (95) basicTypes -> . UNDEFINED
    (89) arrayCall -> . ID reference

    LEFTPAREN       shift and go to state 37
    NOT             shift and go to state 41
    BINNOT          shift and go to state 43
    EVAL            shift and go to state 31
    ID              shift and go to state 38
    TYPEOF          shift and go to state 36
    NUMBER          shift and go to state 32
    BOOLEAN         shift and go to state 40
    STRING          shift and go to state 35
    UNDEFINED       shift and go to state 33

    arrayCall                      shift and go to state 34
    expression                     shift and go to state 117
    basicTypes                     shift and go to state 42

state 62

    (33) reassignment -> ID INTOEQ . expression
    (52) expression -> . expression PLUS expression
    (53) expression -> . expression MINUS expression
    (54) expression -> . expression INTO expression
    (55) expression -> . expression DIVIDE expression
    (56) expression -> . expression MOD expression
    (57) expression -> . LEFTPAREN expression RIGHTPAREN
    (58) expression -> . NOT expression
    (59) expression -> . expression BINAND expression
    (60) expression -> . expression BINOR expression
    (61) expression -> . expression BINXOR expression
    (62) expression -> . BINNOT expression
    (63) expression -> . expression LT expression
    (64) expression -> . expression GT expression
    (65) expression -> . expression DOUBLEEQ expression
    (66) expression -> . expression NOTEQUAL expression
    (67) expression -> . expression LTE expression
    (68) expression -> . expression GTE expression
    (69) expression -> . expression STREQUAL expression
    (70) expression -> . expression STRNEQUAL expression
    (71) expression -> . expression AND expression
    (72) expression -> . expression OR expression
    (73) expression -> . expression LSHIFT expression
    (74) expression -> . expression RSHIFT expression
    (75) expression -> . expression URSHIFT expression
    (76) expression -> . EVAL LEFTPAREN evalmarker statements evalendmarker RIGHTPAREN
    (77) expression -> . EVAL LEFTPAREN block RIGHTPAREN
    (78) expression -> . EVAL LEFTPAREN expression RIGHTPAREN
    (81) expression -> . basicTypes
    (82) expression -> . ID
    (83) expression -> . TYPEOF expression
    (87) expression -> . arrayCall
    (92) basicTypes -> . NUMBER
    (93) basicTypes -> . BOOLEAN
    (94) basicTypes -> . STRING
    (95) basicTypes -> . UNDEFINED
    (89) arrayCall -> . ID reference

    LEFTPAREN       shift and go to state 37
    NOT             shift and go to state 41
    BINNOT          shift and go to state 43
    EVAL            shift and go to state 31
    ID              shift and go to state 38
    TYPEOF          shift and go to state 36
    NUMBER          shift and go to state 32
    BOOLEAN         shift and go to state 40
    STRING          shift and go to state 35
    UNDEFINED       shift and go to state 33

    arrayCall                      shift and go to state 34
    expression                     shift and go to state 118
    basicTypes                     shift and go to state 42

state 63

    (36) reassignment -> ID DECR .

    SEMICOLON       reduce using rule 36 (reassignment -> ID DECR .)
    RIGHTPAREN      reduce using rule 36 (reassignment -> ID DECR .)
    COMMA           reduce using rule 36 (reassignment -> ID DECR .)


state 64

    (35) reassignment -> ID INCR .

    SEMICOLON       reduce using rule 35 (reassignment -> ID INCR .)
    RIGHTPAREN      reduce using rule 35 (reassignment -> ID INCR .)
    COMMA           reduce using rule 35 (reassignment -> ID INCR .)


state 65

    (42) reassignment -> ID XOREQ . expression
    (52) expression -> . expression PLUS expression
    (53) expression -> . expression MINUS expression
    (54) expression -> . expression INTO expression
    (55) expression -> . expression DIVIDE expression
    (56) expression -> . expression MOD expression
    (57) expression -> . LEFTPAREN expression RIGHTPAREN
    (58) expression -> . NOT expression
    (59) expression -> . expression BINAND expression
    (60) expression -> . expression BINOR expression
    (61) expression -> . expression BINXOR expression
    (62) expression -> . BINNOT expression
    (63) expression -> . expression LT expression
    (64) expression -> . expression GT expression
    (65) expression -> . expression DOUBLEEQ expression
    (66) expression -> . expression NOTEQUAL expression
    (67) expression -> . expression LTE expression
    (68) expression -> . expression GTE expression
    (69) expression -> . expression STREQUAL expression
    (70) expression -> . expression STRNEQUAL expression
    (71) expression -> . expression AND expression
    (72) expression -> . expression OR expression
    (73) expression -> . expression LSHIFT expression
    (74) expression -> . expression RSHIFT expression
    (75) expression -> . expression URSHIFT expression
    (76) expression -> . EVAL LEFTPAREN evalmarker statements evalendmarker RIGHTPAREN
    (77) expression -> . EVAL LEFTPAREN block RIGHTPAREN
    (78) expression -> . EVAL LEFTPAREN expression RIGHTPAREN
    (81) expression -> . basicTypes
    (82) expression -> . ID
    (83) expression -> . TYPEOF expression
    (87) expression -> . arrayCall
    (92) basicTypes -> . NUMBER
    (93) basicTypes -> . BOOLEAN
    (94) basicTypes -> . STRING
    (95) basicTypes -> . UNDEFINED
    (89) arrayCall -> . ID reference

    LEFTPAREN       shift and go to state 37
    NOT             shift and go to state 41
    BINNOT          shift and go to state 43
    EVAL            shift and go to state 31
    ID              shift and go to state 38
    TYPEOF          shift and go to state 36
    NUMBER          shift and go to state 32
    BOOLEAN         shift and go to state 40
    STRING          shift and go to state 35
    UNDEFINED       shift and go to state 33

    arrayCall                      shift and go to state 34
    expression                     shift and go to state 119
    basicTypes                     shift and go to state 42

state 66

    (39) reassignment -> ID URSHIFTEQ . expression
    (52) expression -> . expression PLUS expression
    (53) expression -> . expression MINUS expression
    (54) expression -> . expression INTO expression
    (55) expression -> . expression DIVIDE expression
    (56) expression -> . expression MOD expression
    (57) expression -> . LEFTPAREN expression RIGHTPAREN
    (58) expression -> . NOT expression
    (59) expression -> . expression BINAND expression
    (60) expression -> . expression BINOR expression
    (61) expression -> . expression BINXOR expression
    (62) expression -> . BINNOT expression
    (63) expression -> . expression LT expression
    (64) expression -> . expression GT expression
    (65) expression -> . expression DOUBLEEQ expression
    (66) expression -> . expression NOTEQUAL expression
    (67) expression -> . expression LTE expression
    (68) expression -> . expression GTE expression
    (69) expression -> . expression STREQUAL expression
    (70) expression -> . expression STRNEQUAL expression
    (71) expression -> . expression AND expression
    (72) expression -> . expression OR expression
    (73) expression -> . expression LSHIFT expression
    (74) expression -> . expression RSHIFT expression
    (75) expression -> . expression URSHIFT expression
    (76) expression -> . EVAL LEFTPAREN evalmarker statements evalendmarker RIGHTPAREN
    (77) expression -> . EVAL LEFTPAREN block RIGHTPAREN
    (78) expression -> . EVAL LEFTPAREN expression RIGHTPAREN
    (81) expression -> . basicTypes
    (82) expression -> . ID
    (83) expression -> . TYPEOF expression
    (87) expression -> . arrayCall
    (92) basicTypes -> . NUMBER
    (93) basicTypes -> . BOOLEAN
    (94) basicTypes -> . STRING
    (95) basicTypes -> . UNDEFINED
    (89) arrayCall -> . ID reference

    LEFTPAREN       shift and go to state 37
    NOT             shift and go to state 41
    BINNOT          shift and go to state 43
    EVAL            shift and go to state 31
    ID              shift and go to state 38
    TYPEOF          shift and go to state 36
    NUMBER          shift and go to state 32
    BOOLEAN         shift and go to state 40
    STRING          shift and go to state 35
    UNDEFINED       shift and go to state 33

    arrayCall                      shift and go to state 34
    expression                     shift and go to state 120
    basicTypes                     shift and go to state 42

state 67

    (32) reassignment -> ID MINUSEQ . expression
    (52) expression -> . expression PLUS expression
    (53) expression -> . expression MINUS expression
    (54) expression -> . expression INTO expression
    (55) expression -> . expression DIVIDE expression
    (56) expression -> . expression MOD expression
    (57) expression -> . LEFTPAREN expression RIGHTPAREN
    (58) expression -> . NOT expression
    (59) expression -> . expression BINAND expression
    (60) expression -> . expression BINOR expression
    (61) expression -> . expression BINXOR expression
    (62) expression -> . BINNOT expression
    (63) expression -> . expression LT expression
    (64) expression -> . expression GT expression
    (65) expression -> . expression DOUBLEEQ expression
    (66) expression -> . expression NOTEQUAL expression
    (67) expression -> . expression LTE expression
    (68) expression -> . expression GTE expression
    (69) expression -> . expression STREQUAL expression
    (70) expression -> . expression STRNEQUAL expression
    (71) expression -> . expression AND expression
    (72) expression -> . expression OR expression
    (73) expression -> . expression LSHIFT expression
    (74) expression -> . expression RSHIFT expression
    (75) expression -> . expression URSHIFT expression
    (76) expression -> . EVAL LEFTPAREN evalmarker statements evalendmarker RIGHTPAREN
    (77) expression -> . EVAL LEFTPAREN block RIGHTPAREN
    (78) expression -> . EVAL LEFTPAREN expression RIGHTPAREN
    (81) expression -> . basicTypes
    (82) expression -> . ID
    (83) expression -> . TYPEOF expression
    (87) expression -> . arrayCall
    (92) basicTypes -> . NUMBER
    (93) basicTypes -> . BOOLEAN
    (94) basicTypes -> . STRING
    (95) basicTypes -> . UNDEFINED
    (89) arrayCall -> . ID reference

    LEFTPAREN       shift and go to state 37
    NOT             shift and go to state 41
    BINNOT          shift and go to state 43
    EVAL            shift and go to state 31
    ID              shift and go to state 38
    TYPEOF          shift and go to state 36
    NUMBER          shift and go to state 32
    BOOLEAN         shift and go to state 40
    STRING          shift and go to state 35
    UNDEFINED       shift and go to state 33

    arrayCall                      shift and go to state 34
    expression                     shift and go to state 121
    basicTypes                     shift and go to state 42

state 68

    (90) reference -> LEFTBRACKET . expression RIGHTBRACKET reference
    (91) reference -> LEFTBRACKET . expression RIGHTBRACKET
    (52) expression -> . expression PLUS expression
    (53) expression -> . expression MINUS expression
    (54) expression -> . expression INTO expression
    (55) expression -> . expression DIVIDE expression
    (56) expression -> . expression MOD expression
    (57) expression -> . LEFTPAREN expression RIGHTPAREN
    (58) expression -> . NOT expression
    (59) expression -> . expression BINAND expression
    (60) expression -> . expression BINOR expression
    (61) expression -> . expression BINXOR expression
    (62) expression -> . BINNOT expression
    (63) expression -> . expression LT expression
    (64) expression -> . expression GT expression
    (65) expression -> . expression DOUBLEEQ expression
    (66) expression -> . expression NOTEQUAL expression
    (67) expression -> . expression LTE expression
    (68) expression -> . expression GTE expression
    (69) expression -> . expression STREQUAL expression
    (70) expression -> . expression STRNEQUAL expression
    (71) expression -> . expression AND expression
    (72) expression -> . expression OR expression
    (73) expression -> . expression LSHIFT expression
    (74) expression -> . expression RSHIFT expression
    (75) expression -> . expression URSHIFT expression
    (76) expression -> . EVAL LEFTPAREN evalmarker statements evalendmarker RIGHTPAREN
    (77) expression -> . EVAL LEFTPAREN block RIGHTPAREN
    (78) expression -> . EVAL LEFTPAREN expression RIGHTPAREN
    (81) expression -> . basicTypes
    (82) expression -> . ID
    (83) expression -> . TYPEOF expression
    (87) expression -> . arrayCall
    (92) basicTypes -> . NUMBER
    (93) basicTypes -> . BOOLEAN
    (94) basicTypes -> . STRING
    (95) basicTypes -> . UNDEFINED
    (89) arrayCall -> . ID reference

    LEFTPAREN       shift and go to state 37
    NOT             shift and go to state 41
    BINNOT          shift and go to state 43
    EVAL            shift and go to state 31
    ID              shift and go to state 38
    TYPEOF          shift and go to state 36
    NUMBER          shift and go to state 32
    BOOLEAN         shift and go to state 40
    STRING          shift and go to state 35
    UNDEFINED       shift and go to state 33

    arrayCall                      shift and go to state 34
    expression                     shift and go to state 122
    basicTypes                     shift and go to state 42

state 69

    (41) reassignment -> ID OREQ . expression
    (52) expression -> . expression PLUS expression
    (53) expression -> . expression MINUS expression
    (54) expression -> . expression INTO expression
    (55) expression -> . expression DIVIDE expression
    (56) expression -> . expression MOD expression
    (57) expression -> . LEFTPAREN expression RIGHTPAREN
    (58) expression -> . NOT expression
    (59) expression -> . expression BINAND expression
    (60) expression -> . expression BINOR expression
    (61) expression -> . expression BINXOR expression
    (62) expression -> . BINNOT expression
    (63) expression -> . expression LT expression
    (64) expression -> . expression GT expression
    (65) expression -> . expression DOUBLEEQ expression
    (66) expression -> . expression NOTEQUAL expression
    (67) expression -> . expression LTE expression
    (68) expression -> . expression GTE expression
    (69) expression -> . expression STREQUAL expression
    (70) expression -> . expression STRNEQUAL expression
    (71) expression -> . expression AND expression
    (72) expression -> . expression OR expression
    (73) expression -> . expression LSHIFT expression
    (74) expression -> . expression RSHIFT expression
    (75) expression -> . expression URSHIFT expression
    (76) expression -> . EVAL LEFTPAREN evalmarker statements evalendmarker RIGHTPAREN
    (77) expression -> . EVAL LEFTPAREN block RIGHTPAREN
    (78) expression -> . EVAL LEFTPAREN expression RIGHTPAREN
    (81) expression -> . basicTypes
    (82) expression -> . ID
    (83) expression -> . TYPEOF expression
    (87) expression -> . arrayCall
    (92) basicTypes -> . NUMBER
    (93) basicTypes -> . BOOLEAN
    (94) basicTypes -> . STRING
    (95) basicTypes -> . UNDEFINED
    (89) arrayCall -> . ID reference

    LEFTPAREN       shift and go to state 37
    NOT             shift and go to state 41
    BINNOT          shift and go to state 43
    EVAL            shift and go to state 31
    ID              shift and go to state 38
    TYPEOF          shift and go to state 36
    NUMBER          shift and go to state 32
    BOOLEAN         shift and go to state 40
    STRING          shift and go to state 35
    UNDEFINED       shift and go to state 33

    arrayCall                      shift and go to state 34
    expression                     shift and go to state 123
    basicTypes                     shift and go to state 42

state 70

    (34) reassignment -> ID DIVEQ . expression
    (52) expression -> . expression PLUS expression
    (53) expression -> . expression MINUS expression
    (54) expression -> . expression INTO expression
    (55) expression -> . expression DIVIDE expression
    (56) expression -> . expression MOD expression
    (57) expression -> . LEFTPAREN expression RIGHTPAREN
    (58) expression -> . NOT expression
    (59) expression -> . expression BINAND expression
    (60) expression -> . expression BINOR expression
    (61) expression -> . expression BINXOR expression
    (62) expression -> . BINNOT expression
    (63) expression -> . expression LT expression
    (64) expression -> . expression GT expression
    (65) expression -> . expression DOUBLEEQ expression
    (66) expression -> . expression NOTEQUAL expression
    (67) expression -> . expression LTE expression
    (68) expression -> . expression GTE expression
    (69) expression -> . expression STREQUAL expression
    (70) expression -> . expression STRNEQUAL expression
    (71) expression -> . expression AND expression
    (72) expression -> . expression OR expression
    (73) expression -> . expression LSHIFT expression
    (74) expression -> . expression RSHIFT expression
    (75) expression -> . expression URSHIFT expression
    (76) expression -> . EVAL LEFTPAREN evalmarker statements evalendmarker RIGHTPAREN
    (77) expression -> . EVAL LEFTPAREN block RIGHTPAREN
    (78) expression -> . EVAL LEFTPAREN expression RIGHTPAREN
    (81) expression -> . basicTypes
    (82) expression -> . ID
    (83) expression -> . TYPEOF expression
    (87) expression -> . arrayCall
    (92) basicTypes -> . NUMBER
    (93) basicTypes -> . BOOLEAN
    (94) basicTypes -> . STRING
    (95) basicTypes -> . UNDEFINED
    (89) arrayCall -> . ID reference

    LEFTPAREN       shift and go to state 37
    NOT             shift and go to state 41
    BINNOT          shift and go to state 43
    EVAL            shift and go to state 31
    ID              shift and go to state 38
    TYPEOF          shift and go to state 36
    NUMBER          shift and go to state 32
    BOOLEAN         shift and go to state 40
    STRING          shift and go to state 35
    UNDEFINED       shift and go to state 33

    arrayCall                      shift and go to state 34
    expression                     shift and go to state 124
    basicTypes                     shift and go to state 42

state 71

    (37) reassignment -> ID LSHIFTEQ . expression
    (52) expression -> . expression PLUS expression
    (53) expression -> . expression MINUS expression
    (54) expression -> . expression INTO expression
    (55) expression -> . expression DIVIDE expression
    (56) expression -> . expression MOD expression
    (57) expression -> . LEFTPAREN expression RIGHTPAREN
    (58) expression -> . NOT expression
    (59) expression -> . expression BINAND expression
    (60) expression -> . expression BINOR expression
    (61) expression -> . expression BINXOR expression
    (62) expression -> . BINNOT expression
    (63) expression -> . expression LT expression
    (64) expression -> . expression GT expression
    (65) expression -> . expression DOUBLEEQ expression
    (66) expression -> . expression NOTEQUAL expression
    (67) expression -> . expression LTE expression
    (68) expression -> . expression GTE expression
    (69) expression -> . expression STREQUAL expression
    (70) expression -> . expression STRNEQUAL expression
    (71) expression -> . expression AND expression
    (72) expression -> . expression OR expression
    (73) expression -> . expression LSHIFT expression
    (74) expression -> . expression RSHIFT expression
    (75) expression -> . expression URSHIFT expression
    (76) expression -> . EVAL LEFTPAREN evalmarker statements evalendmarker RIGHTPAREN
    (77) expression -> . EVAL LEFTPAREN block RIGHTPAREN
    (78) expression -> . EVAL LEFTPAREN expression RIGHTPAREN
    (81) expression -> . basicTypes
    (82) expression -> . ID
    (83) expression -> . TYPEOF expression
    (87) expression -> . arrayCall
    (92) basicTypes -> . NUMBER
    (93) basicTypes -> . BOOLEAN
    (94) basicTypes -> . STRING
    (95) basicTypes -> . UNDEFINED
    (89) arrayCall -> . ID reference

    LEFTPAREN       shift and go to state 37
    NOT             shift and go to state 41
    BINNOT          shift and go to state 43
    EVAL            shift and go to state 31
    ID              shift and go to state 38
    TYPEOF          shift and go to state 36
    NUMBER          shift and go to state 32
    BOOLEAN         shift and go to state 40
    STRING          shift and go to state 35
    UNDEFINED       shift and go to state 33

    arrayCall                      shift and go to state 34
    expression                     shift and go to state 125
    basicTypes                     shift and go to state 42

state 72

    (96) functioncall -> ID LEFTPAREN . argList RIGHTPAREN
    (97) argList -> . expression
    (98) argList -> . expression COMMA argList
    (99) argList -> .
    (52) expression -> . expression PLUS expression
    (53) expression -> . expression MINUS expression
    (54) expression -> . expression INTO expression
    (55) expression -> . expression DIVIDE expression
    (56) expression -> . expression MOD expression
    (57) expression -> . LEFTPAREN expression RIGHTPAREN
    (58) expression -> . NOT expression
    (59) expression -> . expression BINAND expression
    (60) expression -> . expression BINOR expression
    (61) expression -> . expression BINXOR expression
    (62) expression -> . BINNOT expression
    (63) expression -> . expression LT expression
    (64) expression -> . expression GT expression
    (65) expression -> . expression DOUBLEEQ expression
    (66) expression -> . expression NOTEQUAL expression
    (67) expression -> . expression LTE expression
    (68) expression -> . expression GTE expression
    (69) expression -> . expression STREQUAL expression
    (70) expression -> . expression STRNEQUAL expression
    (71) expression -> . expression AND expression
    (72) expression -> . expression OR expression
    (73) expression -> . expression LSHIFT expression
    (74) expression -> . expression RSHIFT expression
    (75) expression -> . expression URSHIFT expression
    (76) expression -> . EVAL LEFTPAREN evalmarker statements evalendmarker RIGHTPAREN
    (77) expression -> . EVAL LEFTPAREN block RIGHTPAREN
    (78) expression -> . EVAL LEFTPAREN expression RIGHTPAREN
    (81) expression -> . basicTypes
    (82) expression -> . ID
    (83) expression -> . TYPEOF expression
    (87) expression -> . arrayCall
    (92) basicTypes -> . NUMBER
    (93) basicTypes -> . BOOLEAN
    (94) basicTypes -> . STRING
    (95) basicTypes -> . UNDEFINED
    (89) arrayCall -> . ID reference

    RIGHTPAREN      reduce using rule 99 (argList -> .)
    LEFTPAREN       shift and go to state 37
    NOT             shift and go to state 41
    BINNOT          shift and go to state 43
    EVAL            shift and go to state 31
    ID              shift and go to state 38
    TYPEOF          shift and go to state 36
    NUMBER          shift and go to state 32
    BOOLEAN         shift and go to state 40
    STRING          shift and go to state 35
    UNDEFINED       shift and go to state 33

    arrayCall                      shift and go to state 34
    argList                        shift and go to state 126
    expression                     shift and go to state 127
    basicTypes                     shift and go to state 42

state 73

    (40) reassignment -> ID ANDEQ . expression
    (52) expression -> . expression PLUS expression
    (53) expression -> . expression MINUS expression
    (54) expression -> . expression INTO expression
    (55) expression -> . expression DIVIDE expression
    (56) expression -> . expression MOD expression
    (57) expression -> . LEFTPAREN expression RIGHTPAREN
    (58) expression -> . NOT expression
    (59) expression -> . expression BINAND expression
    (60) expression -> . expression BINOR expression
    (61) expression -> . expression BINXOR expression
    (62) expression -> . BINNOT expression
    (63) expression -> . expression LT expression
    (64) expression -> . expression GT expression
    (65) expression -> . expression DOUBLEEQ expression
    (66) expression -> . expression NOTEQUAL expression
    (67) expression -> . expression LTE expression
    (68) expression -> . expression GTE expression
    (69) expression -> . expression STREQUAL expression
    (70) expression -> . expression STRNEQUAL expression
    (71) expression -> . expression AND expression
    (72) expression -> . expression OR expression
    (73) expression -> . expression LSHIFT expression
    (74) expression -> . expression RSHIFT expression
    (75) expression -> . expression URSHIFT expression
    (76) expression -> . EVAL LEFTPAREN evalmarker statements evalendmarker RIGHTPAREN
    (77) expression -> . EVAL LEFTPAREN block RIGHTPAREN
    (78) expression -> . EVAL LEFTPAREN expression RIGHTPAREN
    (81) expression -> . basicTypes
    (82) expression -> . ID
    (83) expression -> . TYPEOF expression
    (87) expression -> . arrayCall
    (92) basicTypes -> . NUMBER
    (93) basicTypes -> . BOOLEAN
    (94) basicTypes -> . STRING
    (95) basicTypes -> . UNDEFINED
    (89) arrayCall -> . ID reference

    LEFTPAREN       shift and go to state 37
    NOT             shift and go to state 41
    BINNOT          shift and go to state 43
    EVAL            shift and go to state 31
    ID              shift and go to state 38
    TYPEOF          shift and go to state 36
    NUMBER          shift and go to state 32
    BOOLEAN         shift and go to state 40
    STRING          shift and go to state 35
    UNDEFINED       shift and go to state 33

    arrayCall                      shift and go to state 34
    expression                     shift and go to state 128
    basicTypes                     shift and go to state 42

state 74

    (30) reassignment -> ID EQ . expression
    (84) funcstmt -> ID EQ . functioncall
    (52) expression -> . expression PLUS expression
    (53) expression -> . expression MINUS expression
    (54) expression -> . expression INTO expression
    (55) expression -> . expression DIVIDE expression
    (56) expression -> . expression MOD expression
    (57) expression -> . LEFTPAREN expression RIGHTPAREN
    (58) expression -> . NOT expression
    (59) expression -> . expression BINAND expression
    (60) expression -> . expression BINOR expression
    (61) expression -> . expression BINXOR expression
    (62) expression -> . BINNOT expression
    (63) expression -> . expression LT expression
    (64) expression -> . expression GT expression
    (65) expression -> . expression DOUBLEEQ expression
    (66) expression -> . expression NOTEQUAL expression
    (67) expression -> . expression LTE expression
    (68) expression -> . expression GTE expression
    (69) expression -> . expression STREQUAL expression
    (70) expression -> . expression STRNEQUAL expression
    (71) expression -> . expression AND expression
    (72) expression -> . expression OR expression
    (73) expression -> . expression LSHIFT expression
    (74) expression -> . expression RSHIFT expression
    (75) expression -> . expression URSHIFT expression
    (76) expression -> . EVAL LEFTPAREN evalmarker statements evalendmarker RIGHTPAREN
    (77) expression -> . EVAL LEFTPAREN block RIGHTPAREN
    (78) expression -> . EVAL LEFTPAREN expression RIGHTPAREN
    (81) expression -> . basicTypes
    (82) expression -> . ID
    (83) expression -> . TYPEOF expression
    (87) expression -> . arrayCall
    (96) functioncall -> . ID LEFTPAREN argList RIGHTPAREN
    (92) basicTypes -> . NUMBER
    (93) basicTypes -> . BOOLEAN
    (94) basicTypes -> . STRING
    (95) basicTypes -> . UNDEFINED
    (89) arrayCall -> . ID reference

    LEFTPAREN       shift and go to state 37
    NOT             shift and go to state 41
    BINNOT          shift and go to state 43
    EVAL            shift and go to state 31
    ID              shift and go to state 129
    TYPEOF          shift and go to state 36
    NUMBER          shift and go to state 32
    BOOLEAN         shift and go to state 40
    STRING          shift and go to state 35
    UNDEFINED       shift and go to state 33

    arrayCall                      shift and go to state 34
    functioncall                   shift and go to state 131
    expression                     shift and go to state 130
    basicTypes                     shift and go to state 42

state 75

    (38) reassignment -> ID RSHIFTEQ . expression
    (52) expression -> . expression PLUS expression
    (53) expression -> . expression MINUS expression
    (54) expression -> . expression INTO expression
    (55) expression -> . expression DIVIDE expression
    (56) expression -> . expression MOD expression
    (57) expression -> . LEFTPAREN expression RIGHTPAREN
    (58) expression -> . NOT expression
    (59) expression -> . expression BINAND expression
    (60) expression -> . expression BINOR expression
    (61) expression -> . expression BINXOR expression
    (62) expression -> . BINNOT expression
    (63) expression -> . expression LT expression
    (64) expression -> . expression GT expression
    (65) expression -> . expression DOUBLEEQ expression
    (66) expression -> . expression NOTEQUAL expression
    (67) expression -> . expression LTE expression
    (68) expression -> . expression GTE expression
    (69) expression -> . expression STREQUAL expression
    (70) expression -> . expression STRNEQUAL expression
    (71) expression -> . expression AND expression
    (72) expression -> . expression OR expression
    (73) expression -> . expression LSHIFT expression
    (74) expression -> . expression RSHIFT expression
    (75) expression -> . expression URSHIFT expression
    (76) expression -> . EVAL LEFTPAREN evalmarker statements evalendmarker RIGHTPAREN
    (77) expression -> . EVAL LEFTPAREN block RIGHTPAREN
    (78) expression -> . EVAL LEFTPAREN expression RIGHTPAREN
    (81) expression -> . basicTypes
    (82) expression -> . ID
    (83) expression -> . TYPEOF expression
    (87) expression -> . arrayCall
    (92) basicTypes -> . NUMBER
    (93) basicTypes -> . BOOLEAN
    (94) basicTypes -> . STRING
    (95) basicTypes -> . UNDEFINED
    (89) arrayCall -> . ID reference

    LEFTPAREN       shift and go to state 37
    NOT             shift and go to state 41
    BINNOT          shift and go to state 43
    EVAL            shift and go to state 31
    ID              shift and go to state 38
    TYPEOF          shift and go to state 36
    NUMBER          shift and go to state 32
    BOOLEAN         shift and go to state 40
    STRING          shift and go to state 35
    UNDEFINED       shift and go to state 33

    arrayCall                      shift and go to state 34
    expression                     shift and go to state 132
    basicTypes                     shift and go to state 42

state 76

    (31) reassignment -> ID PLUSEQ . expression
    (52) expression -> . expression PLUS expression
    (53) expression -> . expression MINUS expression
    (54) expression -> . expression INTO expression
    (55) expression -> . expression DIVIDE expression
    (56) expression -> . expression MOD expression
    (57) expression -> . LEFTPAREN expression RIGHTPAREN
    (58) expression -> . NOT expression
    (59) expression -> . expression BINAND expression
    (60) expression -> . expression BINOR expression
    (61) expression -> . expression BINXOR expression
    (62) expression -> . BINNOT expression
    (63) expression -> . expression LT expression
    (64) expression -> . expression GT expression
    (65) expression -> . expression DOUBLEEQ expression
    (66) expression -> . expression NOTEQUAL expression
    (67) expression -> . expression LTE expression
    (68) expression -> . expression GTE expression
    (69) expression -> . expression STREQUAL expression
    (70) expression -> . expression STRNEQUAL expression
    (71) expression -> . expression AND expression
    (72) expression -> . expression OR expression
    (73) expression -> . expression LSHIFT expression
    (74) expression -> . expression RSHIFT expression
    (75) expression -> . expression URSHIFT expression
    (76) expression -> . EVAL LEFTPAREN evalmarker statements evalendmarker RIGHTPAREN
    (77) expression -> . EVAL LEFTPAREN block RIGHTPAREN
    (78) expression -> . EVAL LEFTPAREN expression RIGHTPAREN
    (81) expression -> . basicTypes
    (82) expression -> . ID
    (83) expression -> . TYPEOF expression
    (87) expression -> . arrayCall
    (92) basicTypes -> . NUMBER
    (93) basicTypes -> . BOOLEAN
    (94) basicTypes -> . STRING
    (95) basicTypes -> . UNDEFINED
    (89) arrayCall -> . ID reference

    LEFTPAREN       shift and go to state 37
    NOT             shift and go to state 41
    BINNOT          shift and go to state 43
    EVAL            shift and go to state 31
    ID              shift and go to state 38
    TYPEOF          shift and go to state 36
    NUMBER          shift and go to state 32
    BOOLEAN         shift and go to state 40
    STRING          shift and go to state 35
    UNDEFINED       shift and go to state 33

    arrayCall                      shift and go to state 34
    expression                     shift and go to state 133
    basicTypes                     shift and go to state 42

state 77

    (3) block -> LEFTBRACE blockmarker . statements RIGHTBRACE
    (5) statements -> . statement statements
    (6) statements -> . statement
    (7) statement -> . assignment SEMICOLON
    (8) statement -> . declaration SEMICOLON
    (9) statement -> . reassignment SEMICOLON
    (10) statement -> . BREAK SEMICOLON
    (11) statement -> . CONTINUE SEMICOLON
    (12) statement -> . funcstmt SEMICOLON
    (13) statement -> . if
    (14) statement -> . ifelse
    (15) statement -> . whileloop
    (16) statement -> . funcdecl
    (17) statement -> . forloop
    (18) statement -> . reassignmentarray SEMICOLON
    (19) statement -> . RETURN expression SEMICOLON
    (20) statement -> . CONSOLE DOT LOG LEFTPAREN printList RIGHTPAREN SEMICOLON
    (26) assignment -> . VAR assignlist
    (23) declaration -> . VAR declarationList
    (30) reassignment -> . ID EQ expression
    (31) reassignment -> . ID PLUSEQ expression
    (32) reassignment -> . ID MINUSEQ expression
    (33) reassignment -> . ID INTOEQ expression
    (34) reassignment -> . ID DIVEQ expression
    (35) reassignment -> . ID INCR
    (36) reassignment -> . ID DECR
    (37) reassignment -> . ID LSHIFTEQ expression
    (38) reassignment -> . ID RSHIFTEQ expression
    (39) reassignment -> . ID URSHIFTEQ expression
    (40) reassignment -> . ID ANDEQ expression
    (41) reassignment -> . ID OREQ expression
    (42) reassignment -> . ID XOREQ expression
    (43) reassignment -> . ID MODEQ expression
    (44) reassignment -> . LEFTPAREN reassignment RIGHTPAREN
    (84) funcstmt -> . ID EQ functioncall
    (85) funcstmt -> . functioncall
    (86) funcstmt -> . VAR ID EQ functioncall
    (100) if -> . IF expression ifelseblock block ifblockend
    (102) ifelse -> . IF expression ifelseblock block ELSE elseblock block elseblockend
    (106) whileloop -> . WHILE whileblockstart LEFTPAREN expression RIGHTPAREN exprcheck block whileblockend
    (128) funcdecl -> . FUNCTION ID funcscopedefnormal LEFTPAREN funcarghead RIGHTPAREN funblock endfunc
    (131) funcdecl -> . VAR ID EQ FUNCTION funcscopedef LEFTPAREN funcarghead RIGHTPAREN funblock SEMICOLON endfuncdecl
    (110) forloop -> . FOR scope_marker LEFTPAREN initialization SEMICOLON forexpr_marker for_expr forcheck_marker SEMICOLON increment increment_marker RIGHTPAREN forblock endblock_marker
    (88) reassignmentarray -> . arrayCall EQ expression
    (96) functioncall -> . ID LEFTPAREN argList RIGHTPAREN
    (89) arrayCall -> . ID reference

    BREAK           shift and go to state 25
    CONTINUE        shift and go to state 26
    RETURN          shift and go to state 3
    CONSOLE         shift and go to state 17
    VAR             shift and go to state 21
    ID              shift and go to state 22
    LEFTPAREN       shift and go to state 19
    IF              shift and go to state 14
    WHILE           shift and go to state 2
    FUNCTION        shift and go to state 15
    FOR             shift and go to state 7

    statements                     shift and go to state 134
    if                             shift and go to state 4
    whileloop                      shift and go to state 5
    funcstmt                       shift and go to state 8
    arrayCall                      shift and go to state 9
    reassignmentarray              shift and go to state 11
    ifelse                         shift and go to state 12
    statement                      shift and go to state 13
    forloop                        shift and go to state 16
    assignment                     shift and go to state 18
    declaration                    shift and go to state 20
    funcdecl                       shift and go to state 24
    reassignment                   shift and go to state 6
    functioncall                   shift and go to state 27

state 78

    (10) statement -> BREAK SEMICOLON .

    BREAK           reduce using rule 10 (statement -> BREAK SEMICOLON .)
    CONTINUE        reduce using rule 10 (statement -> BREAK SEMICOLON .)
    RETURN          reduce using rule 10 (statement -> BREAK SEMICOLON .)
    CONSOLE         reduce using rule 10 (statement -> BREAK SEMICOLON .)
    VAR             reduce using rule 10 (statement -> BREAK SEMICOLON .)
    ID              reduce using rule 10 (statement -> BREAK SEMICOLON .)
    LEFTPAREN       reduce using rule 10 (statement -> BREAK SEMICOLON .)
    IF              reduce using rule 10 (statement -> BREAK SEMICOLON .)
    WHILE           reduce using rule 10 (statement -> BREAK SEMICOLON .)
    FUNCTION        reduce using rule 10 (statement -> BREAK SEMICOLON .)
    FOR             reduce using rule 10 (statement -> BREAK SEMICOLON .)
    RIGHTBRACE      reduce using rule 10 (statement -> BREAK SEMICOLON .)
    $end            reduce using rule 10 (statement -> BREAK SEMICOLON .)
    RIGHTPAREN      reduce using rule 10 (statement -> BREAK SEMICOLON .)


state 79

    (11) statement -> CONTINUE SEMICOLON .

    BREAK           reduce using rule 11 (statement -> CONTINUE SEMICOLON .)
    CONTINUE        reduce using rule 11 (statement -> CONTINUE SEMICOLON .)
    RETURN          reduce using rule 11 (statement -> CONTINUE SEMICOLON .)
    CONSOLE         reduce using rule 11 (statement -> CONTINUE SEMICOLON .)
    VAR             reduce using rule 11 (statement -> CONTINUE SEMICOLON .)
    ID              reduce using rule 11 (statement -> CONTINUE SEMICOLON .)
    LEFTPAREN       reduce using rule 11 (statement -> CONTINUE SEMICOLON .)
    IF              reduce using rule 11 (statement -> CONTINUE SEMICOLON .)
    WHILE           reduce using rule 11 (statement -> CONTINUE SEMICOLON .)
    FUNCTION        reduce using rule 11 (statement -> CONTINUE SEMICOLON .)
    FOR             reduce using rule 11 (statement -> CONTINUE SEMICOLON .)
    RIGHTBRACE      reduce using rule 11 (statement -> CONTINUE SEMICOLON .)
    $end            reduce using rule 11 (statement -> CONTINUE SEMICOLON .)
    RIGHTPAREN      reduce using rule 11 (statement -> CONTINUE SEMICOLON .)


state 80

    (106) whileloop -> WHILE whileblockstart LEFTPAREN . expression RIGHTPAREN exprcheck block whileblockend
    (52) expression -> . expression PLUS expression
    (53) expression -> . expression MINUS expression
    (54) expression -> . expression INTO expression
    (55) expression -> . expression DIVIDE expression
    (56) expression -> . expression MOD expression
    (57) expression -> . LEFTPAREN expression RIGHTPAREN
    (58) expression -> . NOT expression
    (59) expression -> . expression BINAND expression
    (60) expression -> . expression BINOR expression
    (61) expression -> . expression BINXOR expression
    (62) expression -> . BINNOT expression
    (63) expression -> . expression LT expression
    (64) expression -> . expression GT expression
    (65) expression -> . expression DOUBLEEQ expression
    (66) expression -> . expression NOTEQUAL expression
    (67) expression -> . expression LTE expression
    (68) expression -> . expression GTE expression
    (69) expression -> . expression STREQUAL expression
    (70) expression -> . expression STRNEQUAL expression
    (71) expression -> . expression AND expression
    (72) expression -> . expression OR expression
    (73) expression -> . expression LSHIFT expression
    (74) expression -> . expression RSHIFT expression
    (75) expression -> . expression URSHIFT expression
    (76) expression -> . EVAL LEFTPAREN evalmarker statements evalendmarker RIGHTPAREN
    (77) expression -> . EVAL LEFTPAREN block RIGHTPAREN
    (78) expression -> . EVAL LEFTPAREN expression RIGHTPAREN
    (81) expression -> . basicTypes
    (82) expression -> . ID
    (83) expression -> . TYPEOF expression
    (87) expression -> . arrayCall
    (92) basicTypes -> . NUMBER
    (93) basicTypes -> . BOOLEAN
    (94) basicTypes -> . STRING
    (95) basicTypes -> . UNDEFINED
    (89) arrayCall -> . ID reference

    LEFTPAREN       shift and go to state 37
    NOT             shift and go to state 41
    BINNOT          shift and go to state 43
    EVAL            shift and go to state 31
    ID              shift and go to state 38
    TYPEOF          shift and go to state 36
    NUMBER          shift and go to state 32
    BOOLEAN         shift and go to state 40
    STRING          shift and go to state 35
    UNDEFINED       shift and go to state 33

    arrayCall                      shift and go to state 34
    expression                     shift and go to state 135
    basicTypes                     shift and go to state 42

state 81

    (76) expression -> EVAL LEFTPAREN . evalmarker statements evalendmarker RIGHTPAREN
    (77) expression -> EVAL LEFTPAREN . block RIGHTPAREN
    (78) expression -> EVAL LEFTPAREN . expression RIGHTPAREN
    (79) evalmarker -> .
    (3) block -> . LEFTBRACE blockmarker statements RIGHTBRACE
    (52) expression -> . expression PLUS expression
    (53) expression -> . expression MINUS expression
    (54) expression -> . expression INTO expression
    (55) expression -> . expression DIVIDE expression
    (56) expression -> . expression MOD expression
    (57) expression -> . LEFTPAREN expression RIGHTPAREN
    (58) expression -> . NOT expression
    (59) expression -> . expression BINAND expression
    (60) expression -> . expression BINOR expression
    (61) expression -> . expression BINXOR expression
    (62) expression -> . BINNOT expression
    (63) expression -> . expression LT expression
    (64) expression -> . expression GT expression
    (65) expression -> . expression DOUBLEEQ expression
    (66) expression -> . expression NOTEQUAL expression
    (67) expression -> . expression LTE expression
    (68) expression -> . expression GTE expression
    (69) expression -> . expression STREQUAL expression
    (70) expression -> . expression STRNEQUAL expression
    (71) expression -> . expression AND expression
    (72) expression -> . expression OR expression
    (73) expression -> . expression LSHIFT expression
    (74) expression -> . expression RSHIFT expression
    (75) expression -> . expression URSHIFT expression
    (76) expression -> . EVAL LEFTPAREN evalmarker statements evalendmarker RIGHTPAREN
    (77) expression -> . EVAL LEFTPAREN block RIGHTPAREN
    (78) expression -> . EVAL LEFTPAREN expression RIGHTPAREN
    (81) expression -> . basicTypes
    (82) expression -> . ID
    (83) expression -> . TYPEOF expression
    (87) expression -> . arrayCall
    (92) basicTypes -> . NUMBER
    (93) basicTypes -> . BOOLEAN
    (94) basicTypes -> . STRING
    (95) basicTypes -> . UNDEFINED
    (89) arrayCall -> . ID reference

  ! shift/reduce conflict for LEFTPAREN resolved as shift
  ! shift/reduce conflict for ID resolved as shift
    BREAK           reduce using rule 79 (evalmarker -> .)
    CONTINUE        reduce using rule 79 (evalmarker -> .)
    RETURN          reduce using rule 79 (evalmarker -> .)
    CONSOLE         reduce using rule 79 (evalmarker -> .)
    VAR             reduce using rule 79 (evalmarker -> .)
    IF              reduce using rule 79 (evalmarker -> .)
    WHILE           reduce using rule 79 (evalmarker -> .)
    FUNCTION        reduce using rule 79 (evalmarker -> .)
    FOR             reduce using rule 79 (evalmarker -> .)
    LEFTBRACE       shift and go to state 23
    LEFTPAREN       shift and go to state 37
    NOT             shift and go to state 41
    BINNOT          shift and go to state 43
    EVAL            shift and go to state 31
    ID              shift and go to state 38
    TYPEOF          shift and go to state 36
    NUMBER          shift and go to state 32
    BOOLEAN         shift and go to state 40
    STRING          shift and go to state 35
    UNDEFINED       shift and go to state 33

  ! ID              [ reduce using rule 79 (evalmarker -> .) ]
  ! LEFTPAREN       [ reduce using rule 79 (evalmarker -> .) ]

    arrayCall                      shift and go to state 34
    evalmarker                     shift and go to state 137
    expression                     shift and go to state 136
    block                          shift and go to state 138
    basicTypes                     shift and go to state 42

state 82

    (83) expression -> TYPEOF expression .
    (52) expression -> expression . PLUS expression
    (53) expression -> expression . MINUS expression
    (54) expression -> expression . INTO expression
    (55) expression -> expression . DIVIDE expression
    (56) expression -> expression . MOD expression
    (59) expression -> expression . BINAND expression
    (60) expression -> expression . BINOR expression
    (61) expression -> expression . BINXOR expression
    (63) expression -> expression . LT expression
    (64) expression -> expression . GT expression
    (65) expression -> expression . DOUBLEEQ expression
    (66) expression -> expression . NOTEQUAL expression
    (67) expression -> expression . LTE expression
    (68) expression -> expression . GTE expression
    (69) expression -> expression . STREQUAL expression
    (70) expression -> expression . STRNEQUAL expression
    (71) expression -> expression . AND expression
    (72) expression -> expression . OR expression
    (73) expression -> expression . LSHIFT expression
    (74) expression -> expression . RSHIFT expression
    (75) expression -> expression . URSHIFT expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for INTO resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for BINAND resolved as shift
  ! shift/reduce conflict for BINOR resolved as shift
  ! shift/reduce conflict for BINXOR resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for DOUBLEEQ resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for LTE resolved as shift
  ! shift/reduce conflict for GTE resolved as shift
  ! shift/reduce conflict for STREQUAL resolved as shift
  ! shift/reduce conflict for STRNEQUAL resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for LSHIFT resolved as shift
  ! shift/reduce conflict for RSHIFT resolved as shift
  ! shift/reduce conflict for URSHIFT resolved as shift
    SEMICOLON       reduce using rule 83 (expression -> TYPEOF expression .)
    RIGHTPAREN      reduce using rule 83 (expression -> TYPEOF expression .)
    COMMA           reduce using rule 83 (expression -> TYPEOF expression .)
    LEFTBRACE       reduce using rule 83 (expression -> TYPEOF expression .)
    RIGHTBRACKET    reduce using rule 83 (expression -> TYPEOF expression .)
    PLUS            shift and go to state 95
    MINUS           shift and go to state 89
    INTO            shift and go to state 99
    DIVIDE          shift and go to state 98
    MOD             shift and go to state 105
    BINAND          shift and go to state 91
    BINOR           shift and go to state 102
    BINXOR          shift and go to state 96
    LT              shift and go to state 94
    GT              shift and go to state 97
    DOUBLEEQ        shift and go to state 84
    NOTEQUAL        shift and go to state 85
    LTE             shift and go to state 100
    GTE             shift and go to state 90
    STREQUAL        shift and go to state 93
    STRNEQUAL       shift and go to state 86
    AND             shift and go to state 101
    OR              shift and go to state 104
    LSHIFT          shift and go to state 87
    RSHIFT          shift and go to state 88
    URSHIFT         shift and go to state 103

  ! PLUS            [ reduce using rule 83 (expression -> TYPEOF expression .) ]
  ! MINUS           [ reduce using rule 83 (expression -> TYPEOF expression .) ]
  ! INTO            [ reduce using rule 83 (expression -> TYPEOF expression .) ]
  ! DIVIDE          [ reduce using rule 83 (expression -> TYPEOF expression .) ]
  ! MOD             [ reduce using rule 83 (expression -> TYPEOF expression .) ]
  ! BINAND          [ reduce using rule 83 (expression -> TYPEOF expression .) ]
  ! BINOR           [ reduce using rule 83 (expression -> TYPEOF expression .) ]
  ! BINXOR          [ reduce using rule 83 (expression -> TYPEOF expression .) ]
  ! LT              [ reduce using rule 83 (expression -> TYPEOF expression .) ]
  ! GT              [ reduce using rule 83 (expression -> TYPEOF expression .) ]
  ! DOUBLEEQ        [ reduce using rule 83 (expression -> TYPEOF expression .) ]
  ! NOTEQUAL        [ reduce using rule 83 (expression -> TYPEOF expression .) ]
  ! LTE             [ reduce using rule 83 (expression -> TYPEOF expression .) ]
  ! GTE             [ reduce using rule 83 (expression -> TYPEOF expression .) ]
  ! STREQUAL        [ reduce using rule 83 (expression -> TYPEOF expression .) ]
  ! STRNEQUAL       [ reduce using rule 83 (expression -> TYPEOF expression .) ]
  ! AND             [ reduce using rule 83 (expression -> TYPEOF expression .) ]
  ! OR              [ reduce using rule 83 (expression -> TYPEOF expression .) ]
  ! LSHIFT          [ reduce using rule 83 (expression -> TYPEOF expression .) ]
  ! RSHIFT          [ reduce using rule 83 (expression -> TYPEOF expression .) ]
  ! URSHIFT         [ reduce using rule 83 (expression -> TYPEOF expression .) ]


state 83

    (57) expression -> LEFTPAREN expression . RIGHTPAREN
    (52) expression -> expression . PLUS expression
    (53) expression -> expression . MINUS expression
    (54) expression -> expression . INTO expression
    (55) expression -> expression . DIVIDE expression
    (56) expression -> expression . MOD expression
    (59) expression -> expression . BINAND expression
    (60) expression -> expression . BINOR expression
    (61) expression -> expression . BINXOR expression
    (63) expression -> expression . LT expression
    (64) expression -> expression . GT expression
    (65) expression -> expression . DOUBLEEQ expression
    (66) expression -> expression . NOTEQUAL expression
    (67) expression -> expression . LTE expression
    (68) expression -> expression . GTE expression
    (69) expression -> expression . STREQUAL expression
    (70) expression -> expression . STRNEQUAL expression
    (71) expression -> expression . AND expression
    (72) expression -> expression . OR expression
    (73) expression -> expression . LSHIFT expression
    (74) expression -> expression . RSHIFT expression
    (75) expression -> expression . URSHIFT expression

    RIGHTPAREN      shift and go to state 139
    PLUS            shift and go to state 95
    MINUS           shift and go to state 89
    INTO            shift and go to state 99
    DIVIDE          shift and go to state 98
    MOD             shift and go to state 105
    BINAND          shift and go to state 91
    BINOR           shift and go to state 102
    BINXOR          shift and go to state 96
    LT              shift and go to state 94
    GT              shift and go to state 97
    DOUBLEEQ        shift and go to state 84
    NOTEQUAL        shift and go to state 85
    LTE             shift and go to state 100
    GTE             shift and go to state 90
    STREQUAL        shift and go to state 93
    STRNEQUAL       shift and go to state 86
    AND             shift and go to state 101
    OR              shift and go to state 104
    LSHIFT          shift and go to state 87
    RSHIFT          shift and go to state 88
    URSHIFT         shift and go to state 103


state 84

    (65) expression -> expression DOUBLEEQ . expression
    (52) expression -> . expression PLUS expression
    (53) expression -> . expression MINUS expression
    (54) expression -> . expression INTO expression
    (55) expression -> . expression DIVIDE expression
    (56) expression -> . expression MOD expression
    (57) expression -> . LEFTPAREN expression RIGHTPAREN
    (58) expression -> . NOT expression
    (59) expression -> . expression BINAND expression
    (60) expression -> . expression BINOR expression
    (61) expression -> . expression BINXOR expression
    (62) expression -> . BINNOT expression
    (63) expression -> . expression LT expression
    (64) expression -> . expression GT expression
    (65) expression -> . expression DOUBLEEQ expression
    (66) expression -> . expression NOTEQUAL expression
    (67) expression -> . expression LTE expression
    (68) expression -> . expression GTE expression
    (69) expression -> . expression STREQUAL expression
    (70) expression -> . expression STRNEQUAL expression
    (71) expression -> . expression AND expression
    (72) expression -> . expression OR expression
    (73) expression -> . expression LSHIFT expression
    (74) expression -> . expression RSHIFT expression
    (75) expression -> . expression URSHIFT expression
    (76) expression -> . EVAL LEFTPAREN evalmarker statements evalendmarker RIGHTPAREN
    (77) expression -> . EVAL LEFTPAREN block RIGHTPAREN
    (78) expression -> . EVAL LEFTPAREN expression RIGHTPAREN
    (81) expression -> . basicTypes
    (82) expression -> . ID
    (83) expression -> . TYPEOF expression
    (87) expression -> . arrayCall
    (92) basicTypes -> . NUMBER
    (93) basicTypes -> . BOOLEAN
    (94) basicTypes -> . STRING
    (95) basicTypes -> . UNDEFINED
    (89) arrayCall -> . ID reference

    LEFTPAREN       shift and go to state 37
    NOT             shift and go to state 41
    BINNOT          shift and go to state 43
    EVAL            shift and go to state 31
    ID              shift and go to state 38
    TYPEOF          shift and go to state 36
    NUMBER          shift and go to state 32
    BOOLEAN         shift and go to state 40
    STRING          shift and go to state 35
    UNDEFINED       shift and go to state 33

    arrayCall                      shift and go to state 34
    expression                     shift and go to state 140
    basicTypes                     shift and go to state 42

state 85

    (66) expression -> expression NOTEQUAL . expression
    (52) expression -> . expression PLUS expression
    (53) expression -> . expression MINUS expression
    (54) expression -> . expression INTO expression
    (55) expression -> . expression DIVIDE expression
    (56) expression -> . expression MOD expression
    (57) expression -> . LEFTPAREN expression RIGHTPAREN
    (58) expression -> . NOT expression
    (59) expression -> . expression BINAND expression
    (60) expression -> . expression BINOR expression
    (61) expression -> . expression BINXOR expression
    (62) expression -> . BINNOT expression
    (63) expression -> . expression LT expression
    (64) expression -> . expression GT expression
    (65) expression -> . expression DOUBLEEQ expression
    (66) expression -> . expression NOTEQUAL expression
    (67) expression -> . expression LTE expression
    (68) expression -> . expression GTE expression
    (69) expression -> . expression STREQUAL expression
    (70) expression -> . expression STRNEQUAL expression
    (71) expression -> . expression AND expression
    (72) expression -> . expression OR expression
    (73) expression -> . expression LSHIFT expression
    (74) expression -> . expression RSHIFT expression
    (75) expression -> . expression URSHIFT expression
    (76) expression -> . EVAL LEFTPAREN evalmarker statements evalendmarker RIGHTPAREN
    (77) expression -> . EVAL LEFTPAREN block RIGHTPAREN
    (78) expression -> . EVAL LEFTPAREN expression RIGHTPAREN
    (81) expression -> . basicTypes
    (82) expression -> . ID
    (83) expression -> . TYPEOF expression
    (87) expression -> . arrayCall
    (92) basicTypes -> . NUMBER
    (93) basicTypes -> . BOOLEAN
    (94) basicTypes -> . STRING
    (95) basicTypes -> . UNDEFINED
    (89) arrayCall -> . ID reference

    LEFTPAREN       shift and go to state 37
    NOT             shift and go to state 41
    BINNOT          shift and go to state 43
    EVAL            shift and go to state 31
    ID              shift and go to state 38
    TYPEOF          shift and go to state 36
    NUMBER          shift and go to state 32
    BOOLEAN         shift and go to state 40
    STRING          shift and go to state 35
    UNDEFINED       shift and go to state 33

    arrayCall                      shift and go to state 34
    expression                     shift and go to state 141
    basicTypes                     shift and go to state 42

state 86

    (70) expression -> expression STRNEQUAL . expression
    (52) expression -> . expression PLUS expression
    (53) expression -> . expression MINUS expression
    (54) expression -> . expression INTO expression
    (55) expression -> . expression DIVIDE expression
    (56) expression -> . expression MOD expression
    (57) expression -> . LEFTPAREN expression RIGHTPAREN
    (58) expression -> . NOT expression
    (59) expression -> . expression BINAND expression
    (60) expression -> . expression BINOR expression
    (61) expression -> . expression BINXOR expression
    (62) expression -> . BINNOT expression
    (63) expression -> . expression LT expression
    (64) expression -> . expression GT expression
    (65) expression -> . expression DOUBLEEQ expression
    (66) expression -> . expression NOTEQUAL expression
    (67) expression -> . expression LTE expression
    (68) expression -> . expression GTE expression
    (69) expression -> . expression STREQUAL expression
    (70) expression -> . expression STRNEQUAL expression
    (71) expression -> . expression AND expression
    (72) expression -> . expression OR expression
    (73) expression -> . expression LSHIFT expression
    (74) expression -> . expression RSHIFT expression
    (75) expression -> . expression URSHIFT expression
    (76) expression -> . EVAL LEFTPAREN evalmarker statements evalendmarker RIGHTPAREN
    (77) expression -> . EVAL LEFTPAREN block RIGHTPAREN
    (78) expression -> . EVAL LEFTPAREN expression RIGHTPAREN
    (81) expression -> . basicTypes
    (82) expression -> . ID
    (83) expression -> . TYPEOF expression
    (87) expression -> . arrayCall
    (92) basicTypes -> . NUMBER
    (93) basicTypes -> . BOOLEAN
    (94) basicTypes -> . STRING
    (95) basicTypes -> . UNDEFINED
    (89) arrayCall -> . ID reference

    LEFTPAREN       shift and go to state 37
    NOT             shift and go to state 41
    BINNOT          shift and go to state 43
    EVAL            shift and go to state 31
    ID              shift and go to state 38
    TYPEOF          shift and go to state 36
    NUMBER          shift and go to state 32
    BOOLEAN         shift and go to state 40
    STRING          shift and go to state 35
    UNDEFINED       shift and go to state 33

    arrayCall                      shift and go to state 34
    expression                     shift and go to state 142
    basicTypes                     shift and go to state 42

state 87

    (73) expression -> expression LSHIFT . expression
    (52) expression -> . expression PLUS expression
    (53) expression -> . expression MINUS expression
    (54) expression -> . expression INTO expression
    (55) expression -> . expression DIVIDE expression
    (56) expression -> . expression MOD expression
    (57) expression -> . LEFTPAREN expression RIGHTPAREN
    (58) expression -> . NOT expression
    (59) expression -> . expression BINAND expression
    (60) expression -> . expression BINOR expression
    (61) expression -> . expression BINXOR expression
    (62) expression -> . BINNOT expression
    (63) expression -> . expression LT expression
    (64) expression -> . expression GT expression
    (65) expression -> . expression DOUBLEEQ expression
    (66) expression -> . expression NOTEQUAL expression
    (67) expression -> . expression LTE expression
    (68) expression -> . expression GTE expression
    (69) expression -> . expression STREQUAL expression
    (70) expression -> . expression STRNEQUAL expression
    (71) expression -> . expression AND expression
    (72) expression -> . expression OR expression
    (73) expression -> . expression LSHIFT expression
    (74) expression -> . expression RSHIFT expression
    (75) expression -> . expression URSHIFT expression
    (76) expression -> . EVAL LEFTPAREN evalmarker statements evalendmarker RIGHTPAREN
    (77) expression -> . EVAL LEFTPAREN block RIGHTPAREN
    (78) expression -> . EVAL LEFTPAREN expression RIGHTPAREN
    (81) expression -> . basicTypes
    (82) expression -> . ID
    (83) expression -> . TYPEOF expression
    (87) expression -> . arrayCall
    (92) basicTypes -> . NUMBER
    (93) basicTypes -> . BOOLEAN
    (94) basicTypes -> . STRING
    (95) basicTypes -> . UNDEFINED
    (89) arrayCall -> . ID reference

    LEFTPAREN       shift and go to state 37
    NOT             shift and go to state 41
    BINNOT          shift and go to state 43
    EVAL            shift and go to state 31
    ID              shift and go to state 38
    TYPEOF          shift and go to state 36
    NUMBER          shift and go to state 32
    BOOLEAN         shift and go to state 40
    STRING          shift and go to state 35
    UNDEFINED       shift and go to state 33

    arrayCall                      shift and go to state 34
    expression                     shift and go to state 143
    basicTypes                     shift and go to state 42

state 88

    (74) expression -> expression RSHIFT . expression
    (52) expression -> . expression PLUS expression
    (53) expression -> . expression MINUS expression
    (54) expression -> . expression INTO expression
    (55) expression -> . expression DIVIDE expression
    (56) expression -> . expression MOD expression
    (57) expression -> . LEFTPAREN expression RIGHTPAREN
    (58) expression -> . NOT expression
    (59) expression -> . expression BINAND expression
    (60) expression -> . expression BINOR expression
    (61) expression -> . expression BINXOR expression
    (62) expression -> . BINNOT expression
    (63) expression -> . expression LT expression
    (64) expression -> . expression GT expression
    (65) expression -> . expression DOUBLEEQ expression
    (66) expression -> . expression NOTEQUAL expression
    (67) expression -> . expression LTE expression
    (68) expression -> . expression GTE expression
    (69) expression -> . expression STREQUAL expression
    (70) expression -> . expression STRNEQUAL expression
    (71) expression -> . expression AND expression
    (72) expression -> . expression OR expression
    (73) expression -> . expression LSHIFT expression
    (74) expression -> . expression RSHIFT expression
    (75) expression -> . expression URSHIFT expression
    (76) expression -> . EVAL LEFTPAREN evalmarker statements evalendmarker RIGHTPAREN
    (77) expression -> . EVAL LEFTPAREN block RIGHTPAREN
    (78) expression -> . EVAL LEFTPAREN expression RIGHTPAREN
    (81) expression -> . basicTypes
    (82) expression -> . ID
    (83) expression -> . TYPEOF expression
    (87) expression -> . arrayCall
    (92) basicTypes -> . NUMBER
    (93) basicTypes -> . BOOLEAN
    (94) basicTypes -> . STRING
    (95) basicTypes -> . UNDEFINED
    (89) arrayCall -> . ID reference

    LEFTPAREN       shift and go to state 37
    NOT             shift and go to state 41
    BINNOT          shift and go to state 43
    EVAL            shift and go to state 31
    ID              shift and go to state 38
    TYPEOF          shift and go to state 36
    NUMBER          shift and go to state 32
    BOOLEAN         shift and go to state 40
    STRING          shift and go to state 35
    UNDEFINED       shift and go to state 33

    arrayCall                      shift and go to state 34
    expression                     shift and go to state 144
    basicTypes                     shift and go to state 42

state 89

    (53) expression -> expression MINUS . expression
    (52) expression -> . expression PLUS expression
    (53) expression -> . expression MINUS expression
    (54) expression -> . expression INTO expression
    (55) expression -> . expression DIVIDE expression
    (56) expression -> . expression MOD expression
    (57) expression -> . LEFTPAREN expression RIGHTPAREN
    (58) expression -> . NOT expression
    (59) expression -> . expression BINAND expression
    (60) expression -> . expression BINOR expression
    (61) expression -> . expression BINXOR expression
    (62) expression -> . BINNOT expression
    (63) expression -> . expression LT expression
    (64) expression -> . expression GT expression
    (65) expression -> . expression DOUBLEEQ expression
    (66) expression -> . expression NOTEQUAL expression
    (67) expression -> . expression LTE expression
    (68) expression -> . expression GTE expression
    (69) expression -> . expression STREQUAL expression
    (70) expression -> . expression STRNEQUAL expression
    (71) expression -> . expression AND expression
    (72) expression -> . expression OR expression
    (73) expression -> . expression LSHIFT expression
    (74) expression -> . expression RSHIFT expression
    (75) expression -> . expression URSHIFT expression
    (76) expression -> . EVAL LEFTPAREN evalmarker statements evalendmarker RIGHTPAREN
    (77) expression -> . EVAL LEFTPAREN block RIGHTPAREN
    (78) expression -> . EVAL LEFTPAREN expression RIGHTPAREN
    (81) expression -> . basicTypes
    (82) expression -> . ID
    (83) expression -> . TYPEOF expression
    (87) expression -> . arrayCall
    (92) basicTypes -> . NUMBER
    (93) basicTypes -> . BOOLEAN
    (94) basicTypes -> . STRING
    (95) basicTypes -> . UNDEFINED
    (89) arrayCall -> . ID reference

    LEFTPAREN       shift and go to state 37
    NOT             shift and go to state 41
    BINNOT          shift and go to state 43
    EVAL            shift and go to state 31
    ID              shift and go to state 38
    TYPEOF          shift and go to state 36
    NUMBER          shift and go to state 32
    BOOLEAN         shift and go to state 40
    STRING          shift and go to state 35
    UNDEFINED       shift and go to state 33

    arrayCall                      shift and go to state 34
    expression                     shift and go to state 145
    basicTypes                     shift and go to state 42

state 90

    (68) expression -> expression GTE . expression
    (52) expression -> . expression PLUS expression
    (53) expression -> . expression MINUS expression
    (54) expression -> . expression INTO expression
    (55) expression -> . expression DIVIDE expression
    (56) expression -> . expression MOD expression
    (57) expression -> . LEFTPAREN expression RIGHTPAREN
    (58) expression -> . NOT expression
    (59) expression -> . expression BINAND expression
    (60) expression -> . expression BINOR expression
    (61) expression -> . expression BINXOR expression
    (62) expression -> . BINNOT expression
    (63) expression -> . expression LT expression
    (64) expression -> . expression GT expression
    (65) expression -> . expression DOUBLEEQ expression
    (66) expression -> . expression NOTEQUAL expression
    (67) expression -> . expression LTE expression
    (68) expression -> . expression GTE expression
    (69) expression -> . expression STREQUAL expression
    (70) expression -> . expression STRNEQUAL expression
    (71) expression -> . expression AND expression
    (72) expression -> . expression OR expression
    (73) expression -> . expression LSHIFT expression
    (74) expression -> . expression RSHIFT expression
    (75) expression -> . expression URSHIFT expression
    (76) expression -> . EVAL LEFTPAREN evalmarker statements evalendmarker RIGHTPAREN
    (77) expression -> . EVAL LEFTPAREN block RIGHTPAREN
    (78) expression -> . EVAL LEFTPAREN expression RIGHTPAREN
    (81) expression -> . basicTypes
    (82) expression -> . ID
    (83) expression -> . TYPEOF expression
    (87) expression -> . arrayCall
    (92) basicTypes -> . NUMBER
    (93) basicTypes -> . BOOLEAN
    (94) basicTypes -> . STRING
    (95) basicTypes -> . UNDEFINED
    (89) arrayCall -> . ID reference

    LEFTPAREN       shift and go to state 37
    NOT             shift and go to state 41
    BINNOT          shift and go to state 43
    EVAL            shift and go to state 31
    ID              shift and go to state 38
    TYPEOF          shift and go to state 36
    NUMBER          shift and go to state 32
    BOOLEAN         shift and go to state 40
    STRING          shift and go to state 35
    UNDEFINED       shift and go to state 33

    arrayCall                      shift and go to state 34
    expression                     shift and go to state 146
    basicTypes                     shift and go to state 42

state 91

    (59) expression -> expression BINAND . expression
    (52) expression -> . expression PLUS expression
    (53) expression -> . expression MINUS expression
    (54) expression -> . expression INTO expression
    (55) expression -> . expression DIVIDE expression
    (56) expression -> . expression MOD expression
    (57) expression -> . LEFTPAREN expression RIGHTPAREN
    (58) expression -> . NOT expression
    (59) expression -> . expression BINAND expression
    (60) expression -> . expression BINOR expression
    (61) expression -> . expression BINXOR expression
    (62) expression -> . BINNOT expression
    (63) expression -> . expression LT expression
    (64) expression -> . expression GT expression
    (65) expression -> . expression DOUBLEEQ expression
    (66) expression -> . expression NOTEQUAL expression
    (67) expression -> . expression LTE expression
    (68) expression -> . expression GTE expression
    (69) expression -> . expression STREQUAL expression
    (70) expression -> . expression STRNEQUAL expression
    (71) expression -> . expression AND expression
    (72) expression -> . expression OR expression
    (73) expression -> . expression LSHIFT expression
    (74) expression -> . expression RSHIFT expression
    (75) expression -> . expression URSHIFT expression
    (76) expression -> . EVAL LEFTPAREN evalmarker statements evalendmarker RIGHTPAREN
    (77) expression -> . EVAL LEFTPAREN block RIGHTPAREN
    (78) expression -> . EVAL LEFTPAREN expression RIGHTPAREN
    (81) expression -> . basicTypes
    (82) expression -> . ID
    (83) expression -> . TYPEOF expression
    (87) expression -> . arrayCall
    (92) basicTypes -> . NUMBER
    (93) basicTypes -> . BOOLEAN
    (94) basicTypes -> . STRING
    (95) basicTypes -> . UNDEFINED
    (89) arrayCall -> . ID reference

    LEFTPAREN       shift and go to state 37
    NOT             shift and go to state 41
    BINNOT          shift and go to state 43
    EVAL            shift and go to state 31
    ID              shift and go to state 38
    TYPEOF          shift and go to state 36
    NUMBER          shift and go to state 32
    BOOLEAN         shift and go to state 40
    STRING          shift and go to state 35
    UNDEFINED       shift and go to state 33

    arrayCall                      shift and go to state 34
    expression                     shift and go to state 147
    basicTypes                     shift and go to state 42

state 92

    (19) statement -> RETURN expression SEMICOLON .

    BREAK           reduce using rule 19 (statement -> RETURN expression SEMICOLON .)
    CONTINUE        reduce using rule 19 (statement -> RETURN expression SEMICOLON .)
    RETURN          reduce using rule 19 (statement -> RETURN expression SEMICOLON .)
    CONSOLE         reduce using rule 19 (statement -> RETURN expression SEMICOLON .)
    VAR             reduce using rule 19 (statement -> RETURN expression SEMICOLON .)
    ID              reduce using rule 19 (statement -> RETURN expression SEMICOLON .)
    LEFTPAREN       reduce using rule 19 (statement -> RETURN expression SEMICOLON .)
    IF              reduce using rule 19 (statement -> RETURN expression SEMICOLON .)
    WHILE           reduce using rule 19 (statement -> RETURN expression SEMICOLON .)
    FUNCTION        reduce using rule 19 (statement -> RETURN expression SEMICOLON .)
    FOR             reduce using rule 19 (statement -> RETURN expression SEMICOLON .)
    RIGHTBRACE      reduce using rule 19 (statement -> RETURN expression SEMICOLON .)
    $end            reduce using rule 19 (statement -> RETURN expression SEMICOLON .)
    RIGHTPAREN      reduce using rule 19 (statement -> RETURN expression SEMICOLON .)


state 93

    (69) expression -> expression STREQUAL . expression
    (52) expression -> . expression PLUS expression
    (53) expression -> . expression MINUS expression
    (54) expression -> . expression INTO expression
    (55) expression -> . expression DIVIDE expression
    (56) expression -> . expression MOD expression
    (57) expression -> . LEFTPAREN expression RIGHTPAREN
    (58) expression -> . NOT expression
    (59) expression -> . expression BINAND expression
    (60) expression -> . expression BINOR expression
    (61) expression -> . expression BINXOR expression
    (62) expression -> . BINNOT expression
    (63) expression -> . expression LT expression
    (64) expression -> . expression GT expression
    (65) expression -> . expression DOUBLEEQ expression
    (66) expression -> . expression NOTEQUAL expression
    (67) expression -> . expression LTE expression
    (68) expression -> . expression GTE expression
    (69) expression -> . expression STREQUAL expression
    (70) expression -> . expression STRNEQUAL expression
    (71) expression -> . expression AND expression
    (72) expression -> . expression OR expression
    (73) expression -> . expression LSHIFT expression
    (74) expression -> . expression RSHIFT expression
    (75) expression -> . expression URSHIFT expression
    (76) expression -> . EVAL LEFTPAREN evalmarker statements evalendmarker RIGHTPAREN
    (77) expression -> . EVAL LEFTPAREN block RIGHTPAREN
    (78) expression -> . EVAL LEFTPAREN expression RIGHTPAREN
    (81) expression -> . basicTypes
    (82) expression -> . ID
    (83) expression -> . TYPEOF expression
    (87) expression -> . arrayCall
    (92) basicTypes -> . NUMBER
    (93) basicTypes -> . BOOLEAN
    (94) basicTypes -> . STRING
    (95) basicTypes -> . UNDEFINED
    (89) arrayCall -> . ID reference

    LEFTPAREN       shift and go to state 37
    NOT             shift and go to state 41
    BINNOT          shift and go to state 43
    EVAL            shift and go to state 31
    ID              shift and go to state 38
    TYPEOF          shift and go to state 36
    NUMBER          shift and go to state 32
    BOOLEAN         shift and go to state 40
    STRING          shift and go to state 35
    UNDEFINED       shift and go to state 33

    arrayCall                      shift and go to state 34
    expression                     shift and go to state 148
    basicTypes                     shift and go to state 42

state 94

    (63) expression -> expression LT . expression
    (52) expression -> . expression PLUS expression
    (53) expression -> . expression MINUS expression
    (54) expression -> . expression INTO expression
    (55) expression -> . expression DIVIDE expression
    (56) expression -> . expression MOD expression
    (57) expression -> . LEFTPAREN expression RIGHTPAREN
    (58) expression -> . NOT expression
    (59) expression -> . expression BINAND expression
    (60) expression -> . expression BINOR expression
    (61) expression -> . expression BINXOR expression
    (62) expression -> . BINNOT expression
    (63) expression -> . expression LT expression
    (64) expression -> . expression GT expression
    (65) expression -> . expression DOUBLEEQ expression
    (66) expression -> . expression NOTEQUAL expression
    (67) expression -> . expression LTE expression
    (68) expression -> . expression GTE expression
    (69) expression -> . expression STREQUAL expression
    (70) expression -> . expression STRNEQUAL expression
    (71) expression -> . expression AND expression
    (72) expression -> . expression OR expression
    (73) expression -> . expression LSHIFT expression
    (74) expression -> . expression RSHIFT expression
    (75) expression -> . expression URSHIFT expression
    (76) expression -> . EVAL LEFTPAREN evalmarker statements evalendmarker RIGHTPAREN
    (77) expression -> . EVAL LEFTPAREN block RIGHTPAREN
    (78) expression -> . EVAL LEFTPAREN expression RIGHTPAREN
    (81) expression -> . basicTypes
    (82) expression -> . ID
    (83) expression -> . TYPEOF expression
    (87) expression -> . arrayCall
    (92) basicTypes -> . NUMBER
    (93) basicTypes -> . BOOLEAN
    (94) basicTypes -> . STRING
    (95) basicTypes -> . UNDEFINED
    (89) arrayCall -> . ID reference

    LEFTPAREN       shift and go to state 37
    NOT             shift and go to state 41
    BINNOT          shift and go to state 43
    EVAL            shift and go to state 31
    ID              shift and go to state 38
    TYPEOF          shift and go to state 36
    NUMBER          shift and go to state 32
    BOOLEAN         shift and go to state 40
    STRING          shift and go to state 35
    UNDEFINED       shift and go to state 33

    arrayCall                      shift and go to state 34
    expression                     shift and go to state 149
    basicTypes                     shift and go to state 42

state 95

    (52) expression -> expression PLUS . expression
    (52) expression -> . expression PLUS expression
    (53) expression -> . expression MINUS expression
    (54) expression -> . expression INTO expression
    (55) expression -> . expression DIVIDE expression
    (56) expression -> . expression MOD expression
    (57) expression -> . LEFTPAREN expression RIGHTPAREN
    (58) expression -> . NOT expression
    (59) expression -> . expression BINAND expression
    (60) expression -> . expression BINOR expression
    (61) expression -> . expression BINXOR expression
    (62) expression -> . BINNOT expression
    (63) expression -> . expression LT expression
    (64) expression -> . expression GT expression
    (65) expression -> . expression DOUBLEEQ expression
    (66) expression -> . expression NOTEQUAL expression
    (67) expression -> . expression LTE expression
    (68) expression -> . expression GTE expression
    (69) expression -> . expression STREQUAL expression
    (70) expression -> . expression STRNEQUAL expression
    (71) expression -> . expression AND expression
    (72) expression -> . expression OR expression
    (73) expression -> . expression LSHIFT expression
    (74) expression -> . expression RSHIFT expression
    (75) expression -> . expression URSHIFT expression
    (76) expression -> . EVAL LEFTPAREN evalmarker statements evalendmarker RIGHTPAREN
    (77) expression -> . EVAL LEFTPAREN block RIGHTPAREN
    (78) expression -> . EVAL LEFTPAREN expression RIGHTPAREN
    (81) expression -> . basicTypes
    (82) expression -> . ID
    (83) expression -> . TYPEOF expression
    (87) expression -> . arrayCall
    (92) basicTypes -> . NUMBER
    (93) basicTypes -> . BOOLEAN
    (94) basicTypes -> . STRING
    (95) basicTypes -> . UNDEFINED
    (89) arrayCall -> . ID reference

    LEFTPAREN       shift and go to state 37
    NOT             shift and go to state 41
    BINNOT          shift and go to state 43
    EVAL            shift and go to state 31
    ID              shift and go to state 38
    TYPEOF          shift and go to state 36
    NUMBER          shift and go to state 32
    BOOLEAN         shift and go to state 40
    STRING          shift and go to state 35
    UNDEFINED       shift and go to state 33

    arrayCall                      shift and go to state 34
    expression                     shift and go to state 150
    basicTypes                     shift and go to state 42

state 96

    (61) expression -> expression BINXOR . expression
    (52) expression -> . expression PLUS expression
    (53) expression -> . expression MINUS expression
    (54) expression -> . expression INTO expression
    (55) expression -> . expression DIVIDE expression
    (56) expression -> . expression MOD expression
    (57) expression -> . LEFTPAREN expression RIGHTPAREN
    (58) expression -> . NOT expression
    (59) expression -> . expression BINAND expression
    (60) expression -> . expression BINOR expression
    (61) expression -> . expression BINXOR expression
    (62) expression -> . BINNOT expression
    (63) expression -> . expression LT expression
    (64) expression -> . expression GT expression
    (65) expression -> . expression DOUBLEEQ expression
    (66) expression -> . expression NOTEQUAL expression
    (67) expression -> . expression LTE expression
    (68) expression -> . expression GTE expression
    (69) expression -> . expression STREQUAL expression
    (70) expression -> . expression STRNEQUAL expression
    (71) expression -> . expression AND expression
    (72) expression -> . expression OR expression
    (73) expression -> . expression LSHIFT expression
    (74) expression -> . expression RSHIFT expression
    (75) expression -> . expression URSHIFT expression
    (76) expression -> . EVAL LEFTPAREN evalmarker statements evalendmarker RIGHTPAREN
    (77) expression -> . EVAL LEFTPAREN block RIGHTPAREN
    (78) expression -> . EVAL LEFTPAREN expression RIGHTPAREN
    (81) expression -> . basicTypes
    (82) expression -> . ID
    (83) expression -> . TYPEOF expression
    (87) expression -> . arrayCall
    (92) basicTypes -> . NUMBER
    (93) basicTypes -> . BOOLEAN
    (94) basicTypes -> . STRING
    (95) basicTypes -> . UNDEFINED
    (89) arrayCall -> . ID reference

    LEFTPAREN       shift and go to state 37
    NOT             shift and go to state 41
    BINNOT          shift and go to state 43
    EVAL            shift and go to state 31
    ID              shift and go to state 38
    TYPEOF          shift and go to state 36
    NUMBER          shift and go to state 32
    BOOLEAN         shift and go to state 40
    STRING          shift and go to state 35
    UNDEFINED       shift and go to state 33

    arrayCall                      shift and go to state 34
    expression                     shift and go to state 151
    basicTypes                     shift and go to state 42

state 97

    (64) expression -> expression GT . expression
    (52) expression -> . expression PLUS expression
    (53) expression -> . expression MINUS expression
    (54) expression -> . expression INTO expression
    (55) expression -> . expression DIVIDE expression
    (56) expression -> . expression MOD expression
    (57) expression -> . LEFTPAREN expression RIGHTPAREN
    (58) expression -> . NOT expression
    (59) expression -> . expression BINAND expression
    (60) expression -> . expression BINOR expression
    (61) expression -> . expression BINXOR expression
    (62) expression -> . BINNOT expression
    (63) expression -> . expression LT expression
    (64) expression -> . expression GT expression
    (65) expression -> . expression DOUBLEEQ expression
    (66) expression -> . expression NOTEQUAL expression
    (67) expression -> . expression LTE expression
    (68) expression -> . expression GTE expression
    (69) expression -> . expression STREQUAL expression
    (70) expression -> . expression STRNEQUAL expression
    (71) expression -> . expression AND expression
    (72) expression -> . expression OR expression
    (73) expression -> . expression LSHIFT expression
    (74) expression -> . expression RSHIFT expression
    (75) expression -> . expression URSHIFT expression
    (76) expression -> . EVAL LEFTPAREN evalmarker statements evalendmarker RIGHTPAREN
    (77) expression -> . EVAL LEFTPAREN block RIGHTPAREN
    (78) expression -> . EVAL LEFTPAREN expression RIGHTPAREN
    (81) expression -> . basicTypes
    (82) expression -> . ID
    (83) expression -> . TYPEOF expression
    (87) expression -> . arrayCall
    (92) basicTypes -> . NUMBER
    (93) basicTypes -> . BOOLEAN
    (94) basicTypes -> . STRING
    (95) basicTypes -> . UNDEFINED
    (89) arrayCall -> . ID reference

    LEFTPAREN       shift and go to state 37
    NOT             shift and go to state 41
    BINNOT          shift and go to state 43
    EVAL            shift and go to state 31
    ID              shift and go to state 38
    TYPEOF          shift and go to state 36
    NUMBER          shift and go to state 32
    BOOLEAN         shift and go to state 40
    STRING          shift and go to state 35
    UNDEFINED       shift and go to state 33

    arrayCall                      shift and go to state 34
    expression                     shift and go to state 152
    basicTypes                     shift and go to state 42

state 98

    (55) expression -> expression DIVIDE . expression
    (52) expression -> . expression PLUS expression
    (53) expression -> . expression MINUS expression
    (54) expression -> . expression INTO expression
    (55) expression -> . expression DIVIDE expression
    (56) expression -> . expression MOD expression
    (57) expression -> . LEFTPAREN expression RIGHTPAREN
    (58) expression -> . NOT expression
    (59) expression -> . expression BINAND expression
    (60) expression -> . expression BINOR expression
    (61) expression -> . expression BINXOR expression
    (62) expression -> . BINNOT expression
    (63) expression -> . expression LT expression
    (64) expression -> . expression GT expression
    (65) expression -> . expression DOUBLEEQ expression
    (66) expression -> . expression NOTEQUAL expression
    (67) expression -> . expression LTE expression
    (68) expression -> . expression GTE expression
    (69) expression -> . expression STREQUAL expression
    (70) expression -> . expression STRNEQUAL expression
    (71) expression -> . expression AND expression
    (72) expression -> . expression OR expression
    (73) expression -> . expression LSHIFT expression
    (74) expression -> . expression RSHIFT expression
    (75) expression -> . expression URSHIFT expression
    (76) expression -> . EVAL LEFTPAREN evalmarker statements evalendmarker RIGHTPAREN
    (77) expression -> . EVAL LEFTPAREN block RIGHTPAREN
    (78) expression -> . EVAL LEFTPAREN expression RIGHTPAREN
    (81) expression -> . basicTypes
    (82) expression -> . ID
    (83) expression -> . TYPEOF expression
    (87) expression -> . arrayCall
    (92) basicTypes -> . NUMBER
    (93) basicTypes -> . BOOLEAN
    (94) basicTypes -> . STRING
    (95) basicTypes -> . UNDEFINED
    (89) arrayCall -> . ID reference

    LEFTPAREN       shift and go to state 37
    NOT             shift and go to state 41
    BINNOT          shift and go to state 43
    EVAL            shift and go to state 31
    ID              shift and go to state 38
    TYPEOF          shift and go to state 36
    NUMBER          shift and go to state 32
    BOOLEAN         shift and go to state 40
    STRING          shift and go to state 35
    UNDEFINED       shift and go to state 33

    arrayCall                      shift and go to state 34
    expression                     shift and go to state 153
    basicTypes                     shift and go to state 42

state 99

    (54) expression -> expression INTO . expression
    (52) expression -> . expression PLUS expression
    (53) expression -> . expression MINUS expression
    (54) expression -> . expression INTO expression
    (55) expression -> . expression DIVIDE expression
    (56) expression -> . expression MOD expression
    (57) expression -> . LEFTPAREN expression RIGHTPAREN
    (58) expression -> . NOT expression
    (59) expression -> . expression BINAND expression
    (60) expression -> . expression BINOR expression
    (61) expression -> . expression BINXOR expression
    (62) expression -> . BINNOT expression
    (63) expression -> . expression LT expression
    (64) expression -> . expression GT expression
    (65) expression -> . expression DOUBLEEQ expression
    (66) expression -> . expression NOTEQUAL expression
    (67) expression -> . expression LTE expression
    (68) expression -> . expression GTE expression
    (69) expression -> . expression STREQUAL expression
    (70) expression -> . expression STRNEQUAL expression
    (71) expression -> . expression AND expression
    (72) expression -> . expression OR expression
    (73) expression -> . expression LSHIFT expression
    (74) expression -> . expression RSHIFT expression
    (75) expression -> . expression URSHIFT expression
    (76) expression -> . EVAL LEFTPAREN evalmarker statements evalendmarker RIGHTPAREN
    (77) expression -> . EVAL LEFTPAREN block RIGHTPAREN
    (78) expression -> . EVAL LEFTPAREN expression RIGHTPAREN
    (81) expression -> . basicTypes
    (82) expression -> . ID
    (83) expression -> . TYPEOF expression
    (87) expression -> . arrayCall
    (92) basicTypes -> . NUMBER
    (93) basicTypes -> . BOOLEAN
    (94) basicTypes -> . STRING
    (95) basicTypes -> . UNDEFINED
    (89) arrayCall -> . ID reference

    LEFTPAREN       shift and go to state 37
    NOT             shift and go to state 41
    BINNOT          shift and go to state 43
    EVAL            shift and go to state 31
    ID              shift and go to state 38
    TYPEOF          shift and go to state 36
    NUMBER          shift and go to state 32
    BOOLEAN         shift and go to state 40
    STRING          shift and go to state 35
    UNDEFINED       shift and go to state 33

    arrayCall                      shift and go to state 34
    expression                     shift and go to state 154
    basicTypes                     shift and go to state 42

state 100

    (67) expression -> expression LTE . expression
    (52) expression -> . expression PLUS expression
    (53) expression -> . expression MINUS expression
    (54) expression -> . expression INTO expression
    (55) expression -> . expression DIVIDE expression
    (56) expression -> . expression MOD expression
    (57) expression -> . LEFTPAREN expression RIGHTPAREN
    (58) expression -> . NOT expression
    (59) expression -> . expression BINAND expression
    (60) expression -> . expression BINOR expression
    (61) expression -> . expression BINXOR expression
    (62) expression -> . BINNOT expression
    (63) expression -> . expression LT expression
    (64) expression -> . expression GT expression
    (65) expression -> . expression DOUBLEEQ expression
    (66) expression -> . expression NOTEQUAL expression
    (67) expression -> . expression LTE expression
    (68) expression -> . expression GTE expression
    (69) expression -> . expression STREQUAL expression
    (70) expression -> . expression STRNEQUAL expression
    (71) expression -> . expression AND expression
    (72) expression -> . expression OR expression
    (73) expression -> . expression LSHIFT expression
    (74) expression -> . expression RSHIFT expression
    (75) expression -> . expression URSHIFT expression
    (76) expression -> . EVAL LEFTPAREN evalmarker statements evalendmarker RIGHTPAREN
    (77) expression -> . EVAL LEFTPAREN block RIGHTPAREN
    (78) expression -> . EVAL LEFTPAREN expression RIGHTPAREN
    (81) expression -> . basicTypes
    (82) expression -> . ID
    (83) expression -> . TYPEOF expression
    (87) expression -> . arrayCall
    (92) basicTypes -> . NUMBER
    (93) basicTypes -> . BOOLEAN
    (94) basicTypes -> . STRING
    (95) basicTypes -> . UNDEFINED
    (89) arrayCall -> . ID reference

    LEFTPAREN       shift and go to state 37
    NOT             shift and go to state 41
    BINNOT          shift and go to state 43
    EVAL            shift and go to state 31
    ID              shift and go to state 38
    TYPEOF          shift and go to state 36
    NUMBER          shift and go to state 32
    BOOLEAN         shift and go to state 40
    STRING          shift and go to state 35
    UNDEFINED       shift and go to state 33

    arrayCall                      shift and go to state 34
    expression                     shift and go to state 155
    basicTypes                     shift and go to state 42

state 101

    (71) expression -> expression AND . expression
    (52) expression -> . expression PLUS expression
    (53) expression -> . expression MINUS expression
    (54) expression -> . expression INTO expression
    (55) expression -> . expression DIVIDE expression
    (56) expression -> . expression MOD expression
    (57) expression -> . LEFTPAREN expression RIGHTPAREN
    (58) expression -> . NOT expression
    (59) expression -> . expression BINAND expression
    (60) expression -> . expression BINOR expression
    (61) expression -> . expression BINXOR expression
    (62) expression -> . BINNOT expression
    (63) expression -> . expression LT expression
    (64) expression -> . expression GT expression
    (65) expression -> . expression DOUBLEEQ expression
    (66) expression -> . expression NOTEQUAL expression
    (67) expression -> . expression LTE expression
    (68) expression -> . expression GTE expression
    (69) expression -> . expression STREQUAL expression
    (70) expression -> . expression STRNEQUAL expression
    (71) expression -> . expression AND expression
    (72) expression -> . expression OR expression
    (73) expression -> . expression LSHIFT expression
    (74) expression -> . expression RSHIFT expression
    (75) expression -> . expression URSHIFT expression
    (76) expression -> . EVAL LEFTPAREN evalmarker statements evalendmarker RIGHTPAREN
    (77) expression -> . EVAL LEFTPAREN block RIGHTPAREN
    (78) expression -> . EVAL LEFTPAREN expression RIGHTPAREN
    (81) expression -> . basicTypes
    (82) expression -> . ID
    (83) expression -> . TYPEOF expression
    (87) expression -> . arrayCall
    (92) basicTypes -> . NUMBER
    (93) basicTypes -> . BOOLEAN
    (94) basicTypes -> . STRING
    (95) basicTypes -> . UNDEFINED
    (89) arrayCall -> . ID reference

    LEFTPAREN       shift and go to state 37
    NOT             shift and go to state 41
    BINNOT          shift and go to state 43
    EVAL            shift and go to state 31
    ID              shift and go to state 38
    TYPEOF          shift and go to state 36
    NUMBER          shift and go to state 32
    BOOLEAN         shift and go to state 40
    STRING          shift and go to state 35
    UNDEFINED       shift and go to state 33

    arrayCall                      shift and go to state 34
    expression                     shift and go to state 156
    basicTypes                     shift and go to state 42

state 102

    (60) expression -> expression BINOR . expression
    (52) expression -> . expression PLUS expression
    (53) expression -> . expression MINUS expression
    (54) expression -> . expression INTO expression
    (55) expression -> . expression DIVIDE expression
    (56) expression -> . expression MOD expression
    (57) expression -> . LEFTPAREN expression RIGHTPAREN
    (58) expression -> . NOT expression
    (59) expression -> . expression BINAND expression
    (60) expression -> . expression BINOR expression
    (61) expression -> . expression BINXOR expression
    (62) expression -> . BINNOT expression
    (63) expression -> . expression LT expression
    (64) expression -> . expression GT expression
    (65) expression -> . expression DOUBLEEQ expression
    (66) expression -> . expression NOTEQUAL expression
    (67) expression -> . expression LTE expression
    (68) expression -> . expression GTE expression
    (69) expression -> . expression STREQUAL expression
    (70) expression -> . expression STRNEQUAL expression
    (71) expression -> . expression AND expression
    (72) expression -> . expression OR expression
    (73) expression -> . expression LSHIFT expression
    (74) expression -> . expression RSHIFT expression
    (75) expression -> . expression URSHIFT expression
    (76) expression -> . EVAL LEFTPAREN evalmarker statements evalendmarker RIGHTPAREN
    (77) expression -> . EVAL LEFTPAREN block RIGHTPAREN
    (78) expression -> . EVAL LEFTPAREN expression RIGHTPAREN
    (81) expression -> . basicTypes
    (82) expression -> . ID
    (83) expression -> . TYPEOF expression
    (87) expression -> . arrayCall
    (92) basicTypes -> . NUMBER
    (93) basicTypes -> . BOOLEAN
    (94) basicTypes -> . STRING
    (95) basicTypes -> . UNDEFINED
    (89) arrayCall -> . ID reference

    LEFTPAREN       shift and go to state 37
    NOT             shift and go to state 41
    BINNOT          shift and go to state 43
    EVAL            shift and go to state 31
    ID              shift and go to state 38
    TYPEOF          shift and go to state 36
    NUMBER          shift and go to state 32
    BOOLEAN         shift and go to state 40
    STRING          shift and go to state 35
    UNDEFINED       shift and go to state 33

    arrayCall                      shift and go to state 34
    expression                     shift and go to state 157
    basicTypes                     shift and go to state 42

state 103

    (75) expression -> expression URSHIFT . expression
    (52) expression -> . expression PLUS expression
    (53) expression -> . expression MINUS expression
    (54) expression -> . expression INTO expression
    (55) expression -> . expression DIVIDE expression
    (56) expression -> . expression MOD expression
    (57) expression -> . LEFTPAREN expression RIGHTPAREN
    (58) expression -> . NOT expression
    (59) expression -> . expression BINAND expression
    (60) expression -> . expression BINOR expression
    (61) expression -> . expression BINXOR expression
    (62) expression -> . BINNOT expression
    (63) expression -> . expression LT expression
    (64) expression -> . expression GT expression
    (65) expression -> . expression DOUBLEEQ expression
    (66) expression -> . expression NOTEQUAL expression
    (67) expression -> . expression LTE expression
    (68) expression -> . expression GTE expression
    (69) expression -> . expression STREQUAL expression
    (70) expression -> . expression STRNEQUAL expression
    (71) expression -> . expression AND expression
    (72) expression -> . expression OR expression
    (73) expression -> . expression LSHIFT expression
    (74) expression -> . expression RSHIFT expression
    (75) expression -> . expression URSHIFT expression
    (76) expression -> . EVAL LEFTPAREN evalmarker statements evalendmarker RIGHTPAREN
    (77) expression -> . EVAL LEFTPAREN block RIGHTPAREN
    (78) expression -> . EVAL LEFTPAREN expression RIGHTPAREN
    (81) expression -> . basicTypes
    (82) expression -> . ID
    (83) expression -> . TYPEOF expression
    (87) expression -> . arrayCall
    (92) basicTypes -> . NUMBER
    (93) basicTypes -> . BOOLEAN
    (94) basicTypes -> . STRING
    (95) basicTypes -> . UNDEFINED
    (89) arrayCall -> . ID reference

    LEFTPAREN       shift and go to state 37
    NOT             shift and go to state 41
    BINNOT          shift and go to state 43
    EVAL            shift and go to state 31
    ID              shift and go to state 38
    TYPEOF          shift and go to state 36
    NUMBER          shift and go to state 32
    BOOLEAN         shift and go to state 40
    STRING          shift and go to state 35
    UNDEFINED       shift and go to state 33

    arrayCall                      shift and go to state 34
    expression                     shift and go to state 158
    basicTypes                     shift and go to state 42

state 104

    (72) expression -> expression OR . expression
    (52) expression -> . expression PLUS expression
    (53) expression -> . expression MINUS expression
    (54) expression -> . expression INTO expression
    (55) expression -> . expression DIVIDE expression
    (56) expression -> . expression MOD expression
    (57) expression -> . LEFTPAREN expression RIGHTPAREN
    (58) expression -> . NOT expression
    (59) expression -> . expression BINAND expression
    (60) expression -> . expression BINOR expression
    (61) expression -> . expression BINXOR expression
    (62) expression -> . BINNOT expression
    (63) expression -> . expression LT expression
    (64) expression -> . expression GT expression
    (65) expression -> . expression DOUBLEEQ expression
    (66) expression -> . expression NOTEQUAL expression
    (67) expression -> . expression LTE expression
    (68) expression -> . expression GTE expression
    (69) expression -> . expression STREQUAL expression
    (70) expression -> . expression STRNEQUAL expression
    (71) expression -> . expression AND expression
    (72) expression -> . expression OR expression
    (73) expression -> . expression LSHIFT expression
    (74) expression -> . expression RSHIFT expression
    (75) expression -> . expression URSHIFT expression
    (76) expression -> . EVAL LEFTPAREN evalmarker statements evalendmarker RIGHTPAREN
    (77) expression -> . EVAL LEFTPAREN block RIGHTPAREN
    (78) expression -> . EVAL LEFTPAREN expression RIGHTPAREN
    (81) expression -> . basicTypes
    (82) expression -> . ID
    (83) expression -> . TYPEOF expression
    (87) expression -> . arrayCall
    (92) basicTypes -> . NUMBER
    (93) basicTypes -> . BOOLEAN
    (94) basicTypes -> . STRING
    (95) basicTypes -> . UNDEFINED
    (89) arrayCall -> . ID reference

    LEFTPAREN       shift and go to state 37
    NOT             shift and go to state 41
    BINNOT          shift and go to state 43
    EVAL            shift and go to state 31
    ID              shift and go to state 38
    TYPEOF          shift and go to state 36
    NUMBER          shift and go to state 32
    BOOLEAN         shift and go to state 40
    STRING          shift and go to state 35
    UNDEFINED       shift and go to state 33

    arrayCall                      shift and go to state 34
    expression                     shift and go to state 159
    basicTypes                     shift and go to state 42

state 105

    (56) expression -> expression MOD . expression
    (52) expression -> . expression PLUS expression
    (53) expression -> . expression MINUS expression
    (54) expression -> . expression INTO expression
    (55) expression -> . expression DIVIDE expression
    (56) expression -> . expression MOD expression
    (57) expression -> . LEFTPAREN expression RIGHTPAREN
    (58) expression -> . NOT expression
    (59) expression -> . expression BINAND expression
    (60) expression -> . expression BINOR expression
    (61) expression -> . expression BINXOR expression
    (62) expression -> . BINNOT expression
    (63) expression -> . expression LT expression
    (64) expression -> . expression GT expression
    (65) expression -> . expression DOUBLEEQ expression
    (66) expression -> . expression NOTEQUAL expression
    (67) expression -> . expression LTE expression
    (68) expression -> . expression GTE expression
    (69) expression -> . expression STREQUAL expression
    (70) expression -> . expression STRNEQUAL expression
    (71) expression -> . expression AND expression
    (72) expression -> . expression OR expression
    (73) expression -> . expression LSHIFT expression
    (74) expression -> . expression RSHIFT expression
    (75) expression -> . expression URSHIFT expression
    (76) expression -> . EVAL LEFTPAREN evalmarker statements evalendmarker RIGHTPAREN
    (77) expression -> . EVAL LEFTPAREN block RIGHTPAREN
    (78) expression -> . EVAL LEFTPAREN expression RIGHTPAREN
    (81) expression -> . basicTypes
    (82) expression -> . ID
    (83) expression -> . TYPEOF expression
    (87) expression -> . arrayCall
    (92) basicTypes -> . NUMBER
    (93) basicTypes -> . BOOLEAN
    (94) basicTypes -> . STRING
    (95) basicTypes -> . UNDEFINED
    (89) arrayCall -> . ID reference

    LEFTPAREN       shift and go to state 37
    NOT             shift and go to state 41
    BINNOT          shift and go to state 43
    EVAL            shift and go to state 31
    ID              shift and go to state 38
    TYPEOF          shift and go to state 36
    NUMBER          shift and go to state 32
    BOOLEAN         shift and go to state 40
    STRING          shift and go to state 35
    UNDEFINED       shift and go to state 33

    arrayCall                      shift and go to state 34
    expression                     shift and go to state 160
    basicTypes                     shift and go to state 42

state 106

    (58) expression -> NOT expression .
    (52) expression -> expression . PLUS expression
    (53) expression -> expression . MINUS expression
    (54) expression -> expression . INTO expression
    (55) expression -> expression . DIVIDE expression
    (56) expression -> expression . MOD expression
    (59) expression -> expression . BINAND expression
    (60) expression -> expression . BINOR expression
    (61) expression -> expression . BINXOR expression
    (63) expression -> expression . LT expression
    (64) expression -> expression . GT expression
    (65) expression -> expression . DOUBLEEQ expression
    (66) expression -> expression . NOTEQUAL expression
    (67) expression -> expression . LTE expression
    (68) expression -> expression . GTE expression
    (69) expression -> expression . STREQUAL expression
    (70) expression -> expression . STRNEQUAL expression
    (71) expression -> expression . AND expression
    (72) expression -> expression . OR expression
    (73) expression -> expression . LSHIFT expression
    (74) expression -> expression . RSHIFT expression
    (75) expression -> expression . URSHIFT expression

    PLUS            reduce using rule 58 (expression -> NOT expression .)
    MINUS           reduce using rule 58 (expression -> NOT expression .)
    INTO            reduce using rule 58 (expression -> NOT expression .)
    DIVIDE          reduce using rule 58 (expression -> NOT expression .)
    MOD             reduce using rule 58 (expression -> NOT expression .)
    BINAND          reduce using rule 58 (expression -> NOT expression .)
    BINOR           reduce using rule 58 (expression -> NOT expression .)
    BINXOR          reduce using rule 58 (expression -> NOT expression .)
    LT              reduce using rule 58 (expression -> NOT expression .)
    GT              reduce using rule 58 (expression -> NOT expression .)
    DOUBLEEQ        reduce using rule 58 (expression -> NOT expression .)
    NOTEQUAL        reduce using rule 58 (expression -> NOT expression .)
    LTE             reduce using rule 58 (expression -> NOT expression .)
    GTE             reduce using rule 58 (expression -> NOT expression .)
    STREQUAL        reduce using rule 58 (expression -> NOT expression .)
    STRNEQUAL       reduce using rule 58 (expression -> NOT expression .)
    AND             reduce using rule 58 (expression -> NOT expression .)
    OR              reduce using rule 58 (expression -> NOT expression .)
    LSHIFT          reduce using rule 58 (expression -> NOT expression .)
    RSHIFT          reduce using rule 58 (expression -> NOT expression .)
    URSHIFT         reduce using rule 58 (expression -> NOT expression .)
    SEMICOLON       reduce using rule 58 (expression -> NOT expression .)
    RIGHTPAREN      reduce using rule 58 (expression -> NOT expression .)
    COMMA           reduce using rule 58 (expression -> NOT expression .)
    LEFTBRACE       reduce using rule 58 (expression -> NOT expression .)
    RIGHTBRACKET    reduce using rule 58 (expression -> NOT expression .)

  ! PLUS            [ shift and go to state 95 ]
  ! MINUS           [ shift and go to state 89 ]
  ! INTO            [ shift and go to state 99 ]
  ! DIVIDE          [ shift and go to state 98 ]
  ! MOD             [ shift and go to state 105 ]
  ! BINAND          [ shift and go to state 91 ]
  ! BINOR           [ shift and go to state 102 ]
  ! BINXOR          [ shift and go to state 96 ]
  ! LT              [ shift and go to state 94 ]
  ! GT              [ shift and go to state 97 ]
  ! DOUBLEEQ        [ shift and go to state 84 ]
  ! NOTEQUAL        [ shift and go to state 85 ]
  ! LTE             [ shift and go to state 100 ]
  ! GTE             [ shift and go to state 90 ]
  ! STREQUAL        [ shift and go to state 93 ]
  ! STRNEQUAL       [ shift and go to state 86 ]
  ! AND             [ shift and go to state 101 ]
  ! OR              [ shift and go to state 104 ]
  ! LSHIFT          [ shift and go to state 87 ]
  ! RSHIFT          [ shift and go to state 88 ]
  ! URSHIFT         [ shift and go to state 103 ]


state 107

    (62) expression -> BINNOT expression .
    (52) expression -> expression . PLUS expression
    (53) expression -> expression . MINUS expression
    (54) expression -> expression . INTO expression
    (55) expression -> expression . DIVIDE expression
    (56) expression -> expression . MOD expression
    (59) expression -> expression . BINAND expression
    (60) expression -> expression . BINOR expression
    (61) expression -> expression . BINXOR expression
    (63) expression -> expression . LT expression
    (64) expression -> expression . GT expression
    (65) expression -> expression . DOUBLEEQ expression
    (66) expression -> expression . NOTEQUAL expression
    (67) expression -> expression . LTE expression
    (68) expression -> expression . GTE expression
    (69) expression -> expression . STREQUAL expression
    (70) expression -> expression . STRNEQUAL expression
    (71) expression -> expression . AND expression
    (72) expression -> expression . OR expression
    (73) expression -> expression . LSHIFT expression
    (74) expression -> expression . RSHIFT expression
    (75) expression -> expression . URSHIFT expression

    PLUS            reduce using rule 62 (expression -> BINNOT expression .)
    MINUS           reduce using rule 62 (expression -> BINNOT expression .)
    INTO            reduce using rule 62 (expression -> BINNOT expression .)
    DIVIDE          reduce using rule 62 (expression -> BINNOT expression .)
    MOD             reduce using rule 62 (expression -> BINNOT expression .)
    BINAND          reduce using rule 62 (expression -> BINNOT expression .)
    BINOR           reduce using rule 62 (expression -> BINNOT expression .)
    BINXOR          reduce using rule 62 (expression -> BINNOT expression .)
    LT              reduce using rule 62 (expression -> BINNOT expression .)
    GT              reduce using rule 62 (expression -> BINNOT expression .)
    DOUBLEEQ        reduce using rule 62 (expression -> BINNOT expression .)
    NOTEQUAL        reduce using rule 62 (expression -> BINNOT expression .)
    LTE             reduce using rule 62 (expression -> BINNOT expression .)
    GTE             reduce using rule 62 (expression -> BINNOT expression .)
    STREQUAL        reduce using rule 62 (expression -> BINNOT expression .)
    STRNEQUAL       reduce using rule 62 (expression -> BINNOT expression .)
    AND             reduce using rule 62 (expression -> BINNOT expression .)
    OR              reduce using rule 62 (expression -> BINNOT expression .)
    LSHIFT          reduce using rule 62 (expression -> BINNOT expression .)
    RSHIFT          reduce using rule 62 (expression -> BINNOT expression .)
    URSHIFT         reduce using rule 62 (expression -> BINNOT expression .)
    SEMICOLON       reduce using rule 62 (expression -> BINNOT expression .)
    RIGHTPAREN      reduce using rule 62 (expression -> BINNOT expression .)
    COMMA           reduce using rule 62 (expression -> BINNOT expression .)
    LEFTBRACE       reduce using rule 62 (expression -> BINNOT expression .)
    RIGHTBRACKET    reduce using rule 62 (expression -> BINNOT expression .)

  ! PLUS            [ shift and go to state 95 ]
  ! MINUS           [ shift and go to state 89 ]
  ! INTO            [ shift and go to state 99 ]
  ! DIVIDE          [ shift and go to state 98 ]
  ! MOD             [ shift and go to state 105 ]
  ! BINAND          [ shift and go to state 91 ]
  ! BINOR           [ shift and go to state 102 ]
  ! BINXOR          [ shift and go to state 96 ]
  ! LT              [ shift and go to state 94 ]
  ! GT              [ shift and go to state 97 ]
  ! DOUBLEEQ        [ shift and go to state 84 ]
  ! NOTEQUAL        [ shift and go to state 85 ]
  ! LTE             [ shift and go to state 100 ]
  ! GTE             [ shift and go to state 90 ]
  ! STREQUAL        [ shift and go to state 93 ]
  ! STRNEQUAL       [ shift and go to state 86 ]
  ! AND             [ shift and go to state 101 ]
  ! OR              [ shift and go to state 104 ]
  ! LSHIFT          [ shift and go to state 87 ]
  ! RSHIFT          [ shift and go to state 88 ]
  ! URSHIFT         [ shift and go to state 103 ]


state 108

    (110) forloop -> FOR scope_marker LEFTPAREN . initialization SEMICOLON forexpr_marker for_expr forcheck_marker SEMICOLON increment increment_marker RIGHTPAREN forblock endblock_marker
    (117) initialization -> . assignment
    (118) initialization -> . reinitialization
    (26) assignment -> . VAR assignlist
    (119) reinitialization -> . reassignment COMMA reinitialization
    (120) reinitialization -> . reassignment
    (30) reassignment -> . ID EQ expression
    (31) reassignment -> . ID PLUSEQ expression
    (32) reassignment -> . ID MINUSEQ expression
    (33) reassignment -> . ID INTOEQ expression
    (34) reassignment -> . ID DIVEQ expression
    (35) reassignment -> . ID INCR
    (36) reassignment -> . ID DECR
    (37) reassignment -> . ID LSHIFTEQ expression
    (38) reassignment -> . ID RSHIFTEQ expression
    (39) reassignment -> . ID URSHIFTEQ expression
    (40) reassignment -> . ID ANDEQ expression
    (41) reassignment -> . ID OREQ expression
    (42) reassignment -> . ID XOREQ expression
    (43) reassignment -> . ID MODEQ expression
    (44) reassignment -> . LEFTPAREN reassignment RIGHTPAREN

    VAR             shift and go to state 163
    ID              shift and go to state 55
    LEFTPAREN       shift and go to state 19

    assignment                     shift and go to state 161
    initialization                 shift and go to state 162
    reinitialization               shift and go to state 164
    reassignment                   shift and go to state 165

state 109

    (88) reassignmentarray -> arrayCall EQ expression .
    (52) expression -> expression . PLUS expression
    (53) expression -> expression . MINUS expression
    (54) expression -> expression . INTO expression
    (55) expression -> expression . DIVIDE expression
    (56) expression -> expression . MOD expression
    (59) expression -> expression . BINAND expression
    (60) expression -> expression . BINOR expression
    (61) expression -> expression . BINXOR expression
    (63) expression -> expression . LT expression
    (64) expression -> expression . GT expression
    (65) expression -> expression . DOUBLEEQ expression
    (66) expression -> expression . NOTEQUAL expression
    (67) expression -> expression . LTE expression
    (68) expression -> expression . GTE expression
    (69) expression -> expression . STREQUAL expression
    (70) expression -> expression . STRNEQUAL expression
    (71) expression -> expression . AND expression
    (72) expression -> expression . OR expression
    (73) expression -> expression . LSHIFT expression
    (74) expression -> expression . RSHIFT expression
    (75) expression -> expression . URSHIFT expression

    SEMICOLON       reduce using rule 88 (reassignmentarray -> arrayCall EQ expression .)
    PLUS            shift and go to state 95
    MINUS           shift and go to state 89
    INTO            shift and go to state 99
    DIVIDE          shift and go to state 98
    MOD             shift and go to state 105
    BINAND          shift and go to state 91
    BINOR           shift and go to state 102
    BINXOR          shift and go to state 96
    LT              shift and go to state 94
    GT              shift and go to state 97
    DOUBLEEQ        shift and go to state 84
    NOTEQUAL        shift and go to state 85
    LTE             shift and go to state 100
    GTE             shift and go to state 90
    STREQUAL        shift and go to state 93
    STRNEQUAL       shift and go to state 86
    AND             shift and go to state 101
    OR              shift and go to state 104
    LSHIFT          shift and go to state 87
    RSHIFT          shift and go to state 88
    URSHIFT         shift and go to state 103


state 110

    (100) if -> IF expression ifelseblock . block ifblockend
    (102) ifelse -> IF expression ifelseblock . block ELSE elseblock block elseblockend
    (3) block -> . LEFTBRACE blockmarker statements RIGHTBRACE

    LEFTBRACE       shift and go to state 23

    block                          shift and go to state 166

state 111

    (128) funcdecl -> FUNCTION ID funcscopedefnormal . LEFTPAREN funcarghead RIGHTPAREN funblock endfunc

    LEFTPAREN       shift and go to state 167


state 112

    (20) statement -> CONSOLE DOT LOG . LEFTPAREN printList RIGHTPAREN SEMICOLON

    LEFTPAREN       shift and go to state 168


state 113

    (44) reassignment -> LEFTPAREN reassignment RIGHTPAREN .

    SEMICOLON       reduce using rule 44 (reassignment -> LEFTPAREN reassignment RIGHTPAREN .)
    RIGHTPAREN      reduce using rule 44 (reassignment -> LEFTPAREN reassignment RIGHTPAREN .)
    COMMA           reduce using rule 44 (reassignment -> LEFTPAREN reassignment RIGHTPAREN .)


state 114

    (30) reassignment -> ID EQ . expression
    (52) expression -> . expression PLUS expression
    (53) expression -> . expression MINUS expression
    (54) expression -> . expression INTO expression
    (55) expression -> . expression DIVIDE expression
    (56) expression -> . expression MOD expression
    (57) expression -> . LEFTPAREN expression RIGHTPAREN
    (58) expression -> . NOT expression
    (59) expression -> . expression BINAND expression
    (60) expression -> . expression BINOR expression
    (61) expression -> . expression BINXOR expression
    (62) expression -> . BINNOT expression
    (63) expression -> . expression LT expression
    (64) expression -> . expression GT expression
    (65) expression -> . expression DOUBLEEQ expression
    (66) expression -> . expression NOTEQUAL expression
    (67) expression -> . expression LTE expression
    (68) expression -> . expression GTE expression
    (69) expression -> . expression STREQUAL expression
    (70) expression -> . expression STRNEQUAL expression
    (71) expression -> . expression AND expression
    (72) expression -> . expression OR expression
    (73) expression -> . expression LSHIFT expression
    (74) expression -> . expression RSHIFT expression
    (75) expression -> . expression URSHIFT expression
    (76) expression -> . EVAL LEFTPAREN evalmarker statements evalendmarker RIGHTPAREN
    (77) expression -> . EVAL LEFTPAREN block RIGHTPAREN
    (78) expression -> . EVAL LEFTPAREN expression RIGHTPAREN
    (81) expression -> . basicTypes
    (82) expression -> . ID
    (83) expression -> . TYPEOF expression
    (87) expression -> . arrayCall
    (92) basicTypes -> . NUMBER
    (93) basicTypes -> . BOOLEAN
    (94) basicTypes -> . STRING
    (95) basicTypes -> . UNDEFINED
    (89) arrayCall -> . ID reference

    LEFTPAREN       shift and go to state 37
    NOT             shift and go to state 41
    BINNOT          shift and go to state 43
    EVAL            shift and go to state 31
    ID              shift and go to state 38
    TYPEOF          shift and go to state 36
    NUMBER          shift and go to state 32
    BOOLEAN         shift and go to state 40
    STRING          shift and go to state 35
    UNDEFINED       shift and go to state 33

    arrayCall                      shift and go to state 34
    expression                     shift and go to state 130
    basicTypes                     shift and go to state 42

state 115

    (24) declarationList -> ID COMMA . declarationList
    (24) declarationList -> . ID COMMA declarationList
    (25) declarationList -> . ID

    ID              shift and go to state 170

    declarationList                shift and go to state 169

state 116

    (86) funcstmt -> VAR ID EQ . functioncall
    (131) funcdecl -> VAR ID EQ . FUNCTION funcscopedef LEFTPAREN funcarghead RIGHTPAREN funblock SEMICOLON endfuncdecl
    (27) assignlist -> ID EQ . expression COMMA assignlist
    (28) assignlist -> ID EQ . expression
    (29) assignlist -> ID EQ . array
    (96) functioncall -> . ID LEFTPAREN argList RIGHTPAREN
    (52) expression -> . expression PLUS expression
    (53) expression -> . expression MINUS expression
    (54) expression -> . expression INTO expression
    (55) expression -> . expression DIVIDE expression
    (56) expression -> . expression MOD expression
    (57) expression -> . LEFTPAREN expression RIGHTPAREN
    (58) expression -> . NOT expression
    (59) expression -> . expression BINAND expression
    (60) expression -> . expression BINOR expression
    (61) expression -> . expression BINXOR expression
    (62) expression -> . BINNOT expression
    (63) expression -> . expression LT expression
    (64) expression -> . expression GT expression
    (65) expression -> . expression DOUBLEEQ expression
    (66) expression -> . expression NOTEQUAL expression
    (67) expression -> . expression LTE expression
    (68) expression -> . expression GTE expression
    (69) expression -> . expression STREQUAL expression
    (70) expression -> . expression STRNEQUAL expression
    (71) expression -> . expression AND expression
    (72) expression -> . expression OR expression
    (73) expression -> . expression LSHIFT expression
    (74) expression -> . expression RSHIFT expression
    (75) expression -> . expression URSHIFT expression
    (76) expression -> . EVAL LEFTPAREN evalmarker statements evalendmarker RIGHTPAREN
    (77) expression -> . EVAL LEFTPAREN block RIGHTPAREN
    (78) expression -> . EVAL LEFTPAREN expression RIGHTPAREN
    (81) expression -> . basicTypes
    (82) expression -> . ID
    (83) expression -> . TYPEOF expression
    (87) expression -> . arrayCall
    (47) array -> . LEFTBRACKET arrayList RIGHTBRACKET
    (92) basicTypes -> . NUMBER
    (93) basicTypes -> . BOOLEAN
    (94) basicTypes -> . STRING
    (95) basicTypes -> . UNDEFINED
    (89) arrayCall -> . ID reference

    FUNCTION        shift and go to state 173
    ID              shift and go to state 174
    LEFTPAREN       shift and go to state 37
    NOT             shift and go to state 41
    BINNOT          shift and go to state 43
    EVAL            shift and go to state 31
    TYPEOF          shift and go to state 36
    LEFTBRACKET     shift and go to state 172
    NUMBER          shift and go to state 32
    BOOLEAN         shift and go to state 40
    STRING          shift and go to state 35
    UNDEFINED       shift and go to state 33

    arrayCall                      shift and go to state 34
    functioncall                   shift and go to state 175
    expression                     shift and go to state 176
    array                          shift and go to state 171
    basicTypes                     shift and go to state 42

state 117

    (43) reassignment -> ID MODEQ expression .
    (52) expression -> expression . PLUS expression
    (53) expression -> expression . MINUS expression
    (54) expression -> expression . INTO expression
    (55) expression -> expression . DIVIDE expression
    (56) expression -> expression . MOD expression
    (59) expression -> expression . BINAND expression
    (60) expression -> expression . BINOR expression
    (61) expression -> expression . BINXOR expression
    (63) expression -> expression . LT expression
    (64) expression -> expression . GT expression
    (65) expression -> expression . DOUBLEEQ expression
    (66) expression -> expression . NOTEQUAL expression
    (67) expression -> expression . LTE expression
    (68) expression -> expression . GTE expression
    (69) expression -> expression . STREQUAL expression
    (70) expression -> expression . STRNEQUAL expression
    (71) expression -> expression . AND expression
    (72) expression -> expression . OR expression
    (73) expression -> expression . LSHIFT expression
    (74) expression -> expression . RSHIFT expression
    (75) expression -> expression . URSHIFT expression

    SEMICOLON       reduce using rule 43 (reassignment -> ID MODEQ expression .)
    RIGHTPAREN      reduce using rule 43 (reassignment -> ID MODEQ expression .)
    COMMA           reduce using rule 43 (reassignment -> ID MODEQ expression .)
    PLUS            shift and go to state 95
    MINUS           shift and go to state 89
    INTO            shift and go to state 99
    DIVIDE          shift and go to state 98
    MOD             shift and go to state 105
    BINAND          shift and go to state 91
    BINOR           shift and go to state 102
    BINXOR          shift and go to state 96
    LT              shift and go to state 94
    GT              shift and go to state 97
    DOUBLEEQ        shift and go to state 84
    NOTEQUAL        shift and go to state 85
    LTE             shift and go to state 100
    GTE             shift and go to state 90
    STREQUAL        shift and go to state 93
    STRNEQUAL       shift and go to state 86
    AND             shift and go to state 101
    OR              shift and go to state 104
    LSHIFT          shift and go to state 87
    RSHIFT          shift and go to state 88
    URSHIFT         shift and go to state 103


state 118

    (33) reassignment -> ID INTOEQ expression .
    (52) expression -> expression . PLUS expression
    (53) expression -> expression . MINUS expression
    (54) expression -> expression . INTO expression
    (55) expression -> expression . DIVIDE expression
    (56) expression -> expression . MOD expression
    (59) expression -> expression . BINAND expression
    (60) expression -> expression . BINOR expression
    (61) expression -> expression . BINXOR expression
    (63) expression -> expression . LT expression
    (64) expression -> expression . GT expression
    (65) expression -> expression . DOUBLEEQ expression
    (66) expression -> expression . NOTEQUAL expression
    (67) expression -> expression . LTE expression
    (68) expression -> expression . GTE expression
    (69) expression -> expression . STREQUAL expression
    (70) expression -> expression . STRNEQUAL expression
    (71) expression -> expression . AND expression
    (72) expression -> expression . OR expression
    (73) expression -> expression . LSHIFT expression
    (74) expression -> expression . RSHIFT expression
    (75) expression -> expression . URSHIFT expression

    SEMICOLON       reduce using rule 33 (reassignment -> ID INTOEQ expression .)
    RIGHTPAREN      reduce using rule 33 (reassignment -> ID INTOEQ expression .)
    COMMA           reduce using rule 33 (reassignment -> ID INTOEQ expression .)
    PLUS            shift and go to state 95
    MINUS           shift and go to state 89
    INTO            shift and go to state 99
    DIVIDE          shift and go to state 98
    MOD             shift and go to state 105
    BINAND          shift and go to state 91
    BINOR           shift and go to state 102
    BINXOR          shift and go to state 96
    LT              shift and go to state 94
    GT              shift and go to state 97
    DOUBLEEQ        shift and go to state 84
    NOTEQUAL        shift and go to state 85
    LTE             shift and go to state 100
    GTE             shift and go to state 90
    STREQUAL        shift and go to state 93
    STRNEQUAL       shift and go to state 86
    AND             shift and go to state 101
    OR              shift and go to state 104
    LSHIFT          shift and go to state 87
    RSHIFT          shift and go to state 88
    URSHIFT         shift and go to state 103


state 119

    (42) reassignment -> ID XOREQ expression .
    (52) expression -> expression . PLUS expression
    (53) expression -> expression . MINUS expression
    (54) expression -> expression . INTO expression
    (55) expression -> expression . DIVIDE expression
    (56) expression -> expression . MOD expression
    (59) expression -> expression . BINAND expression
    (60) expression -> expression . BINOR expression
    (61) expression -> expression . BINXOR expression
    (63) expression -> expression . LT expression
    (64) expression -> expression . GT expression
    (65) expression -> expression . DOUBLEEQ expression
    (66) expression -> expression . NOTEQUAL expression
    (67) expression -> expression . LTE expression
    (68) expression -> expression . GTE expression
    (69) expression -> expression . STREQUAL expression
    (70) expression -> expression . STRNEQUAL expression
    (71) expression -> expression . AND expression
    (72) expression -> expression . OR expression
    (73) expression -> expression . LSHIFT expression
    (74) expression -> expression . RSHIFT expression
    (75) expression -> expression . URSHIFT expression

    SEMICOLON       reduce using rule 42 (reassignment -> ID XOREQ expression .)
    RIGHTPAREN      reduce using rule 42 (reassignment -> ID XOREQ expression .)
    COMMA           reduce using rule 42 (reassignment -> ID XOREQ expression .)
    PLUS            shift and go to state 95
    MINUS           shift and go to state 89
    INTO            shift and go to state 99
    DIVIDE          shift and go to state 98
    MOD             shift and go to state 105
    BINAND          shift and go to state 91
    BINOR           shift and go to state 102
    BINXOR          shift and go to state 96
    LT              shift and go to state 94
    GT              shift and go to state 97
    DOUBLEEQ        shift and go to state 84
    NOTEQUAL        shift and go to state 85
    LTE             shift and go to state 100
    GTE             shift and go to state 90
    STREQUAL        shift and go to state 93
    STRNEQUAL       shift and go to state 86
    AND             shift and go to state 101
    OR              shift and go to state 104
    LSHIFT          shift and go to state 87
    RSHIFT          shift and go to state 88
    URSHIFT         shift and go to state 103


state 120

    (39) reassignment -> ID URSHIFTEQ expression .
    (52) expression -> expression . PLUS expression
    (53) expression -> expression . MINUS expression
    (54) expression -> expression . INTO expression
    (55) expression -> expression . DIVIDE expression
    (56) expression -> expression . MOD expression
    (59) expression -> expression . BINAND expression
    (60) expression -> expression . BINOR expression
    (61) expression -> expression . BINXOR expression
    (63) expression -> expression . LT expression
    (64) expression -> expression . GT expression
    (65) expression -> expression . DOUBLEEQ expression
    (66) expression -> expression . NOTEQUAL expression
    (67) expression -> expression . LTE expression
    (68) expression -> expression . GTE expression
    (69) expression -> expression . STREQUAL expression
    (70) expression -> expression . STRNEQUAL expression
    (71) expression -> expression . AND expression
    (72) expression -> expression . OR expression
    (73) expression -> expression . LSHIFT expression
    (74) expression -> expression . RSHIFT expression
    (75) expression -> expression . URSHIFT expression

    SEMICOLON       reduce using rule 39 (reassignment -> ID URSHIFTEQ expression .)
    RIGHTPAREN      reduce using rule 39 (reassignment -> ID URSHIFTEQ expression .)
    COMMA           reduce using rule 39 (reassignment -> ID URSHIFTEQ expression .)
    PLUS            shift and go to state 95
    MINUS           shift and go to state 89
    INTO            shift and go to state 99
    DIVIDE          shift and go to state 98
    MOD             shift and go to state 105
    BINAND          shift and go to state 91
    BINOR           shift and go to state 102
    BINXOR          shift and go to state 96
    LT              shift and go to state 94
    GT              shift and go to state 97
    DOUBLEEQ        shift and go to state 84
    NOTEQUAL        shift and go to state 85
    LTE             shift and go to state 100
    GTE             shift and go to state 90
    STREQUAL        shift and go to state 93
    STRNEQUAL       shift and go to state 86
    AND             shift and go to state 101
    OR              shift and go to state 104
    LSHIFT          shift and go to state 87
    RSHIFT          shift and go to state 88
    URSHIFT         shift and go to state 103


state 121

    (32) reassignment -> ID MINUSEQ expression .
    (52) expression -> expression . PLUS expression
    (53) expression -> expression . MINUS expression
    (54) expression -> expression . INTO expression
    (55) expression -> expression . DIVIDE expression
    (56) expression -> expression . MOD expression
    (59) expression -> expression . BINAND expression
    (60) expression -> expression . BINOR expression
    (61) expression -> expression . BINXOR expression
    (63) expression -> expression . LT expression
    (64) expression -> expression . GT expression
    (65) expression -> expression . DOUBLEEQ expression
    (66) expression -> expression . NOTEQUAL expression
    (67) expression -> expression . LTE expression
    (68) expression -> expression . GTE expression
    (69) expression -> expression . STREQUAL expression
    (70) expression -> expression . STRNEQUAL expression
    (71) expression -> expression . AND expression
    (72) expression -> expression . OR expression
    (73) expression -> expression . LSHIFT expression
    (74) expression -> expression . RSHIFT expression
    (75) expression -> expression . URSHIFT expression

    SEMICOLON       reduce using rule 32 (reassignment -> ID MINUSEQ expression .)
    RIGHTPAREN      reduce using rule 32 (reassignment -> ID MINUSEQ expression .)
    COMMA           reduce using rule 32 (reassignment -> ID MINUSEQ expression .)
    PLUS            shift and go to state 95
    MINUS           shift and go to state 89
    INTO            shift and go to state 99
    DIVIDE          shift and go to state 98
    MOD             shift and go to state 105
    BINAND          shift and go to state 91
    BINOR           shift and go to state 102
    BINXOR          shift and go to state 96
    LT              shift and go to state 94
    GT              shift and go to state 97
    DOUBLEEQ        shift and go to state 84
    NOTEQUAL        shift and go to state 85
    LTE             shift and go to state 100
    GTE             shift and go to state 90
    STREQUAL        shift and go to state 93
    STRNEQUAL       shift and go to state 86
    AND             shift and go to state 101
    OR              shift and go to state 104
    LSHIFT          shift and go to state 87
    RSHIFT          shift and go to state 88
    URSHIFT         shift and go to state 103


state 122

    (90) reference -> LEFTBRACKET expression . RIGHTBRACKET reference
    (91) reference -> LEFTBRACKET expression . RIGHTBRACKET
    (52) expression -> expression . PLUS expression
    (53) expression -> expression . MINUS expression
    (54) expression -> expression . INTO expression
    (55) expression -> expression . DIVIDE expression
    (56) expression -> expression . MOD expression
    (59) expression -> expression . BINAND expression
    (60) expression -> expression . BINOR expression
    (61) expression -> expression . BINXOR expression
    (63) expression -> expression . LT expression
    (64) expression -> expression . GT expression
    (65) expression -> expression . DOUBLEEQ expression
    (66) expression -> expression . NOTEQUAL expression
    (67) expression -> expression . LTE expression
    (68) expression -> expression . GTE expression
    (69) expression -> expression . STREQUAL expression
    (70) expression -> expression . STRNEQUAL expression
    (71) expression -> expression . AND expression
    (72) expression -> expression . OR expression
    (73) expression -> expression . LSHIFT expression
    (74) expression -> expression . RSHIFT expression
    (75) expression -> expression . URSHIFT expression

    RIGHTBRACKET    shift and go to state 177
    PLUS            shift and go to state 95
    MINUS           shift and go to state 89
    INTO            shift and go to state 99
    DIVIDE          shift and go to state 98
    MOD             shift and go to state 105
    BINAND          shift and go to state 91
    BINOR           shift and go to state 102
    BINXOR          shift and go to state 96
    LT              shift and go to state 94
    GT              shift and go to state 97
    DOUBLEEQ        shift and go to state 84
    NOTEQUAL        shift and go to state 85
    LTE             shift and go to state 100
    GTE             shift and go to state 90
    STREQUAL        shift and go to state 93
    STRNEQUAL       shift and go to state 86
    AND             shift and go to state 101
    OR              shift and go to state 104
    LSHIFT          shift and go to state 87
    RSHIFT          shift and go to state 88
    URSHIFT         shift and go to state 103


state 123

    (41) reassignment -> ID OREQ expression .
    (52) expression -> expression . PLUS expression
    (53) expression -> expression . MINUS expression
    (54) expression -> expression . INTO expression
    (55) expression -> expression . DIVIDE expression
    (56) expression -> expression . MOD expression
    (59) expression -> expression . BINAND expression
    (60) expression -> expression . BINOR expression
    (61) expression -> expression . BINXOR expression
    (63) expression -> expression . LT expression
    (64) expression -> expression . GT expression
    (65) expression -> expression . DOUBLEEQ expression
    (66) expression -> expression . NOTEQUAL expression
    (67) expression -> expression . LTE expression
    (68) expression -> expression . GTE expression
    (69) expression -> expression . STREQUAL expression
    (70) expression -> expression . STRNEQUAL expression
    (71) expression -> expression . AND expression
    (72) expression -> expression . OR expression
    (73) expression -> expression . LSHIFT expression
    (74) expression -> expression . RSHIFT expression
    (75) expression -> expression . URSHIFT expression

    SEMICOLON       reduce using rule 41 (reassignment -> ID OREQ expression .)
    RIGHTPAREN      reduce using rule 41 (reassignment -> ID OREQ expression .)
    COMMA           reduce using rule 41 (reassignment -> ID OREQ expression .)
    PLUS            shift and go to state 95
    MINUS           shift and go to state 89
    INTO            shift and go to state 99
    DIVIDE          shift and go to state 98
    MOD             shift and go to state 105
    BINAND          shift and go to state 91
    BINOR           shift and go to state 102
    BINXOR          shift and go to state 96
    LT              shift and go to state 94
    GT              shift and go to state 97
    DOUBLEEQ        shift and go to state 84
    NOTEQUAL        shift and go to state 85
    LTE             shift and go to state 100
    GTE             shift and go to state 90
    STREQUAL        shift and go to state 93
    STRNEQUAL       shift and go to state 86
    AND             shift and go to state 101
    OR              shift and go to state 104
    LSHIFT          shift and go to state 87
    RSHIFT          shift and go to state 88
    URSHIFT         shift and go to state 103


state 124

    (34) reassignment -> ID DIVEQ expression .
    (52) expression -> expression . PLUS expression
    (53) expression -> expression . MINUS expression
    (54) expression -> expression . INTO expression
    (55) expression -> expression . DIVIDE expression
    (56) expression -> expression . MOD expression
    (59) expression -> expression . BINAND expression
    (60) expression -> expression . BINOR expression
    (61) expression -> expression . BINXOR expression
    (63) expression -> expression . LT expression
    (64) expression -> expression . GT expression
    (65) expression -> expression . DOUBLEEQ expression
    (66) expression -> expression . NOTEQUAL expression
    (67) expression -> expression . LTE expression
    (68) expression -> expression . GTE expression
    (69) expression -> expression . STREQUAL expression
    (70) expression -> expression . STRNEQUAL expression
    (71) expression -> expression . AND expression
    (72) expression -> expression . OR expression
    (73) expression -> expression . LSHIFT expression
    (74) expression -> expression . RSHIFT expression
    (75) expression -> expression . URSHIFT expression

    SEMICOLON       reduce using rule 34 (reassignment -> ID DIVEQ expression .)
    RIGHTPAREN      reduce using rule 34 (reassignment -> ID DIVEQ expression .)
    COMMA           reduce using rule 34 (reassignment -> ID DIVEQ expression .)
    PLUS            shift and go to state 95
    MINUS           shift and go to state 89
    INTO            shift and go to state 99
    DIVIDE          shift and go to state 98
    MOD             shift and go to state 105
    BINAND          shift and go to state 91
    BINOR           shift and go to state 102
    BINXOR          shift and go to state 96
    LT              shift and go to state 94
    GT              shift and go to state 97
    DOUBLEEQ        shift and go to state 84
    NOTEQUAL        shift and go to state 85
    LTE             shift and go to state 100
    GTE             shift and go to state 90
    STREQUAL        shift and go to state 93
    STRNEQUAL       shift and go to state 86
    AND             shift and go to state 101
    OR              shift and go to state 104
    LSHIFT          shift and go to state 87
    RSHIFT          shift and go to state 88
    URSHIFT         shift and go to state 103


state 125

    (37) reassignment -> ID LSHIFTEQ expression .
    (52) expression -> expression . PLUS expression
    (53) expression -> expression . MINUS expression
    (54) expression -> expression . INTO expression
    (55) expression -> expression . DIVIDE expression
    (56) expression -> expression . MOD expression
    (59) expression -> expression . BINAND expression
    (60) expression -> expression . BINOR expression
    (61) expression -> expression . BINXOR expression
    (63) expression -> expression . LT expression
    (64) expression -> expression . GT expression
    (65) expression -> expression . DOUBLEEQ expression
    (66) expression -> expression . NOTEQUAL expression
    (67) expression -> expression . LTE expression
    (68) expression -> expression . GTE expression
    (69) expression -> expression . STREQUAL expression
    (70) expression -> expression . STRNEQUAL expression
    (71) expression -> expression . AND expression
    (72) expression -> expression . OR expression
    (73) expression -> expression . LSHIFT expression
    (74) expression -> expression . RSHIFT expression
    (75) expression -> expression . URSHIFT expression

    SEMICOLON       reduce using rule 37 (reassignment -> ID LSHIFTEQ expression .)
    RIGHTPAREN      reduce using rule 37 (reassignment -> ID LSHIFTEQ expression .)
    COMMA           reduce using rule 37 (reassignment -> ID LSHIFTEQ expression .)
    PLUS            shift and go to state 95
    MINUS           shift and go to state 89
    INTO            shift and go to state 99
    DIVIDE          shift and go to state 98
    MOD             shift and go to state 105
    BINAND          shift and go to state 91
    BINOR           shift and go to state 102
    BINXOR          shift and go to state 96
    LT              shift and go to state 94
    GT              shift and go to state 97
    DOUBLEEQ        shift and go to state 84
    NOTEQUAL        shift and go to state 85
    LTE             shift and go to state 100
    GTE             shift and go to state 90
    STREQUAL        shift and go to state 93
    STRNEQUAL       shift and go to state 86
    AND             shift and go to state 101
    OR              shift and go to state 104
    LSHIFT          shift and go to state 87
    RSHIFT          shift and go to state 88
    URSHIFT         shift and go to state 103


state 126

    (96) functioncall -> ID LEFTPAREN argList . RIGHTPAREN

    RIGHTPAREN      shift and go to state 178


state 127

    (97) argList -> expression .
    (98) argList -> expression . COMMA argList
    (52) expression -> expression . PLUS expression
    (53) expression -> expression . MINUS expression
    (54) expression -> expression . INTO expression
    (55) expression -> expression . DIVIDE expression
    (56) expression -> expression . MOD expression
    (59) expression -> expression . BINAND expression
    (60) expression -> expression . BINOR expression
    (61) expression -> expression . BINXOR expression
    (63) expression -> expression . LT expression
    (64) expression -> expression . GT expression
    (65) expression -> expression . DOUBLEEQ expression
    (66) expression -> expression . NOTEQUAL expression
    (67) expression -> expression . LTE expression
    (68) expression -> expression . GTE expression
    (69) expression -> expression . STREQUAL expression
    (70) expression -> expression . STRNEQUAL expression
    (71) expression -> expression . AND expression
    (72) expression -> expression . OR expression
    (73) expression -> expression . LSHIFT expression
    (74) expression -> expression . RSHIFT expression
    (75) expression -> expression . URSHIFT expression

    RIGHTPAREN      reduce using rule 97 (argList -> expression .)
    COMMA           shift and go to state 179
    PLUS            shift and go to state 95
    MINUS           shift and go to state 89
    INTO            shift and go to state 99
    DIVIDE          shift and go to state 98
    MOD             shift and go to state 105
    BINAND          shift and go to state 91
    BINOR           shift and go to state 102
    BINXOR          shift and go to state 96
    LT              shift and go to state 94
    GT              shift and go to state 97
    DOUBLEEQ        shift and go to state 84
    NOTEQUAL        shift and go to state 85
    LTE             shift and go to state 100
    GTE             shift and go to state 90
    STREQUAL        shift and go to state 93
    STRNEQUAL       shift and go to state 86
    AND             shift and go to state 101
    OR              shift and go to state 104
    LSHIFT          shift and go to state 87
    RSHIFT          shift and go to state 88
    URSHIFT         shift and go to state 103


state 128

    (40) reassignment -> ID ANDEQ expression .
    (52) expression -> expression . PLUS expression
    (53) expression -> expression . MINUS expression
    (54) expression -> expression . INTO expression
    (55) expression -> expression . DIVIDE expression
    (56) expression -> expression . MOD expression
    (59) expression -> expression . BINAND expression
    (60) expression -> expression . BINOR expression
    (61) expression -> expression . BINXOR expression
    (63) expression -> expression . LT expression
    (64) expression -> expression . GT expression
    (65) expression -> expression . DOUBLEEQ expression
    (66) expression -> expression . NOTEQUAL expression
    (67) expression -> expression . LTE expression
    (68) expression -> expression . GTE expression
    (69) expression -> expression . STREQUAL expression
    (70) expression -> expression . STRNEQUAL expression
    (71) expression -> expression . AND expression
    (72) expression -> expression . OR expression
    (73) expression -> expression . LSHIFT expression
    (74) expression -> expression . RSHIFT expression
    (75) expression -> expression . URSHIFT expression

    SEMICOLON       reduce using rule 40 (reassignment -> ID ANDEQ expression .)
    RIGHTPAREN      reduce using rule 40 (reassignment -> ID ANDEQ expression .)
    COMMA           reduce using rule 40 (reassignment -> ID ANDEQ expression .)
    PLUS            shift and go to state 95
    MINUS           shift and go to state 89
    INTO            shift and go to state 99
    DIVIDE          shift and go to state 98
    MOD             shift and go to state 105
    BINAND          shift and go to state 91
    BINOR           shift and go to state 102
    BINXOR          shift and go to state 96
    LT              shift and go to state 94
    GT              shift and go to state 97
    DOUBLEEQ        shift and go to state 84
    NOTEQUAL        shift and go to state 85
    LTE             shift and go to state 100
    GTE             shift and go to state 90
    STREQUAL        shift and go to state 93
    STRNEQUAL       shift and go to state 86
    AND             shift and go to state 101
    OR              shift and go to state 104
    LSHIFT          shift and go to state 87
    RSHIFT          shift and go to state 88
    URSHIFT         shift and go to state 103


state 129

    (82) expression -> ID .
    (96) functioncall -> ID . LEFTPAREN argList RIGHTPAREN
    (89) arrayCall -> ID . reference
    (90) reference -> . LEFTBRACKET expression RIGHTBRACKET reference
    (91) reference -> . LEFTBRACKET expression RIGHTBRACKET

    PLUS            reduce using rule 82 (expression -> ID .)
    MINUS           reduce using rule 82 (expression -> ID .)
    INTO            reduce using rule 82 (expression -> ID .)
    DIVIDE          reduce using rule 82 (expression -> ID .)
    MOD             reduce using rule 82 (expression -> ID .)
    BINAND          reduce using rule 82 (expression -> ID .)
    BINOR           reduce using rule 82 (expression -> ID .)
    BINXOR          reduce using rule 82 (expression -> ID .)
    LT              reduce using rule 82 (expression -> ID .)
    GT              reduce using rule 82 (expression -> ID .)
    DOUBLEEQ        reduce using rule 82 (expression -> ID .)
    NOTEQUAL        reduce using rule 82 (expression -> ID .)
    LTE             reduce using rule 82 (expression -> ID .)
    GTE             reduce using rule 82 (expression -> ID .)
    STREQUAL        reduce using rule 82 (expression -> ID .)
    STRNEQUAL       reduce using rule 82 (expression -> ID .)
    AND             reduce using rule 82 (expression -> ID .)
    OR              reduce using rule 82 (expression -> ID .)
    LSHIFT          reduce using rule 82 (expression -> ID .)
    RSHIFT          reduce using rule 82 (expression -> ID .)
    URSHIFT         reduce using rule 82 (expression -> ID .)
    SEMICOLON       reduce using rule 82 (expression -> ID .)
    LEFTPAREN       shift and go to state 72
    LEFTBRACKET     shift and go to state 68

    reference                      shift and go to state 60

state 130

    (30) reassignment -> ID EQ expression .
    (52) expression -> expression . PLUS expression
    (53) expression -> expression . MINUS expression
    (54) expression -> expression . INTO expression
    (55) expression -> expression . DIVIDE expression
    (56) expression -> expression . MOD expression
    (59) expression -> expression . BINAND expression
    (60) expression -> expression . BINOR expression
    (61) expression -> expression . BINXOR expression
    (63) expression -> expression . LT expression
    (64) expression -> expression . GT expression
    (65) expression -> expression . DOUBLEEQ expression
    (66) expression -> expression . NOTEQUAL expression
    (67) expression -> expression . LTE expression
    (68) expression -> expression . GTE expression
    (69) expression -> expression . STREQUAL expression
    (70) expression -> expression . STRNEQUAL expression
    (71) expression -> expression . AND expression
    (72) expression -> expression . OR expression
    (73) expression -> expression . LSHIFT expression
    (74) expression -> expression . RSHIFT expression
    (75) expression -> expression . URSHIFT expression

    SEMICOLON       reduce using rule 30 (reassignment -> ID EQ expression .)
    RIGHTPAREN      reduce using rule 30 (reassignment -> ID EQ expression .)
    COMMA           reduce using rule 30 (reassignment -> ID EQ expression .)
    PLUS            shift and go to state 95
    MINUS           shift and go to state 89
    INTO            shift and go to state 99
    DIVIDE          shift and go to state 98
    MOD             shift and go to state 105
    BINAND          shift and go to state 91
    BINOR           shift and go to state 102
    BINXOR          shift and go to state 96
    LT              shift and go to state 94
    GT              shift and go to state 97
    DOUBLEEQ        shift and go to state 84
    NOTEQUAL        shift and go to state 85
    LTE             shift and go to state 100
    GTE             shift and go to state 90
    STREQUAL        shift and go to state 93
    STRNEQUAL       shift and go to state 86
    AND             shift and go to state 101
    OR              shift and go to state 104
    LSHIFT          shift and go to state 87
    RSHIFT          shift and go to state 88
    URSHIFT         shift and go to state 103


state 131

    (84) funcstmt -> ID EQ functioncall .

    SEMICOLON       reduce using rule 84 (funcstmt -> ID EQ functioncall .)


state 132

    (38) reassignment -> ID RSHIFTEQ expression .
    (52) expression -> expression . PLUS expression
    (53) expression -> expression . MINUS expression
    (54) expression -> expression . INTO expression
    (55) expression -> expression . DIVIDE expression
    (56) expression -> expression . MOD expression
    (59) expression -> expression . BINAND expression
    (60) expression -> expression . BINOR expression
    (61) expression -> expression . BINXOR expression
    (63) expression -> expression . LT expression
    (64) expression -> expression . GT expression
    (65) expression -> expression . DOUBLEEQ expression
    (66) expression -> expression . NOTEQUAL expression
    (67) expression -> expression . LTE expression
    (68) expression -> expression . GTE expression
    (69) expression -> expression . STREQUAL expression
    (70) expression -> expression . STRNEQUAL expression
    (71) expression -> expression . AND expression
    (72) expression -> expression . OR expression
    (73) expression -> expression . LSHIFT expression
    (74) expression -> expression . RSHIFT expression
    (75) expression -> expression . URSHIFT expression

    SEMICOLON       reduce using rule 38 (reassignment -> ID RSHIFTEQ expression .)
    RIGHTPAREN      reduce using rule 38 (reassignment -> ID RSHIFTEQ expression .)
    COMMA           reduce using rule 38 (reassignment -> ID RSHIFTEQ expression .)
    PLUS            shift and go to state 95
    MINUS           shift and go to state 89
    INTO            shift and go to state 99
    DIVIDE          shift and go to state 98
    MOD             shift and go to state 105
    BINAND          shift and go to state 91
    BINOR           shift and go to state 102
    BINXOR          shift and go to state 96
    LT              shift and go to state 94
    GT              shift and go to state 97
    DOUBLEEQ        shift and go to state 84
    NOTEQUAL        shift and go to state 85
    LTE             shift and go to state 100
    GTE             shift and go to state 90
    STREQUAL        shift and go to state 93
    STRNEQUAL       shift and go to state 86
    AND             shift and go to state 101
    OR              shift and go to state 104
    LSHIFT          shift and go to state 87
    RSHIFT          shift and go to state 88
    URSHIFT         shift and go to state 103


state 133

    (31) reassignment -> ID PLUSEQ expression .
    (52) expression -> expression . PLUS expression
    (53) expression -> expression . MINUS expression
    (54) expression -> expression . INTO expression
    (55) expression -> expression . DIVIDE expression
    (56) expression -> expression . MOD expression
    (59) expression -> expression . BINAND expression
    (60) expression -> expression . BINOR expression
    (61) expression -> expression . BINXOR expression
    (63) expression -> expression . LT expression
    (64) expression -> expression . GT expression
    (65) expression -> expression . DOUBLEEQ expression
    (66) expression -> expression . NOTEQUAL expression
    (67) expression -> expression . LTE expression
    (68) expression -> expression . GTE expression
    (69) expression -> expression . STREQUAL expression
    (70) expression -> expression . STRNEQUAL expression
    (71) expression -> expression . AND expression
    (72) expression -> expression . OR expression
    (73) expression -> expression . LSHIFT expression
    (74) expression -> expression . RSHIFT expression
    (75) expression -> expression . URSHIFT expression

    SEMICOLON       reduce using rule 31 (reassignment -> ID PLUSEQ expression .)
    RIGHTPAREN      reduce using rule 31 (reassignment -> ID PLUSEQ expression .)
    COMMA           reduce using rule 31 (reassignment -> ID PLUSEQ expression .)
    PLUS            shift and go to state 95
    MINUS           shift and go to state 89
    INTO            shift and go to state 99
    DIVIDE          shift and go to state 98
    MOD             shift and go to state 105
    BINAND          shift and go to state 91
    BINOR           shift and go to state 102
    BINXOR          shift and go to state 96
    LT              shift and go to state 94
    GT              shift and go to state 97
    DOUBLEEQ        shift and go to state 84
    NOTEQUAL        shift and go to state 85
    LTE             shift and go to state 100
    GTE             shift and go to state 90
    STREQUAL        shift and go to state 93
    STRNEQUAL       shift and go to state 86
    AND             shift and go to state 101
    OR              shift and go to state 104
    LSHIFT          shift and go to state 87
    RSHIFT          shift and go to state 88
    URSHIFT         shift and go to state 103


state 134

    (3) block -> LEFTBRACE blockmarker statements . RIGHTBRACE

    RIGHTBRACE      shift and go to state 180


state 135

    (106) whileloop -> WHILE whileblockstart LEFTPAREN expression . RIGHTPAREN exprcheck block whileblockend
    (52) expression -> expression . PLUS expression
    (53) expression -> expression . MINUS expression
    (54) expression -> expression . INTO expression
    (55) expression -> expression . DIVIDE expression
    (56) expression -> expression . MOD expression
    (59) expression -> expression . BINAND expression
    (60) expression -> expression . BINOR expression
    (61) expression -> expression . BINXOR expression
    (63) expression -> expression . LT expression
    (64) expression -> expression . GT expression
    (65) expression -> expression . DOUBLEEQ expression
    (66) expression -> expression . NOTEQUAL expression
    (67) expression -> expression . LTE expression
    (68) expression -> expression . GTE expression
    (69) expression -> expression . STREQUAL expression
    (70) expression -> expression . STRNEQUAL expression
    (71) expression -> expression . AND expression
    (72) expression -> expression . OR expression
    (73) expression -> expression . LSHIFT expression
    (74) expression -> expression . RSHIFT expression
    (75) expression -> expression . URSHIFT expression

    RIGHTPAREN      shift and go to state 181
    PLUS            shift and go to state 95
    MINUS           shift and go to state 89
    INTO            shift and go to state 99
    DIVIDE          shift and go to state 98
    MOD             shift and go to state 105
    BINAND          shift and go to state 91
    BINOR           shift and go to state 102
    BINXOR          shift and go to state 96
    LT              shift and go to state 94
    GT              shift and go to state 97
    DOUBLEEQ        shift and go to state 84
    NOTEQUAL        shift and go to state 85
    LTE             shift and go to state 100
    GTE             shift and go to state 90
    STREQUAL        shift and go to state 93
    STRNEQUAL       shift and go to state 86
    AND             shift and go to state 101
    OR              shift and go to state 104
    LSHIFT          shift and go to state 87
    RSHIFT          shift and go to state 88
    URSHIFT         shift and go to state 103


state 136

    (78) expression -> EVAL LEFTPAREN expression . RIGHTPAREN
    (52) expression -> expression . PLUS expression
    (53) expression -> expression . MINUS expression
    (54) expression -> expression . INTO expression
    (55) expression -> expression . DIVIDE expression
    (56) expression -> expression . MOD expression
    (59) expression -> expression . BINAND expression
    (60) expression -> expression . BINOR expression
    (61) expression -> expression . BINXOR expression
    (63) expression -> expression . LT expression
    (64) expression -> expression . GT expression
    (65) expression -> expression . DOUBLEEQ expression
    (66) expression -> expression . NOTEQUAL expression
    (67) expression -> expression . LTE expression
    (68) expression -> expression . GTE expression
    (69) expression -> expression . STREQUAL expression
    (70) expression -> expression . STRNEQUAL expression
    (71) expression -> expression . AND expression
    (72) expression -> expression . OR expression
    (73) expression -> expression . LSHIFT expression
    (74) expression -> expression . RSHIFT expression
    (75) expression -> expression . URSHIFT expression

    RIGHTPAREN      shift and go to state 182
    PLUS            shift and go to state 95
    MINUS           shift and go to state 89
    INTO            shift and go to state 99
    DIVIDE          shift and go to state 98
    MOD             shift and go to state 105
    BINAND          shift and go to state 91
    BINOR           shift and go to state 102
    BINXOR          shift and go to state 96
    LT              shift and go to state 94
    GT              shift and go to state 97
    DOUBLEEQ        shift and go to state 84
    NOTEQUAL        shift and go to state 85
    LTE             shift and go to state 100
    GTE             shift and go to state 90
    STREQUAL        shift and go to state 93
    STRNEQUAL       shift and go to state 86
    AND             shift and go to state 101
    OR              shift and go to state 104
    LSHIFT          shift and go to state 87
    RSHIFT          shift and go to state 88
    URSHIFT         shift and go to state 103


state 137

    (76) expression -> EVAL LEFTPAREN evalmarker . statements evalendmarker RIGHTPAREN
    (5) statements -> . statement statements
    (6) statements -> . statement
    (7) statement -> . assignment SEMICOLON
    (8) statement -> . declaration SEMICOLON
    (9) statement -> . reassignment SEMICOLON
    (10) statement -> . BREAK SEMICOLON
    (11) statement -> . CONTINUE SEMICOLON
    (12) statement -> . funcstmt SEMICOLON
    (13) statement -> . if
    (14) statement -> . ifelse
    (15) statement -> . whileloop
    (16) statement -> . funcdecl
    (17) statement -> . forloop
    (18) statement -> . reassignmentarray SEMICOLON
    (19) statement -> . RETURN expression SEMICOLON
    (20) statement -> . CONSOLE DOT LOG LEFTPAREN printList RIGHTPAREN SEMICOLON
    (26) assignment -> . VAR assignlist
    (23) declaration -> . VAR declarationList
    (30) reassignment -> . ID EQ expression
    (31) reassignment -> . ID PLUSEQ expression
    (32) reassignment -> . ID MINUSEQ expression
    (33) reassignment -> . ID INTOEQ expression
    (34) reassignment -> . ID DIVEQ expression
    (35) reassignment -> . ID INCR
    (36) reassignment -> . ID DECR
    (37) reassignment -> . ID LSHIFTEQ expression
    (38) reassignment -> . ID RSHIFTEQ expression
    (39) reassignment -> . ID URSHIFTEQ expression
    (40) reassignment -> . ID ANDEQ expression
    (41) reassignment -> . ID OREQ expression
    (42) reassignment -> . ID XOREQ expression
    (43) reassignment -> . ID MODEQ expression
    (44) reassignment -> . LEFTPAREN reassignment RIGHTPAREN
    (84) funcstmt -> . ID EQ functioncall
    (85) funcstmt -> . functioncall
    (86) funcstmt -> . VAR ID EQ functioncall
    (100) if -> . IF expression ifelseblock block ifblockend
    (102) ifelse -> . IF expression ifelseblock block ELSE elseblock block elseblockend
    (106) whileloop -> . WHILE whileblockstart LEFTPAREN expression RIGHTPAREN exprcheck block whileblockend
    (128) funcdecl -> . FUNCTION ID funcscopedefnormal LEFTPAREN funcarghead RIGHTPAREN funblock endfunc
    (131) funcdecl -> . VAR ID EQ FUNCTION funcscopedef LEFTPAREN funcarghead RIGHTPAREN funblock SEMICOLON endfuncdecl
    (110) forloop -> . FOR scope_marker LEFTPAREN initialization SEMICOLON forexpr_marker for_expr forcheck_marker SEMICOLON increment increment_marker RIGHTPAREN forblock endblock_marker
    (88) reassignmentarray -> . arrayCall EQ expression
    (96) functioncall -> . ID LEFTPAREN argList RIGHTPAREN
    (89) arrayCall -> . ID reference

    BREAK           shift and go to state 25
    CONTINUE        shift and go to state 26
    RETURN          shift and go to state 3
    CONSOLE         shift and go to state 17
    VAR             shift and go to state 21
    ID              shift and go to state 22
    LEFTPAREN       shift and go to state 19
    IF              shift and go to state 14
    WHILE           shift and go to state 2
    FUNCTION        shift and go to state 15
    FOR             shift and go to state 7

    statements                     shift and go to state 183
    if                             shift and go to state 4
    whileloop                      shift and go to state 5
    funcstmt                       shift and go to state 8
    arrayCall                      shift and go to state 9
    reassignmentarray              shift and go to state 11
    ifelse                         shift and go to state 12
    statement                      shift and go to state 13
    forloop                        shift and go to state 16
    assignment                     shift and go to state 18
    declaration                    shift and go to state 20
    funcdecl                       shift and go to state 24
    reassignment                   shift and go to state 6
    functioncall                   shift and go to state 27

state 138

    (77) expression -> EVAL LEFTPAREN block . RIGHTPAREN

    RIGHTPAREN      shift and go to state 184


state 139

    (57) expression -> LEFTPAREN expression RIGHTPAREN .

    PLUS            reduce using rule 57 (expression -> LEFTPAREN expression RIGHTPAREN .)
    MINUS           reduce using rule 57 (expression -> LEFTPAREN expression RIGHTPAREN .)
    INTO            reduce using rule 57 (expression -> LEFTPAREN expression RIGHTPAREN .)
    DIVIDE          reduce using rule 57 (expression -> LEFTPAREN expression RIGHTPAREN .)
    MOD             reduce using rule 57 (expression -> LEFTPAREN expression RIGHTPAREN .)
    BINAND          reduce using rule 57 (expression -> LEFTPAREN expression RIGHTPAREN .)
    BINOR           reduce using rule 57 (expression -> LEFTPAREN expression RIGHTPAREN .)
    BINXOR          reduce using rule 57 (expression -> LEFTPAREN expression RIGHTPAREN .)
    LT              reduce using rule 57 (expression -> LEFTPAREN expression RIGHTPAREN .)
    GT              reduce using rule 57 (expression -> LEFTPAREN expression RIGHTPAREN .)
    DOUBLEEQ        reduce using rule 57 (expression -> LEFTPAREN expression RIGHTPAREN .)
    NOTEQUAL        reduce using rule 57 (expression -> LEFTPAREN expression RIGHTPAREN .)
    LTE             reduce using rule 57 (expression -> LEFTPAREN expression RIGHTPAREN .)
    GTE             reduce using rule 57 (expression -> LEFTPAREN expression RIGHTPAREN .)
    STREQUAL        reduce using rule 57 (expression -> LEFTPAREN expression RIGHTPAREN .)
    STRNEQUAL       reduce using rule 57 (expression -> LEFTPAREN expression RIGHTPAREN .)
    AND             reduce using rule 57 (expression -> LEFTPAREN expression RIGHTPAREN .)
    OR              reduce using rule 57 (expression -> LEFTPAREN expression RIGHTPAREN .)
    LSHIFT          reduce using rule 57 (expression -> LEFTPAREN expression RIGHTPAREN .)
    RSHIFT          reduce using rule 57 (expression -> LEFTPAREN expression RIGHTPAREN .)
    URSHIFT         reduce using rule 57 (expression -> LEFTPAREN expression RIGHTPAREN .)
    SEMICOLON       reduce using rule 57 (expression -> LEFTPAREN expression RIGHTPAREN .)
    RIGHTPAREN      reduce using rule 57 (expression -> LEFTPAREN expression RIGHTPAREN .)
    COMMA           reduce using rule 57 (expression -> LEFTPAREN expression RIGHTPAREN .)
    LEFTBRACE       reduce using rule 57 (expression -> LEFTPAREN expression RIGHTPAREN .)
    RIGHTBRACKET    reduce using rule 57 (expression -> LEFTPAREN expression RIGHTPAREN .)


state 140

    (65) expression -> expression DOUBLEEQ expression .
    (52) expression -> expression . PLUS expression
    (53) expression -> expression . MINUS expression
    (54) expression -> expression . INTO expression
    (55) expression -> expression . DIVIDE expression
    (56) expression -> expression . MOD expression
    (59) expression -> expression . BINAND expression
    (60) expression -> expression . BINOR expression
    (61) expression -> expression . BINXOR expression
    (63) expression -> expression . LT expression
    (64) expression -> expression . GT expression
    (65) expression -> expression . DOUBLEEQ expression
    (66) expression -> expression . NOTEQUAL expression
    (67) expression -> expression . LTE expression
    (68) expression -> expression . GTE expression
    (69) expression -> expression . STREQUAL expression
    (70) expression -> expression . STRNEQUAL expression
    (71) expression -> expression . AND expression
    (72) expression -> expression . OR expression
    (73) expression -> expression . LSHIFT expression
    (74) expression -> expression . RSHIFT expression
    (75) expression -> expression . URSHIFT expression

    BINAND          reduce using rule 65 (expression -> expression DOUBLEEQ expression .)
    BINOR           reduce using rule 65 (expression -> expression DOUBLEEQ expression .)
    BINXOR          reduce using rule 65 (expression -> expression DOUBLEEQ expression .)
    DOUBLEEQ        reduce using rule 65 (expression -> expression DOUBLEEQ expression .)
    NOTEQUAL        reduce using rule 65 (expression -> expression DOUBLEEQ expression .)
    STREQUAL        reduce using rule 65 (expression -> expression DOUBLEEQ expression .)
    STRNEQUAL       reduce using rule 65 (expression -> expression DOUBLEEQ expression .)
    AND             reduce using rule 65 (expression -> expression DOUBLEEQ expression .)
    OR              reduce using rule 65 (expression -> expression DOUBLEEQ expression .)
    SEMICOLON       reduce using rule 65 (expression -> expression DOUBLEEQ expression .)
    RIGHTPAREN      reduce using rule 65 (expression -> expression DOUBLEEQ expression .)
    COMMA           reduce using rule 65 (expression -> expression DOUBLEEQ expression .)
    LEFTBRACE       reduce using rule 65 (expression -> expression DOUBLEEQ expression .)
    RIGHTBRACKET    reduce using rule 65 (expression -> expression DOUBLEEQ expression .)
    PLUS            shift and go to state 95
    MINUS           shift and go to state 89
    INTO            shift and go to state 99
    DIVIDE          shift and go to state 98
    MOD             shift and go to state 105
    LT              shift and go to state 94
    GT              shift and go to state 97
    LTE             shift and go to state 100
    GTE             shift and go to state 90
    LSHIFT          shift and go to state 87
    RSHIFT          shift and go to state 88
    URSHIFT         shift and go to state 103

  ! PLUS            [ reduce using rule 65 (expression -> expression DOUBLEEQ expression .) ]
  ! MINUS           [ reduce using rule 65 (expression -> expression DOUBLEEQ expression .) ]
  ! INTO            [ reduce using rule 65 (expression -> expression DOUBLEEQ expression .) ]
  ! DIVIDE          [ reduce using rule 65 (expression -> expression DOUBLEEQ expression .) ]
  ! MOD             [ reduce using rule 65 (expression -> expression DOUBLEEQ expression .) ]
  ! LT              [ reduce using rule 65 (expression -> expression DOUBLEEQ expression .) ]
  ! GT              [ reduce using rule 65 (expression -> expression DOUBLEEQ expression .) ]
  ! LTE             [ reduce using rule 65 (expression -> expression DOUBLEEQ expression .) ]
  ! GTE             [ reduce using rule 65 (expression -> expression DOUBLEEQ expression .) ]
  ! LSHIFT          [ reduce using rule 65 (expression -> expression DOUBLEEQ expression .) ]
  ! RSHIFT          [ reduce using rule 65 (expression -> expression DOUBLEEQ expression .) ]
  ! URSHIFT         [ reduce using rule 65 (expression -> expression DOUBLEEQ expression .) ]
  ! BINAND          [ shift and go to state 91 ]
  ! BINOR           [ shift and go to state 102 ]
  ! BINXOR          [ shift and go to state 96 ]
  ! DOUBLEEQ        [ shift and go to state 84 ]
  ! NOTEQUAL        [ shift and go to state 85 ]
  ! STREQUAL        [ shift and go to state 93 ]
  ! STRNEQUAL       [ shift and go to state 86 ]
  ! AND             [ shift and go to state 101 ]
  ! OR              [ shift and go to state 104 ]


state 141

    (66) expression -> expression NOTEQUAL expression .
    (52) expression -> expression . PLUS expression
    (53) expression -> expression . MINUS expression
    (54) expression -> expression . INTO expression
    (55) expression -> expression . DIVIDE expression
    (56) expression -> expression . MOD expression
    (59) expression -> expression . BINAND expression
    (60) expression -> expression . BINOR expression
    (61) expression -> expression . BINXOR expression
    (63) expression -> expression . LT expression
    (64) expression -> expression . GT expression
    (65) expression -> expression . DOUBLEEQ expression
    (66) expression -> expression . NOTEQUAL expression
    (67) expression -> expression . LTE expression
    (68) expression -> expression . GTE expression
    (69) expression -> expression . STREQUAL expression
    (70) expression -> expression . STRNEQUAL expression
    (71) expression -> expression . AND expression
    (72) expression -> expression . OR expression
    (73) expression -> expression . LSHIFT expression
    (74) expression -> expression . RSHIFT expression
    (75) expression -> expression . URSHIFT expression

    BINAND          reduce using rule 66 (expression -> expression NOTEQUAL expression .)
    BINOR           reduce using rule 66 (expression -> expression NOTEQUAL expression .)
    BINXOR          reduce using rule 66 (expression -> expression NOTEQUAL expression .)
    DOUBLEEQ        reduce using rule 66 (expression -> expression NOTEQUAL expression .)
    NOTEQUAL        reduce using rule 66 (expression -> expression NOTEQUAL expression .)
    STREQUAL        reduce using rule 66 (expression -> expression NOTEQUAL expression .)
    STRNEQUAL       reduce using rule 66 (expression -> expression NOTEQUAL expression .)
    AND             reduce using rule 66 (expression -> expression NOTEQUAL expression .)
    OR              reduce using rule 66 (expression -> expression NOTEQUAL expression .)
    SEMICOLON       reduce using rule 66 (expression -> expression NOTEQUAL expression .)
    RIGHTPAREN      reduce using rule 66 (expression -> expression NOTEQUAL expression .)
    COMMA           reduce using rule 66 (expression -> expression NOTEQUAL expression .)
    LEFTBRACE       reduce using rule 66 (expression -> expression NOTEQUAL expression .)
    RIGHTBRACKET    reduce using rule 66 (expression -> expression NOTEQUAL expression .)
    PLUS            shift and go to state 95
    MINUS           shift and go to state 89
    INTO            shift and go to state 99
    DIVIDE          shift and go to state 98
    MOD             shift and go to state 105
    LT              shift and go to state 94
    GT              shift and go to state 97
    LTE             shift and go to state 100
    GTE             shift and go to state 90
    LSHIFT          shift and go to state 87
    RSHIFT          shift and go to state 88
    URSHIFT         shift and go to state 103

  ! PLUS            [ reduce using rule 66 (expression -> expression NOTEQUAL expression .) ]
  ! MINUS           [ reduce using rule 66 (expression -> expression NOTEQUAL expression .) ]
  ! INTO            [ reduce using rule 66 (expression -> expression NOTEQUAL expression .) ]
  ! DIVIDE          [ reduce using rule 66 (expression -> expression NOTEQUAL expression .) ]
  ! MOD             [ reduce using rule 66 (expression -> expression NOTEQUAL expression .) ]
  ! LT              [ reduce using rule 66 (expression -> expression NOTEQUAL expression .) ]
  ! GT              [ reduce using rule 66 (expression -> expression NOTEQUAL expression .) ]
  ! LTE             [ reduce using rule 66 (expression -> expression NOTEQUAL expression .) ]
  ! GTE             [ reduce using rule 66 (expression -> expression NOTEQUAL expression .) ]
  ! LSHIFT          [ reduce using rule 66 (expression -> expression NOTEQUAL expression .) ]
  ! RSHIFT          [ reduce using rule 66 (expression -> expression NOTEQUAL expression .) ]
  ! URSHIFT         [ reduce using rule 66 (expression -> expression NOTEQUAL expression .) ]
  ! BINAND          [ shift and go to state 91 ]
  ! BINOR           [ shift and go to state 102 ]
  ! BINXOR          [ shift and go to state 96 ]
  ! DOUBLEEQ        [ shift and go to state 84 ]
  ! NOTEQUAL        [ shift and go to state 85 ]
  ! STREQUAL        [ shift and go to state 93 ]
  ! STRNEQUAL       [ shift and go to state 86 ]
  ! AND             [ shift and go to state 101 ]
  ! OR              [ shift and go to state 104 ]


state 142

    (70) expression -> expression STRNEQUAL expression .
    (52) expression -> expression . PLUS expression
    (53) expression -> expression . MINUS expression
    (54) expression -> expression . INTO expression
    (55) expression -> expression . DIVIDE expression
    (56) expression -> expression . MOD expression
    (59) expression -> expression . BINAND expression
    (60) expression -> expression . BINOR expression
    (61) expression -> expression . BINXOR expression
    (63) expression -> expression . LT expression
    (64) expression -> expression . GT expression
    (65) expression -> expression . DOUBLEEQ expression
    (66) expression -> expression . NOTEQUAL expression
    (67) expression -> expression . LTE expression
    (68) expression -> expression . GTE expression
    (69) expression -> expression . STREQUAL expression
    (70) expression -> expression . STRNEQUAL expression
    (71) expression -> expression . AND expression
    (72) expression -> expression . OR expression
    (73) expression -> expression . LSHIFT expression
    (74) expression -> expression . RSHIFT expression
    (75) expression -> expression . URSHIFT expression

    BINAND          reduce using rule 70 (expression -> expression STRNEQUAL expression .)
    BINOR           reduce using rule 70 (expression -> expression STRNEQUAL expression .)
    BINXOR          reduce using rule 70 (expression -> expression STRNEQUAL expression .)
    DOUBLEEQ        reduce using rule 70 (expression -> expression STRNEQUAL expression .)
    NOTEQUAL        reduce using rule 70 (expression -> expression STRNEQUAL expression .)
    STREQUAL        reduce using rule 70 (expression -> expression STRNEQUAL expression .)
    STRNEQUAL       reduce using rule 70 (expression -> expression STRNEQUAL expression .)
    AND             reduce using rule 70 (expression -> expression STRNEQUAL expression .)
    OR              reduce using rule 70 (expression -> expression STRNEQUAL expression .)
    SEMICOLON       reduce using rule 70 (expression -> expression STRNEQUAL expression .)
    RIGHTPAREN      reduce using rule 70 (expression -> expression STRNEQUAL expression .)
    COMMA           reduce using rule 70 (expression -> expression STRNEQUAL expression .)
    LEFTBRACE       reduce using rule 70 (expression -> expression STRNEQUAL expression .)
    RIGHTBRACKET    reduce using rule 70 (expression -> expression STRNEQUAL expression .)
    PLUS            shift and go to state 95
    MINUS           shift and go to state 89
    INTO            shift and go to state 99
    DIVIDE          shift and go to state 98
    MOD             shift and go to state 105
    LT              shift and go to state 94
    GT              shift and go to state 97
    LTE             shift and go to state 100
    GTE             shift and go to state 90
    LSHIFT          shift and go to state 87
    RSHIFT          shift and go to state 88
    URSHIFT         shift and go to state 103

  ! PLUS            [ reduce using rule 70 (expression -> expression STRNEQUAL expression .) ]
  ! MINUS           [ reduce using rule 70 (expression -> expression STRNEQUAL expression .) ]
  ! INTO            [ reduce using rule 70 (expression -> expression STRNEQUAL expression .) ]
  ! DIVIDE          [ reduce using rule 70 (expression -> expression STRNEQUAL expression .) ]
  ! MOD             [ reduce using rule 70 (expression -> expression STRNEQUAL expression .) ]
  ! LT              [ reduce using rule 70 (expression -> expression STRNEQUAL expression .) ]
  ! GT              [ reduce using rule 70 (expression -> expression STRNEQUAL expression .) ]
  ! LTE             [ reduce using rule 70 (expression -> expression STRNEQUAL expression .) ]
  ! GTE             [ reduce using rule 70 (expression -> expression STRNEQUAL expression .) ]
  ! LSHIFT          [ reduce using rule 70 (expression -> expression STRNEQUAL expression .) ]
  ! RSHIFT          [ reduce using rule 70 (expression -> expression STRNEQUAL expression .) ]
  ! URSHIFT         [ reduce using rule 70 (expression -> expression STRNEQUAL expression .) ]
  ! BINAND          [ shift and go to state 91 ]
  ! BINOR           [ shift and go to state 102 ]
  ! BINXOR          [ shift and go to state 96 ]
  ! DOUBLEEQ        [ shift and go to state 84 ]
  ! NOTEQUAL        [ shift and go to state 85 ]
  ! STREQUAL        [ shift and go to state 93 ]
  ! STRNEQUAL       [ shift and go to state 86 ]
  ! AND             [ shift and go to state 101 ]
  ! OR              [ shift and go to state 104 ]


state 143

    (73) expression -> expression LSHIFT expression .
    (52) expression -> expression . PLUS expression
    (53) expression -> expression . MINUS expression
    (54) expression -> expression . INTO expression
    (55) expression -> expression . DIVIDE expression
    (56) expression -> expression . MOD expression
    (59) expression -> expression . BINAND expression
    (60) expression -> expression . BINOR expression
    (61) expression -> expression . BINXOR expression
    (63) expression -> expression . LT expression
    (64) expression -> expression . GT expression
    (65) expression -> expression . DOUBLEEQ expression
    (66) expression -> expression . NOTEQUAL expression
    (67) expression -> expression . LTE expression
    (68) expression -> expression . GTE expression
    (69) expression -> expression . STREQUAL expression
    (70) expression -> expression . STRNEQUAL expression
    (71) expression -> expression . AND expression
    (72) expression -> expression . OR expression
    (73) expression -> expression . LSHIFT expression
    (74) expression -> expression . RSHIFT expression
    (75) expression -> expression . URSHIFT expression

    BINAND          reduce using rule 73 (expression -> expression LSHIFT expression .)
    BINOR           reduce using rule 73 (expression -> expression LSHIFT expression .)
    BINXOR          reduce using rule 73 (expression -> expression LSHIFT expression .)
    LT              reduce using rule 73 (expression -> expression LSHIFT expression .)
    GT              reduce using rule 73 (expression -> expression LSHIFT expression .)
    DOUBLEEQ        reduce using rule 73 (expression -> expression LSHIFT expression .)
    NOTEQUAL        reduce using rule 73 (expression -> expression LSHIFT expression .)
    LTE             reduce using rule 73 (expression -> expression LSHIFT expression .)
    GTE             reduce using rule 73 (expression -> expression LSHIFT expression .)
    STREQUAL        reduce using rule 73 (expression -> expression LSHIFT expression .)
    STRNEQUAL       reduce using rule 73 (expression -> expression LSHIFT expression .)
    AND             reduce using rule 73 (expression -> expression LSHIFT expression .)
    OR              reduce using rule 73 (expression -> expression LSHIFT expression .)
    LSHIFT          reduce using rule 73 (expression -> expression LSHIFT expression .)
    RSHIFT          reduce using rule 73 (expression -> expression LSHIFT expression .)
    URSHIFT         reduce using rule 73 (expression -> expression LSHIFT expression .)
    SEMICOLON       reduce using rule 73 (expression -> expression LSHIFT expression .)
    RIGHTPAREN      reduce using rule 73 (expression -> expression LSHIFT expression .)
    COMMA           reduce using rule 73 (expression -> expression LSHIFT expression .)
    LEFTBRACE       reduce using rule 73 (expression -> expression LSHIFT expression .)
    RIGHTBRACKET    reduce using rule 73 (expression -> expression LSHIFT expression .)
    PLUS            shift and go to state 95
    MINUS           shift and go to state 89
    INTO            shift and go to state 99
    DIVIDE          shift and go to state 98
    MOD             shift and go to state 105

  ! PLUS            [ reduce using rule 73 (expression -> expression LSHIFT expression .) ]
  ! MINUS           [ reduce using rule 73 (expression -> expression LSHIFT expression .) ]
  ! INTO            [ reduce using rule 73 (expression -> expression LSHIFT expression .) ]
  ! DIVIDE          [ reduce using rule 73 (expression -> expression LSHIFT expression .) ]
  ! MOD             [ reduce using rule 73 (expression -> expression LSHIFT expression .) ]
  ! BINAND          [ shift and go to state 91 ]
  ! BINOR           [ shift and go to state 102 ]
  ! BINXOR          [ shift and go to state 96 ]
  ! LT              [ shift and go to state 94 ]
  ! GT              [ shift and go to state 97 ]
  ! DOUBLEEQ        [ shift and go to state 84 ]
  ! NOTEQUAL        [ shift and go to state 85 ]
  ! LTE             [ shift and go to state 100 ]
  ! GTE             [ shift and go to state 90 ]
  ! STREQUAL        [ shift and go to state 93 ]
  ! STRNEQUAL       [ shift and go to state 86 ]
  ! AND             [ shift and go to state 101 ]
  ! OR              [ shift and go to state 104 ]
  ! LSHIFT          [ shift and go to state 87 ]
  ! RSHIFT          [ shift and go to state 88 ]
  ! URSHIFT         [ shift and go to state 103 ]


state 144

    (74) expression -> expression RSHIFT expression .
    (52) expression -> expression . PLUS expression
    (53) expression -> expression . MINUS expression
    (54) expression -> expression . INTO expression
    (55) expression -> expression . DIVIDE expression
    (56) expression -> expression . MOD expression
    (59) expression -> expression . BINAND expression
    (60) expression -> expression . BINOR expression
    (61) expression -> expression . BINXOR expression
    (63) expression -> expression . LT expression
    (64) expression -> expression . GT expression
    (65) expression -> expression . DOUBLEEQ expression
    (66) expression -> expression . NOTEQUAL expression
    (67) expression -> expression . LTE expression
    (68) expression -> expression . GTE expression
    (69) expression -> expression . STREQUAL expression
    (70) expression -> expression . STRNEQUAL expression
    (71) expression -> expression . AND expression
    (72) expression -> expression . OR expression
    (73) expression -> expression . LSHIFT expression
    (74) expression -> expression . RSHIFT expression
    (75) expression -> expression . URSHIFT expression

    BINAND          reduce using rule 74 (expression -> expression RSHIFT expression .)
    BINOR           reduce using rule 74 (expression -> expression RSHIFT expression .)
    BINXOR          reduce using rule 74 (expression -> expression RSHIFT expression .)
    LT              reduce using rule 74 (expression -> expression RSHIFT expression .)
    GT              reduce using rule 74 (expression -> expression RSHIFT expression .)
    DOUBLEEQ        reduce using rule 74 (expression -> expression RSHIFT expression .)
    NOTEQUAL        reduce using rule 74 (expression -> expression RSHIFT expression .)
    LTE             reduce using rule 74 (expression -> expression RSHIFT expression .)
    GTE             reduce using rule 74 (expression -> expression RSHIFT expression .)
    STREQUAL        reduce using rule 74 (expression -> expression RSHIFT expression .)
    STRNEQUAL       reduce using rule 74 (expression -> expression RSHIFT expression .)
    AND             reduce using rule 74 (expression -> expression RSHIFT expression .)
    OR              reduce using rule 74 (expression -> expression RSHIFT expression .)
    LSHIFT          reduce using rule 74 (expression -> expression RSHIFT expression .)
    RSHIFT          reduce using rule 74 (expression -> expression RSHIFT expression .)
    URSHIFT         reduce using rule 74 (expression -> expression RSHIFT expression .)
    SEMICOLON       reduce using rule 74 (expression -> expression RSHIFT expression .)
    RIGHTPAREN      reduce using rule 74 (expression -> expression RSHIFT expression .)
    COMMA           reduce using rule 74 (expression -> expression RSHIFT expression .)
    LEFTBRACE       reduce using rule 74 (expression -> expression RSHIFT expression .)
    RIGHTBRACKET    reduce using rule 74 (expression -> expression RSHIFT expression .)
    PLUS            shift and go to state 95
    MINUS           shift and go to state 89
    INTO            shift and go to state 99
    DIVIDE          shift and go to state 98
    MOD             shift and go to state 105

  ! PLUS            [ reduce using rule 74 (expression -> expression RSHIFT expression .) ]
  ! MINUS           [ reduce using rule 74 (expression -> expression RSHIFT expression .) ]
  ! INTO            [ reduce using rule 74 (expression -> expression RSHIFT expression .) ]
  ! DIVIDE          [ reduce using rule 74 (expression -> expression RSHIFT expression .) ]
  ! MOD             [ reduce using rule 74 (expression -> expression RSHIFT expression .) ]
  ! BINAND          [ shift and go to state 91 ]
  ! BINOR           [ shift and go to state 102 ]
  ! BINXOR          [ shift and go to state 96 ]
  ! LT              [ shift and go to state 94 ]
  ! GT              [ shift and go to state 97 ]
  ! DOUBLEEQ        [ shift and go to state 84 ]
  ! NOTEQUAL        [ shift and go to state 85 ]
  ! LTE             [ shift and go to state 100 ]
  ! GTE             [ shift and go to state 90 ]
  ! STREQUAL        [ shift and go to state 93 ]
  ! STRNEQUAL       [ shift and go to state 86 ]
  ! AND             [ shift and go to state 101 ]
  ! OR              [ shift and go to state 104 ]
  ! LSHIFT          [ shift and go to state 87 ]
  ! RSHIFT          [ shift and go to state 88 ]
  ! URSHIFT         [ shift and go to state 103 ]


state 145

    (53) expression -> expression MINUS expression .
    (52) expression -> expression . PLUS expression
    (53) expression -> expression . MINUS expression
    (54) expression -> expression . INTO expression
    (55) expression -> expression . DIVIDE expression
    (56) expression -> expression . MOD expression
    (59) expression -> expression . BINAND expression
    (60) expression -> expression . BINOR expression
    (61) expression -> expression . BINXOR expression
    (63) expression -> expression . LT expression
    (64) expression -> expression . GT expression
    (65) expression -> expression . DOUBLEEQ expression
    (66) expression -> expression . NOTEQUAL expression
    (67) expression -> expression . LTE expression
    (68) expression -> expression . GTE expression
    (69) expression -> expression . STREQUAL expression
    (70) expression -> expression . STRNEQUAL expression
    (71) expression -> expression . AND expression
    (72) expression -> expression . OR expression
    (73) expression -> expression . LSHIFT expression
    (74) expression -> expression . RSHIFT expression
    (75) expression -> expression . URSHIFT expression

    PLUS            reduce using rule 53 (expression -> expression MINUS expression .)
    MINUS           reduce using rule 53 (expression -> expression MINUS expression .)
    BINAND          reduce using rule 53 (expression -> expression MINUS expression .)
    BINOR           reduce using rule 53 (expression -> expression MINUS expression .)
    BINXOR          reduce using rule 53 (expression -> expression MINUS expression .)
    LT              reduce using rule 53 (expression -> expression MINUS expression .)
    GT              reduce using rule 53 (expression -> expression MINUS expression .)
    DOUBLEEQ        reduce using rule 53 (expression -> expression MINUS expression .)
    NOTEQUAL        reduce using rule 53 (expression -> expression MINUS expression .)
    LTE             reduce using rule 53 (expression -> expression MINUS expression .)
    GTE             reduce using rule 53 (expression -> expression MINUS expression .)
    STREQUAL        reduce using rule 53 (expression -> expression MINUS expression .)
    STRNEQUAL       reduce using rule 53 (expression -> expression MINUS expression .)
    AND             reduce using rule 53 (expression -> expression MINUS expression .)
    OR              reduce using rule 53 (expression -> expression MINUS expression .)
    LSHIFT          reduce using rule 53 (expression -> expression MINUS expression .)
    RSHIFT          reduce using rule 53 (expression -> expression MINUS expression .)
    URSHIFT         reduce using rule 53 (expression -> expression MINUS expression .)
    SEMICOLON       reduce using rule 53 (expression -> expression MINUS expression .)
    RIGHTPAREN      reduce using rule 53 (expression -> expression MINUS expression .)
    COMMA           reduce using rule 53 (expression -> expression MINUS expression .)
    LEFTBRACE       reduce using rule 53 (expression -> expression MINUS expression .)
    RIGHTBRACKET    reduce using rule 53 (expression -> expression MINUS expression .)
    INTO            shift and go to state 99
    DIVIDE          shift and go to state 98
    MOD             shift and go to state 105

  ! INTO            [ reduce using rule 53 (expression -> expression MINUS expression .) ]
  ! DIVIDE          [ reduce using rule 53 (expression -> expression MINUS expression .) ]
  ! MOD             [ reduce using rule 53 (expression -> expression MINUS expression .) ]
  ! PLUS            [ shift and go to state 95 ]
  ! MINUS           [ shift and go to state 89 ]
  ! BINAND          [ shift and go to state 91 ]
  ! BINOR           [ shift and go to state 102 ]
  ! BINXOR          [ shift and go to state 96 ]
  ! LT              [ shift and go to state 94 ]
  ! GT              [ shift and go to state 97 ]
  ! DOUBLEEQ        [ shift and go to state 84 ]
  ! NOTEQUAL        [ shift and go to state 85 ]
  ! LTE             [ shift and go to state 100 ]
  ! GTE             [ shift and go to state 90 ]
  ! STREQUAL        [ shift and go to state 93 ]
  ! STRNEQUAL       [ shift and go to state 86 ]
  ! AND             [ shift and go to state 101 ]
  ! OR              [ shift and go to state 104 ]
  ! LSHIFT          [ shift and go to state 87 ]
  ! RSHIFT          [ shift and go to state 88 ]
  ! URSHIFT         [ shift and go to state 103 ]


state 146

    (68) expression -> expression GTE expression .
    (52) expression -> expression . PLUS expression
    (53) expression -> expression . MINUS expression
    (54) expression -> expression . INTO expression
    (55) expression -> expression . DIVIDE expression
    (56) expression -> expression . MOD expression
    (59) expression -> expression . BINAND expression
    (60) expression -> expression . BINOR expression
    (61) expression -> expression . BINXOR expression
    (63) expression -> expression . LT expression
    (64) expression -> expression . GT expression
    (65) expression -> expression . DOUBLEEQ expression
    (66) expression -> expression . NOTEQUAL expression
    (67) expression -> expression . LTE expression
    (68) expression -> expression . GTE expression
    (69) expression -> expression . STREQUAL expression
    (70) expression -> expression . STRNEQUAL expression
    (71) expression -> expression . AND expression
    (72) expression -> expression . OR expression
    (73) expression -> expression . LSHIFT expression
    (74) expression -> expression . RSHIFT expression
    (75) expression -> expression . URSHIFT expression

    BINAND          reduce using rule 68 (expression -> expression GTE expression .)
    BINOR           reduce using rule 68 (expression -> expression GTE expression .)
    BINXOR          reduce using rule 68 (expression -> expression GTE expression .)
    LT              reduce using rule 68 (expression -> expression GTE expression .)
    GT              reduce using rule 68 (expression -> expression GTE expression .)
    DOUBLEEQ        reduce using rule 68 (expression -> expression GTE expression .)
    NOTEQUAL        reduce using rule 68 (expression -> expression GTE expression .)
    LTE             reduce using rule 68 (expression -> expression GTE expression .)
    GTE             reduce using rule 68 (expression -> expression GTE expression .)
    STREQUAL        reduce using rule 68 (expression -> expression GTE expression .)
    STRNEQUAL       reduce using rule 68 (expression -> expression GTE expression .)
    AND             reduce using rule 68 (expression -> expression GTE expression .)
    OR              reduce using rule 68 (expression -> expression GTE expression .)
    SEMICOLON       reduce using rule 68 (expression -> expression GTE expression .)
    RIGHTPAREN      reduce using rule 68 (expression -> expression GTE expression .)
    COMMA           reduce using rule 68 (expression -> expression GTE expression .)
    LEFTBRACE       reduce using rule 68 (expression -> expression GTE expression .)
    RIGHTBRACKET    reduce using rule 68 (expression -> expression GTE expression .)
    PLUS            shift and go to state 95
    MINUS           shift and go to state 89
    INTO            shift and go to state 99
    DIVIDE          shift and go to state 98
    MOD             shift and go to state 105
    LSHIFT          shift and go to state 87
    RSHIFT          shift and go to state 88
    URSHIFT         shift and go to state 103

  ! PLUS            [ reduce using rule 68 (expression -> expression GTE expression .) ]
  ! MINUS           [ reduce using rule 68 (expression -> expression GTE expression .) ]
  ! INTO            [ reduce using rule 68 (expression -> expression GTE expression .) ]
  ! DIVIDE          [ reduce using rule 68 (expression -> expression GTE expression .) ]
  ! MOD             [ reduce using rule 68 (expression -> expression GTE expression .) ]
  ! LSHIFT          [ reduce using rule 68 (expression -> expression GTE expression .) ]
  ! RSHIFT          [ reduce using rule 68 (expression -> expression GTE expression .) ]
  ! URSHIFT         [ reduce using rule 68 (expression -> expression GTE expression .) ]
  ! BINAND          [ shift and go to state 91 ]
  ! BINOR           [ shift and go to state 102 ]
  ! BINXOR          [ shift and go to state 96 ]
  ! LT              [ shift and go to state 94 ]
  ! GT              [ shift and go to state 97 ]
  ! DOUBLEEQ        [ shift and go to state 84 ]
  ! NOTEQUAL        [ shift and go to state 85 ]
  ! LTE             [ shift and go to state 100 ]
  ! GTE             [ shift and go to state 90 ]
  ! STREQUAL        [ shift and go to state 93 ]
  ! STRNEQUAL       [ shift and go to state 86 ]
  ! AND             [ shift and go to state 101 ]
  ! OR              [ shift and go to state 104 ]


state 147

    (59) expression -> expression BINAND expression .
    (52) expression -> expression . PLUS expression
    (53) expression -> expression . MINUS expression
    (54) expression -> expression . INTO expression
    (55) expression -> expression . DIVIDE expression
    (56) expression -> expression . MOD expression
    (59) expression -> expression . BINAND expression
    (60) expression -> expression . BINOR expression
    (61) expression -> expression . BINXOR expression
    (63) expression -> expression . LT expression
    (64) expression -> expression . GT expression
    (65) expression -> expression . DOUBLEEQ expression
    (66) expression -> expression . NOTEQUAL expression
    (67) expression -> expression . LTE expression
    (68) expression -> expression . GTE expression
    (69) expression -> expression . STREQUAL expression
    (70) expression -> expression . STRNEQUAL expression
    (71) expression -> expression . AND expression
    (72) expression -> expression . OR expression
    (73) expression -> expression . LSHIFT expression
    (74) expression -> expression . RSHIFT expression
    (75) expression -> expression . URSHIFT expression

    BINAND          reduce using rule 59 (expression -> expression BINAND expression .)
    BINOR           reduce using rule 59 (expression -> expression BINAND expression .)
    BINXOR          reduce using rule 59 (expression -> expression BINAND expression .)
    AND             reduce using rule 59 (expression -> expression BINAND expression .)
    OR              reduce using rule 59 (expression -> expression BINAND expression .)
    SEMICOLON       reduce using rule 59 (expression -> expression BINAND expression .)
    RIGHTPAREN      reduce using rule 59 (expression -> expression BINAND expression .)
    COMMA           reduce using rule 59 (expression -> expression BINAND expression .)
    LEFTBRACE       reduce using rule 59 (expression -> expression BINAND expression .)
    RIGHTBRACKET    reduce using rule 59 (expression -> expression BINAND expression .)
    PLUS            shift and go to state 95
    MINUS           shift and go to state 89
    INTO            shift and go to state 99
    DIVIDE          shift and go to state 98
    MOD             shift and go to state 105
    LT              shift and go to state 94
    GT              shift and go to state 97
    DOUBLEEQ        shift and go to state 84
    NOTEQUAL        shift and go to state 85
    LTE             shift and go to state 100
    GTE             shift and go to state 90
    STREQUAL        shift and go to state 93
    STRNEQUAL       shift and go to state 86
    LSHIFT          shift and go to state 87
    RSHIFT          shift and go to state 88
    URSHIFT         shift and go to state 103

  ! PLUS            [ reduce using rule 59 (expression -> expression BINAND expression .) ]
  ! MINUS           [ reduce using rule 59 (expression -> expression BINAND expression .) ]
  ! INTO            [ reduce using rule 59 (expression -> expression BINAND expression .) ]
  ! DIVIDE          [ reduce using rule 59 (expression -> expression BINAND expression .) ]
  ! MOD             [ reduce using rule 59 (expression -> expression BINAND expression .) ]
  ! LT              [ reduce using rule 59 (expression -> expression BINAND expression .) ]
  ! GT              [ reduce using rule 59 (expression -> expression BINAND expression .) ]
  ! DOUBLEEQ        [ reduce using rule 59 (expression -> expression BINAND expression .) ]
  ! NOTEQUAL        [ reduce using rule 59 (expression -> expression BINAND expression .) ]
  ! LTE             [ reduce using rule 59 (expression -> expression BINAND expression .) ]
  ! GTE             [ reduce using rule 59 (expression -> expression BINAND expression .) ]
  ! STREQUAL        [ reduce using rule 59 (expression -> expression BINAND expression .) ]
  ! STRNEQUAL       [ reduce using rule 59 (expression -> expression BINAND expression .) ]
  ! LSHIFT          [ reduce using rule 59 (expression -> expression BINAND expression .) ]
  ! RSHIFT          [ reduce using rule 59 (expression -> expression BINAND expression .) ]
  ! URSHIFT         [ reduce using rule 59 (expression -> expression BINAND expression .) ]
  ! BINAND          [ shift and go to state 91 ]
  ! BINOR           [ shift and go to state 102 ]
  ! BINXOR          [ shift and go to state 96 ]
  ! AND             [ shift and go to state 101 ]
  ! OR              [ shift and go to state 104 ]


state 148

    (69) expression -> expression STREQUAL expression .
    (52) expression -> expression . PLUS expression
    (53) expression -> expression . MINUS expression
    (54) expression -> expression . INTO expression
    (55) expression -> expression . DIVIDE expression
    (56) expression -> expression . MOD expression
    (59) expression -> expression . BINAND expression
    (60) expression -> expression . BINOR expression
    (61) expression -> expression . BINXOR expression
    (63) expression -> expression . LT expression
    (64) expression -> expression . GT expression
    (65) expression -> expression . DOUBLEEQ expression
    (66) expression -> expression . NOTEQUAL expression
    (67) expression -> expression . LTE expression
    (68) expression -> expression . GTE expression
    (69) expression -> expression . STREQUAL expression
    (70) expression -> expression . STRNEQUAL expression
    (71) expression -> expression . AND expression
    (72) expression -> expression . OR expression
    (73) expression -> expression . LSHIFT expression
    (74) expression -> expression . RSHIFT expression
    (75) expression -> expression . URSHIFT expression

    BINAND          reduce using rule 69 (expression -> expression STREQUAL expression .)
    BINOR           reduce using rule 69 (expression -> expression STREQUAL expression .)
    BINXOR          reduce using rule 69 (expression -> expression STREQUAL expression .)
    DOUBLEEQ        reduce using rule 69 (expression -> expression STREQUAL expression .)
    NOTEQUAL        reduce using rule 69 (expression -> expression STREQUAL expression .)
    STREQUAL        reduce using rule 69 (expression -> expression STREQUAL expression .)
    STRNEQUAL       reduce using rule 69 (expression -> expression STREQUAL expression .)
    AND             reduce using rule 69 (expression -> expression STREQUAL expression .)
    OR              reduce using rule 69 (expression -> expression STREQUAL expression .)
    SEMICOLON       reduce using rule 69 (expression -> expression STREQUAL expression .)
    RIGHTPAREN      reduce using rule 69 (expression -> expression STREQUAL expression .)
    COMMA           reduce using rule 69 (expression -> expression STREQUAL expression .)
    LEFTBRACE       reduce using rule 69 (expression -> expression STREQUAL expression .)
    RIGHTBRACKET    reduce using rule 69 (expression -> expression STREQUAL expression .)
    PLUS            shift and go to state 95
    MINUS           shift and go to state 89
    INTO            shift and go to state 99
    DIVIDE          shift and go to state 98
    MOD             shift and go to state 105
    LT              shift and go to state 94
    GT              shift and go to state 97
    LTE             shift and go to state 100
    GTE             shift and go to state 90
    LSHIFT          shift and go to state 87
    RSHIFT          shift and go to state 88
    URSHIFT         shift and go to state 103

  ! PLUS            [ reduce using rule 69 (expression -> expression STREQUAL expression .) ]
  ! MINUS           [ reduce using rule 69 (expression -> expression STREQUAL expression .) ]
  ! INTO            [ reduce using rule 69 (expression -> expression STREQUAL expression .) ]
  ! DIVIDE          [ reduce using rule 69 (expression -> expression STREQUAL expression .) ]
  ! MOD             [ reduce using rule 69 (expression -> expression STREQUAL expression .) ]
  ! LT              [ reduce using rule 69 (expression -> expression STREQUAL expression .) ]
  ! GT              [ reduce using rule 69 (expression -> expression STREQUAL expression .) ]
  ! LTE             [ reduce using rule 69 (expression -> expression STREQUAL expression .) ]
  ! GTE             [ reduce using rule 69 (expression -> expression STREQUAL expression .) ]
  ! LSHIFT          [ reduce using rule 69 (expression -> expression STREQUAL expression .) ]
  ! RSHIFT          [ reduce using rule 69 (expression -> expression STREQUAL expression .) ]
  ! URSHIFT         [ reduce using rule 69 (expression -> expression STREQUAL expression .) ]
  ! BINAND          [ shift and go to state 91 ]
  ! BINOR           [ shift and go to state 102 ]
  ! BINXOR          [ shift and go to state 96 ]
  ! DOUBLEEQ        [ shift and go to state 84 ]
  ! NOTEQUAL        [ shift and go to state 85 ]
  ! STREQUAL        [ shift and go to state 93 ]
  ! STRNEQUAL       [ shift and go to state 86 ]
  ! AND             [ shift and go to state 101 ]
  ! OR              [ shift and go to state 104 ]


state 149

    (63) expression -> expression LT expression .
    (52) expression -> expression . PLUS expression
    (53) expression -> expression . MINUS expression
    (54) expression -> expression . INTO expression
    (55) expression -> expression . DIVIDE expression
    (56) expression -> expression . MOD expression
    (59) expression -> expression . BINAND expression
    (60) expression -> expression . BINOR expression
    (61) expression -> expression . BINXOR expression
    (63) expression -> expression . LT expression
    (64) expression -> expression . GT expression
    (65) expression -> expression . DOUBLEEQ expression
    (66) expression -> expression . NOTEQUAL expression
    (67) expression -> expression . LTE expression
    (68) expression -> expression . GTE expression
    (69) expression -> expression . STREQUAL expression
    (70) expression -> expression . STRNEQUAL expression
    (71) expression -> expression . AND expression
    (72) expression -> expression . OR expression
    (73) expression -> expression . LSHIFT expression
    (74) expression -> expression . RSHIFT expression
    (75) expression -> expression . URSHIFT expression

    BINAND          reduce using rule 63 (expression -> expression LT expression .)
    BINOR           reduce using rule 63 (expression -> expression LT expression .)
    BINXOR          reduce using rule 63 (expression -> expression LT expression .)
    LT              reduce using rule 63 (expression -> expression LT expression .)
    GT              reduce using rule 63 (expression -> expression LT expression .)
    DOUBLEEQ        reduce using rule 63 (expression -> expression LT expression .)
    NOTEQUAL        reduce using rule 63 (expression -> expression LT expression .)
    LTE             reduce using rule 63 (expression -> expression LT expression .)
    GTE             reduce using rule 63 (expression -> expression LT expression .)
    STREQUAL        reduce using rule 63 (expression -> expression LT expression .)
    STRNEQUAL       reduce using rule 63 (expression -> expression LT expression .)
    AND             reduce using rule 63 (expression -> expression LT expression .)
    OR              reduce using rule 63 (expression -> expression LT expression .)
    SEMICOLON       reduce using rule 63 (expression -> expression LT expression .)
    RIGHTPAREN      reduce using rule 63 (expression -> expression LT expression .)
    COMMA           reduce using rule 63 (expression -> expression LT expression .)
    LEFTBRACE       reduce using rule 63 (expression -> expression LT expression .)
    RIGHTBRACKET    reduce using rule 63 (expression -> expression LT expression .)
    PLUS            shift and go to state 95
    MINUS           shift and go to state 89
    INTO            shift and go to state 99
    DIVIDE          shift and go to state 98
    MOD             shift and go to state 105
    LSHIFT          shift and go to state 87
    RSHIFT          shift and go to state 88
    URSHIFT         shift and go to state 103

  ! PLUS            [ reduce using rule 63 (expression -> expression LT expression .) ]
  ! MINUS           [ reduce using rule 63 (expression -> expression LT expression .) ]
  ! INTO            [ reduce using rule 63 (expression -> expression LT expression .) ]
  ! DIVIDE          [ reduce using rule 63 (expression -> expression LT expression .) ]
  ! MOD             [ reduce using rule 63 (expression -> expression LT expression .) ]
  ! LSHIFT          [ reduce using rule 63 (expression -> expression LT expression .) ]
  ! RSHIFT          [ reduce using rule 63 (expression -> expression LT expression .) ]
  ! URSHIFT         [ reduce using rule 63 (expression -> expression LT expression .) ]
  ! BINAND          [ shift and go to state 91 ]
  ! BINOR           [ shift and go to state 102 ]
  ! BINXOR          [ shift and go to state 96 ]
  ! LT              [ shift and go to state 94 ]
  ! GT              [ shift and go to state 97 ]
  ! DOUBLEEQ        [ shift and go to state 84 ]
  ! NOTEQUAL        [ shift and go to state 85 ]
  ! LTE             [ shift and go to state 100 ]
  ! GTE             [ shift and go to state 90 ]
  ! STREQUAL        [ shift and go to state 93 ]
  ! STRNEQUAL       [ shift and go to state 86 ]
  ! AND             [ shift and go to state 101 ]
  ! OR              [ shift and go to state 104 ]


state 150

    (52) expression -> expression PLUS expression .
    (52) expression -> expression . PLUS expression
    (53) expression -> expression . MINUS expression
    (54) expression -> expression . INTO expression
    (55) expression -> expression . DIVIDE expression
    (56) expression -> expression . MOD expression
    (59) expression -> expression . BINAND expression
    (60) expression -> expression . BINOR expression
    (61) expression -> expression . BINXOR expression
    (63) expression -> expression . LT expression
    (64) expression -> expression . GT expression
    (65) expression -> expression . DOUBLEEQ expression
    (66) expression -> expression . NOTEQUAL expression
    (67) expression -> expression . LTE expression
    (68) expression -> expression . GTE expression
    (69) expression -> expression . STREQUAL expression
    (70) expression -> expression . STRNEQUAL expression
    (71) expression -> expression . AND expression
    (72) expression -> expression . OR expression
    (73) expression -> expression . LSHIFT expression
    (74) expression -> expression . RSHIFT expression
    (75) expression -> expression . URSHIFT expression

    PLUS            reduce using rule 52 (expression -> expression PLUS expression .)
    MINUS           reduce using rule 52 (expression -> expression PLUS expression .)
    BINAND          reduce using rule 52 (expression -> expression PLUS expression .)
    BINOR           reduce using rule 52 (expression -> expression PLUS expression .)
    BINXOR          reduce using rule 52 (expression -> expression PLUS expression .)
    LT              reduce using rule 52 (expression -> expression PLUS expression .)
    GT              reduce using rule 52 (expression -> expression PLUS expression .)
    DOUBLEEQ        reduce using rule 52 (expression -> expression PLUS expression .)
    NOTEQUAL        reduce using rule 52 (expression -> expression PLUS expression .)
    LTE             reduce using rule 52 (expression -> expression PLUS expression .)
    GTE             reduce using rule 52 (expression -> expression PLUS expression .)
    STREQUAL        reduce using rule 52 (expression -> expression PLUS expression .)
    STRNEQUAL       reduce using rule 52 (expression -> expression PLUS expression .)
    AND             reduce using rule 52 (expression -> expression PLUS expression .)
    OR              reduce using rule 52 (expression -> expression PLUS expression .)
    LSHIFT          reduce using rule 52 (expression -> expression PLUS expression .)
    RSHIFT          reduce using rule 52 (expression -> expression PLUS expression .)
    URSHIFT         reduce using rule 52 (expression -> expression PLUS expression .)
    SEMICOLON       reduce using rule 52 (expression -> expression PLUS expression .)
    RIGHTPAREN      reduce using rule 52 (expression -> expression PLUS expression .)
    COMMA           reduce using rule 52 (expression -> expression PLUS expression .)
    LEFTBRACE       reduce using rule 52 (expression -> expression PLUS expression .)
    RIGHTBRACKET    reduce using rule 52 (expression -> expression PLUS expression .)
    INTO            shift and go to state 99
    DIVIDE          shift and go to state 98
    MOD             shift and go to state 105

  ! INTO            [ reduce using rule 52 (expression -> expression PLUS expression .) ]
  ! DIVIDE          [ reduce using rule 52 (expression -> expression PLUS expression .) ]
  ! MOD             [ reduce using rule 52 (expression -> expression PLUS expression .) ]
  ! PLUS            [ shift and go to state 95 ]
  ! MINUS           [ shift and go to state 89 ]
  ! BINAND          [ shift and go to state 91 ]
  ! BINOR           [ shift and go to state 102 ]
  ! BINXOR          [ shift and go to state 96 ]
  ! LT              [ shift and go to state 94 ]
  ! GT              [ shift and go to state 97 ]
  ! DOUBLEEQ        [ shift and go to state 84 ]
  ! NOTEQUAL        [ shift and go to state 85 ]
  ! LTE             [ shift and go to state 100 ]
  ! GTE             [ shift and go to state 90 ]
  ! STREQUAL        [ shift and go to state 93 ]
  ! STRNEQUAL       [ shift and go to state 86 ]
  ! AND             [ shift and go to state 101 ]
  ! OR              [ shift and go to state 104 ]
  ! LSHIFT          [ shift and go to state 87 ]
  ! RSHIFT          [ shift and go to state 88 ]
  ! URSHIFT         [ shift and go to state 103 ]


state 151

    (61) expression -> expression BINXOR expression .
    (52) expression -> expression . PLUS expression
    (53) expression -> expression . MINUS expression
    (54) expression -> expression . INTO expression
    (55) expression -> expression . DIVIDE expression
    (56) expression -> expression . MOD expression
    (59) expression -> expression . BINAND expression
    (60) expression -> expression . BINOR expression
    (61) expression -> expression . BINXOR expression
    (63) expression -> expression . LT expression
    (64) expression -> expression . GT expression
    (65) expression -> expression . DOUBLEEQ expression
    (66) expression -> expression . NOTEQUAL expression
    (67) expression -> expression . LTE expression
    (68) expression -> expression . GTE expression
    (69) expression -> expression . STREQUAL expression
    (70) expression -> expression . STRNEQUAL expression
    (71) expression -> expression . AND expression
    (72) expression -> expression . OR expression
    (73) expression -> expression . LSHIFT expression
    (74) expression -> expression . RSHIFT expression
    (75) expression -> expression . URSHIFT expression

    BINOR           reduce using rule 61 (expression -> expression BINXOR expression .)
    BINXOR          reduce using rule 61 (expression -> expression BINXOR expression .)
    AND             reduce using rule 61 (expression -> expression BINXOR expression .)
    OR              reduce using rule 61 (expression -> expression BINXOR expression .)
    SEMICOLON       reduce using rule 61 (expression -> expression BINXOR expression .)
    RIGHTPAREN      reduce using rule 61 (expression -> expression BINXOR expression .)
    COMMA           reduce using rule 61 (expression -> expression BINXOR expression .)
    LEFTBRACE       reduce using rule 61 (expression -> expression BINXOR expression .)
    RIGHTBRACKET    reduce using rule 61 (expression -> expression BINXOR expression .)
    PLUS            shift and go to state 95
    MINUS           shift and go to state 89
    INTO            shift and go to state 99
    DIVIDE          shift and go to state 98
    MOD             shift and go to state 105
    BINAND          shift and go to state 91
    LT              shift and go to state 94
    GT              shift and go to state 97
    DOUBLEEQ        shift and go to state 84
    NOTEQUAL        shift and go to state 85
    LTE             shift and go to state 100
    GTE             shift and go to state 90
    STREQUAL        shift and go to state 93
    STRNEQUAL       shift and go to state 86
    LSHIFT          shift and go to state 87
    RSHIFT          shift and go to state 88
    URSHIFT         shift and go to state 103

  ! PLUS            [ reduce using rule 61 (expression -> expression BINXOR expression .) ]
  ! MINUS           [ reduce using rule 61 (expression -> expression BINXOR expression .) ]
  ! INTO            [ reduce using rule 61 (expression -> expression BINXOR expression .) ]
  ! DIVIDE          [ reduce using rule 61 (expression -> expression BINXOR expression .) ]
  ! MOD             [ reduce using rule 61 (expression -> expression BINXOR expression .) ]
  ! BINAND          [ reduce using rule 61 (expression -> expression BINXOR expression .) ]
  ! LT              [ reduce using rule 61 (expression -> expression BINXOR expression .) ]
  ! GT              [ reduce using rule 61 (expression -> expression BINXOR expression .) ]
  ! DOUBLEEQ        [ reduce using rule 61 (expression -> expression BINXOR expression .) ]
  ! NOTEQUAL        [ reduce using rule 61 (expression -> expression BINXOR expression .) ]
  ! LTE             [ reduce using rule 61 (expression -> expression BINXOR expression .) ]
  ! GTE             [ reduce using rule 61 (expression -> expression BINXOR expression .) ]
  ! STREQUAL        [ reduce using rule 61 (expression -> expression BINXOR expression .) ]
  ! STRNEQUAL       [ reduce using rule 61 (expression -> expression BINXOR expression .) ]
  ! LSHIFT          [ reduce using rule 61 (expression -> expression BINXOR expression .) ]
  ! RSHIFT          [ reduce using rule 61 (expression -> expression BINXOR expression .) ]
  ! URSHIFT         [ reduce using rule 61 (expression -> expression BINXOR expression .) ]
  ! BINOR           [ shift and go to state 102 ]
  ! BINXOR          [ shift and go to state 96 ]
  ! AND             [ shift and go to state 101 ]
  ! OR              [ shift and go to state 104 ]


state 152

    (64) expression -> expression GT expression .
    (52) expression -> expression . PLUS expression
    (53) expression -> expression . MINUS expression
    (54) expression -> expression . INTO expression
    (55) expression -> expression . DIVIDE expression
    (56) expression -> expression . MOD expression
    (59) expression -> expression . BINAND expression
    (60) expression -> expression . BINOR expression
    (61) expression -> expression . BINXOR expression
    (63) expression -> expression . LT expression
    (64) expression -> expression . GT expression
    (65) expression -> expression . DOUBLEEQ expression
    (66) expression -> expression . NOTEQUAL expression
    (67) expression -> expression . LTE expression
    (68) expression -> expression . GTE expression
    (69) expression -> expression . STREQUAL expression
    (70) expression -> expression . STRNEQUAL expression
    (71) expression -> expression . AND expression
    (72) expression -> expression . OR expression
    (73) expression -> expression . LSHIFT expression
    (74) expression -> expression . RSHIFT expression
    (75) expression -> expression . URSHIFT expression

    BINAND          reduce using rule 64 (expression -> expression GT expression .)
    BINOR           reduce using rule 64 (expression -> expression GT expression .)
    BINXOR          reduce using rule 64 (expression -> expression GT expression .)
    LT              reduce using rule 64 (expression -> expression GT expression .)
    GT              reduce using rule 64 (expression -> expression GT expression .)
    DOUBLEEQ        reduce using rule 64 (expression -> expression GT expression .)
    NOTEQUAL        reduce using rule 64 (expression -> expression GT expression .)
    LTE             reduce using rule 64 (expression -> expression GT expression .)
    GTE             reduce using rule 64 (expression -> expression GT expression .)
    STREQUAL        reduce using rule 64 (expression -> expression GT expression .)
    STRNEQUAL       reduce using rule 64 (expression -> expression GT expression .)
    AND             reduce using rule 64 (expression -> expression GT expression .)
    OR              reduce using rule 64 (expression -> expression GT expression .)
    SEMICOLON       reduce using rule 64 (expression -> expression GT expression .)
    RIGHTPAREN      reduce using rule 64 (expression -> expression GT expression .)
    COMMA           reduce using rule 64 (expression -> expression GT expression .)
    LEFTBRACE       reduce using rule 64 (expression -> expression GT expression .)
    RIGHTBRACKET    reduce using rule 64 (expression -> expression GT expression .)
    PLUS            shift and go to state 95
    MINUS           shift and go to state 89
    INTO            shift and go to state 99
    DIVIDE          shift and go to state 98
    MOD             shift and go to state 105
    LSHIFT          shift and go to state 87
    RSHIFT          shift and go to state 88
    URSHIFT         shift and go to state 103

  ! PLUS            [ reduce using rule 64 (expression -> expression GT expression .) ]
  ! MINUS           [ reduce using rule 64 (expression -> expression GT expression .) ]
  ! INTO            [ reduce using rule 64 (expression -> expression GT expression .) ]
  ! DIVIDE          [ reduce using rule 64 (expression -> expression GT expression .) ]
  ! MOD             [ reduce using rule 64 (expression -> expression GT expression .) ]
  ! LSHIFT          [ reduce using rule 64 (expression -> expression GT expression .) ]
  ! RSHIFT          [ reduce using rule 64 (expression -> expression GT expression .) ]
  ! URSHIFT         [ reduce using rule 64 (expression -> expression GT expression .) ]
  ! BINAND          [ shift and go to state 91 ]
  ! BINOR           [ shift and go to state 102 ]
  ! BINXOR          [ shift and go to state 96 ]
  ! LT              [ shift and go to state 94 ]
  ! GT              [ shift and go to state 97 ]
  ! DOUBLEEQ        [ shift and go to state 84 ]
  ! NOTEQUAL        [ shift and go to state 85 ]
  ! LTE             [ shift and go to state 100 ]
  ! GTE             [ shift and go to state 90 ]
  ! STREQUAL        [ shift and go to state 93 ]
  ! STRNEQUAL       [ shift and go to state 86 ]
  ! AND             [ shift and go to state 101 ]
  ! OR              [ shift and go to state 104 ]


state 153

    (55) expression -> expression DIVIDE expression .
    (52) expression -> expression . PLUS expression
    (53) expression -> expression . MINUS expression
    (54) expression -> expression . INTO expression
    (55) expression -> expression . DIVIDE expression
    (56) expression -> expression . MOD expression
    (59) expression -> expression . BINAND expression
    (60) expression -> expression . BINOR expression
    (61) expression -> expression . BINXOR expression
    (63) expression -> expression . LT expression
    (64) expression -> expression . GT expression
    (65) expression -> expression . DOUBLEEQ expression
    (66) expression -> expression . NOTEQUAL expression
    (67) expression -> expression . LTE expression
    (68) expression -> expression . GTE expression
    (69) expression -> expression . STREQUAL expression
    (70) expression -> expression . STRNEQUAL expression
    (71) expression -> expression . AND expression
    (72) expression -> expression . OR expression
    (73) expression -> expression . LSHIFT expression
    (74) expression -> expression . RSHIFT expression
    (75) expression -> expression . URSHIFT expression

    PLUS            reduce using rule 55 (expression -> expression DIVIDE expression .)
    MINUS           reduce using rule 55 (expression -> expression DIVIDE expression .)
    INTO            reduce using rule 55 (expression -> expression DIVIDE expression .)
    DIVIDE          reduce using rule 55 (expression -> expression DIVIDE expression .)
    MOD             reduce using rule 55 (expression -> expression DIVIDE expression .)
    BINAND          reduce using rule 55 (expression -> expression DIVIDE expression .)
    BINOR           reduce using rule 55 (expression -> expression DIVIDE expression .)
    BINXOR          reduce using rule 55 (expression -> expression DIVIDE expression .)
    LT              reduce using rule 55 (expression -> expression DIVIDE expression .)
    GT              reduce using rule 55 (expression -> expression DIVIDE expression .)
    DOUBLEEQ        reduce using rule 55 (expression -> expression DIVIDE expression .)
    NOTEQUAL        reduce using rule 55 (expression -> expression DIVIDE expression .)
    LTE             reduce using rule 55 (expression -> expression DIVIDE expression .)
    GTE             reduce using rule 55 (expression -> expression DIVIDE expression .)
    STREQUAL        reduce using rule 55 (expression -> expression DIVIDE expression .)
    STRNEQUAL       reduce using rule 55 (expression -> expression DIVIDE expression .)
    AND             reduce using rule 55 (expression -> expression DIVIDE expression .)
    OR              reduce using rule 55 (expression -> expression DIVIDE expression .)
    LSHIFT          reduce using rule 55 (expression -> expression DIVIDE expression .)
    RSHIFT          reduce using rule 55 (expression -> expression DIVIDE expression .)
    URSHIFT         reduce using rule 55 (expression -> expression DIVIDE expression .)
    SEMICOLON       reduce using rule 55 (expression -> expression DIVIDE expression .)
    RIGHTPAREN      reduce using rule 55 (expression -> expression DIVIDE expression .)
    COMMA           reduce using rule 55 (expression -> expression DIVIDE expression .)
    LEFTBRACE       reduce using rule 55 (expression -> expression DIVIDE expression .)
    RIGHTBRACKET    reduce using rule 55 (expression -> expression DIVIDE expression .)

  ! PLUS            [ shift and go to state 95 ]
  ! MINUS           [ shift and go to state 89 ]
  ! INTO            [ shift and go to state 99 ]
  ! DIVIDE          [ shift and go to state 98 ]
  ! MOD             [ shift and go to state 105 ]
  ! BINAND          [ shift and go to state 91 ]
  ! BINOR           [ shift and go to state 102 ]
  ! BINXOR          [ shift and go to state 96 ]
  ! LT              [ shift and go to state 94 ]
  ! GT              [ shift and go to state 97 ]
  ! DOUBLEEQ        [ shift and go to state 84 ]
  ! NOTEQUAL        [ shift and go to state 85 ]
  ! LTE             [ shift and go to state 100 ]
  ! GTE             [ shift and go to state 90 ]
  ! STREQUAL        [ shift and go to state 93 ]
  ! STRNEQUAL       [ shift and go to state 86 ]
  ! AND             [ shift and go to state 101 ]
  ! OR              [ shift and go to state 104 ]
  ! LSHIFT          [ shift and go to state 87 ]
  ! RSHIFT          [ shift and go to state 88 ]
  ! URSHIFT         [ shift and go to state 103 ]


state 154

    (54) expression -> expression INTO expression .
    (52) expression -> expression . PLUS expression
    (53) expression -> expression . MINUS expression
    (54) expression -> expression . INTO expression
    (55) expression -> expression . DIVIDE expression
    (56) expression -> expression . MOD expression
    (59) expression -> expression . BINAND expression
    (60) expression -> expression . BINOR expression
    (61) expression -> expression . BINXOR expression
    (63) expression -> expression . LT expression
    (64) expression -> expression . GT expression
    (65) expression -> expression . DOUBLEEQ expression
    (66) expression -> expression . NOTEQUAL expression
    (67) expression -> expression . LTE expression
    (68) expression -> expression . GTE expression
    (69) expression -> expression . STREQUAL expression
    (70) expression -> expression . STRNEQUAL expression
    (71) expression -> expression . AND expression
    (72) expression -> expression . OR expression
    (73) expression -> expression . LSHIFT expression
    (74) expression -> expression . RSHIFT expression
    (75) expression -> expression . URSHIFT expression

    PLUS            reduce using rule 54 (expression -> expression INTO expression .)
    MINUS           reduce using rule 54 (expression -> expression INTO expression .)
    INTO            reduce using rule 54 (expression -> expression INTO expression .)
    DIVIDE          reduce using rule 54 (expression -> expression INTO expression .)
    MOD             reduce using rule 54 (expression -> expression INTO expression .)
    BINAND          reduce using rule 54 (expression -> expression INTO expression .)
    BINOR           reduce using rule 54 (expression -> expression INTO expression .)
    BINXOR          reduce using rule 54 (expression -> expression INTO expression .)
    LT              reduce using rule 54 (expression -> expression INTO expression .)
    GT              reduce using rule 54 (expression -> expression INTO expression .)
    DOUBLEEQ        reduce using rule 54 (expression -> expression INTO expression .)
    NOTEQUAL        reduce using rule 54 (expression -> expression INTO expression .)
    LTE             reduce using rule 54 (expression -> expression INTO expression .)
    GTE             reduce using rule 54 (expression -> expression INTO expression .)
    STREQUAL        reduce using rule 54 (expression -> expression INTO expression .)
    STRNEQUAL       reduce using rule 54 (expression -> expression INTO expression .)
    AND             reduce using rule 54 (expression -> expression INTO expression .)
    OR              reduce using rule 54 (expression -> expression INTO expression .)
    LSHIFT          reduce using rule 54 (expression -> expression INTO expression .)
    RSHIFT          reduce using rule 54 (expression -> expression INTO expression .)
    URSHIFT         reduce using rule 54 (expression -> expression INTO expression .)
    SEMICOLON       reduce using rule 54 (expression -> expression INTO expression .)
    RIGHTPAREN      reduce using rule 54 (expression -> expression INTO expression .)
    COMMA           reduce using rule 54 (expression -> expression INTO expression .)
    LEFTBRACE       reduce using rule 54 (expression -> expression INTO expression .)
    RIGHTBRACKET    reduce using rule 54 (expression -> expression INTO expression .)

  ! PLUS            [ shift and go to state 95 ]
  ! MINUS           [ shift and go to state 89 ]
  ! INTO            [ shift and go to state 99 ]
  ! DIVIDE          [ shift and go to state 98 ]
  ! MOD             [ shift and go to state 105 ]
  ! BINAND          [ shift and go to state 91 ]
  ! BINOR           [ shift and go to state 102 ]
  ! BINXOR          [ shift and go to state 96 ]
  ! LT              [ shift and go to state 94 ]
  ! GT              [ shift and go to state 97 ]
  ! DOUBLEEQ        [ shift and go to state 84 ]
  ! NOTEQUAL        [ shift and go to state 85 ]
  ! LTE             [ shift and go to state 100 ]
  ! GTE             [ shift and go to state 90 ]
  ! STREQUAL        [ shift and go to state 93 ]
  ! STRNEQUAL       [ shift and go to state 86 ]
  ! AND             [ shift and go to state 101 ]
  ! OR              [ shift and go to state 104 ]
  ! LSHIFT          [ shift and go to state 87 ]
  ! RSHIFT          [ shift and go to state 88 ]
  ! URSHIFT         [ shift and go to state 103 ]


state 155

    (67) expression -> expression LTE expression .
    (52) expression -> expression . PLUS expression
    (53) expression -> expression . MINUS expression
    (54) expression -> expression . INTO expression
    (55) expression -> expression . DIVIDE expression
    (56) expression -> expression . MOD expression
    (59) expression -> expression . BINAND expression
    (60) expression -> expression . BINOR expression
    (61) expression -> expression . BINXOR expression
    (63) expression -> expression . LT expression
    (64) expression -> expression . GT expression
    (65) expression -> expression . DOUBLEEQ expression
    (66) expression -> expression . NOTEQUAL expression
    (67) expression -> expression . LTE expression
    (68) expression -> expression . GTE expression
    (69) expression -> expression . STREQUAL expression
    (70) expression -> expression . STRNEQUAL expression
    (71) expression -> expression . AND expression
    (72) expression -> expression . OR expression
    (73) expression -> expression . LSHIFT expression
    (74) expression -> expression . RSHIFT expression
    (75) expression -> expression . URSHIFT expression

    BINAND          reduce using rule 67 (expression -> expression LTE expression .)
    BINOR           reduce using rule 67 (expression -> expression LTE expression .)
    BINXOR          reduce using rule 67 (expression -> expression LTE expression .)
    LT              reduce using rule 67 (expression -> expression LTE expression .)
    GT              reduce using rule 67 (expression -> expression LTE expression .)
    DOUBLEEQ        reduce using rule 67 (expression -> expression LTE expression .)
    NOTEQUAL        reduce using rule 67 (expression -> expression LTE expression .)
    LTE             reduce using rule 67 (expression -> expression LTE expression .)
    GTE             reduce using rule 67 (expression -> expression LTE expression .)
    STREQUAL        reduce using rule 67 (expression -> expression LTE expression .)
    STRNEQUAL       reduce using rule 67 (expression -> expression LTE expression .)
    AND             reduce using rule 67 (expression -> expression LTE expression .)
    OR              reduce using rule 67 (expression -> expression LTE expression .)
    SEMICOLON       reduce using rule 67 (expression -> expression LTE expression .)
    RIGHTPAREN      reduce using rule 67 (expression -> expression LTE expression .)
    COMMA           reduce using rule 67 (expression -> expression LTE expression .)
    LEFTBRACE       reduce using rule 67 (expression -> expression LTE expression .)
    RIGHTBRACKET    reduce using rule 67 (expression -> expression LTE expression .)
    PLUS            shift and go to state 95
    MINUS           shift and go to state 89
    INTO            shift and go to state 99
    DIVIDE          shift and go to state 98
    MOD             shift and go to state 105
    LSHIFT          shift and go to state 87
    RSHIFT          shift and go to state 88
    URSHIFT         shift and go to state 103

  ! PLUS            [ reduce using rule 67 (expression -> expression LTE expression .) ]
  ! MINUS           [ reduce using rule 67 (expression -> expression LTE expression .) ]
  ! INTO            [ reduce using rule 67 (expression -> expression LTE expression .) ]
  ! DIVIDE          [ reduce using rule 67 (expression -> expression LTE expression .) ]
  ! MOD             [ reduce using rule 67 (expression -> expression LTE expression .) ]
  ! LSHIFT          [ reduce using rule 67 (expression -> expression LTE expression .) ]
  ! RSHIFT          [ reduce using rule 67 (expression -> expression LTE expression .) ]
  ! URSHIFT         [ reduce using rule 67 (expression -> expression LTE expression .) ]
  ! BINAND          [ shift and go to state 91 ]
  ! BINOR           [ shift and go to state 102 ]
  ! BINXOR          [ shift and go to state 96 ]
  ! LT              [ shift and go to state 94 ]
  ! GT              [ shift and go to state 97 ]
  ! DOUBLEEQ        [ shift and go to state 84 ]
  ! NOTEQUAL        [ shift and go to state 85 ]
  ! LTE             [ shift and go to state 100 ]
  ! GTE             [ shift and go to state 90 ]
  ! STREQUAL        [ shift and go to state 93 ]
  ! STRNEQUAL       [ shift and go to state 86 ]
  ! AND             [ shift and go to state 101 ]
  ! OR              [ shift and go to state 104 ]


state 156

    (71) expression -> expression AND expression .
    (52) expression -> expression . PLUS expression
    (53) expression -> expression . MINUS expression
    (54) expression -> expression . INTO expression
    (55) expression -> expression . DIVIDE expression
    (56) expression -> expression . MOD expression
    (59) expression -> expression . BINAND expression
    (60) expression -> expression . BINOR expression
    (61) expression -> expression . BINXOR expression
    (63) expression -> expression . LT expression
    (64) expression -> expression . GT expression
    (65) expression -> expression . DOUBLEEQ expression
    (66) expression -> expression . NOTEQUAL expression
    (67) expression -> expression . LTE expression
    (68) expression -> expression . GTE expression
    (69) expression -> expression . STREQUAL expression
    (70) expression -> expression . STRNEQUAL expression
    (71) expression -> expression . AND expression
    (72) expression -> expression . OR expression
    (73) expression -> expression . LSHIFT expression
    (74) expression -> expression . RSHIFT expression
    (75) expression -> expression . URSHIFT expression

    AND             reduce using rule 71 (expression -> expression AND expression .)
    OR              reduce using rule 71 (expression -> expression AND expression .)
    SEMICOLON       reduce using rule 71 (expression -> expression AND expression .)
    RIGHTPAREN      reduce using rule 71 (expression -> expression AND expression .)
    COMMA           reduce using rule 71 (expression -> expression AND expression .)
    LEFTBRACE       reduce using rule 71 (expression -> expression AND expression .)
    RIGHTBRACKET    reduce using rule 71 (expression -> expression AND expression .)
    PLUS            shift and go to state 95
    MINUS           shift and go to state 89
    INTO            shift and go to state 99
    DIVIDE          shift and go to state 98
    MOD             shift and go to state 105
    BINAND          shift and go to state 91
    BINOR           shift and go to state 102
    BINXOR          shift and go to state 96
    LT              shift and go to state 94
    GT              shift and go to state 97
    DOUBLEEQ        shift and go to state 84
    NOTEQUAL        shift and go to state 85
    LTE             shift and go to state 100
    GTE             shift and go to state 90
    STREQUAL        shift and go to state 93
    STRNEQUAL       shift and go to state 86
    LSHIFT          shift and go to state 87
    RSHIFT          shift and go to state 88
    URSHIFT         shift and go to state 103

  ! PLUS            [ reduce using rule 71 (expression -> expression AND expression .) ]
  ! MINUS           [ reduce using rule 71 (expression -> expression AND expression .) ]
  ! INTO            [ reduce using rule 71 (expression -> expression AND expression .) ]
  ! DIVIDE          [ reduce using rule 71 (expression -> expression AND expression .) ]
  ! MOD             [ reduce using rule 71 (expression -> expression AND expression .) ]
  ! BINAND          [ reduce using rule 71 (expression -> expression AND expression .) ]
  ! BINOR           [ reduce using rule 71 (expression -> expression AND expression .) ]
  ! BINXOR          [ reduce using rule 71 (expression -> expression AND expression .) ]
  ! LT              [ reduce using rule 71 (expression -> expression AND expression .) ]
  ! GT              [ reduce using rule 71 (expression -> expression AND expression .) ]
  ! DOUBLEEQ        [ reduce using rule 71 (expression -> expression AND expression .) ]
  ! NOTEQUAL        [ reduce using rule 71 (expression -> expression AND expression .) ]
  ! LTE             [ reduce using rule 71 (expression -> expression AND expression .) ]
  ! GTE             [ reduce using rule 71 (expression -> expression AND expression .) ]
  ! STREQUAL        [ reduce using rule 71 (expression -> expression AND expression .) ]
  ! STRNEQUAL       [ reduce using rule 71 (expression -> expression AND expression .) ]
  ! LSHIFT          [ reduce using rule 71 (expression -> expression AND expression .) ]
  ! RSHIFT          [ reduce using rule 71 (expression -> expression AND expression .) ]
  ! URSHIFT         [ reduce using rule 71 (expression -> expression AND expression .) ]
  ! AND             [ shift and go to state 101 ]
  ! OR              [ shift and go to state 104 ]


state 157

    (60) expression -> expression BINOR expression .
    (52) expression -> expression . PLUS expression
    (53) expression -> expression . MINUS expression
    (54) expression -> expression . INTO expression
    (55) expression -> expression . DIVIDE expression
    (56) expression -> expression . MOD expression
    (59) expression -> expression . BINAND expression
    (60) expression -> expression . BINOR expression
    (61) expression -> expression . BINXOR expression
    (63) expression -> expression . LT expression
    (64) expression -> expression . GT expression
    (65) expression -> expression . DOUBLEEQ expression
    (66) expression -> expression . NOTEQUAL expression
    (67) expression -> expression . LTE expression
    (68) expression -> expression . GTE expression
    (69) expression -> expression . STREQUAL expression
    (70) expression -> expression . STRNEQUAL expression
    (71) expression -> expression . AND expression
    (72) expression -> expression . OR expression
    (73) expression -> expression . LSHIFT expression
    (74) expression -> expression . RSHIFT expression
    (75) expression -> expression . URSHIFT expression

    BINOR           reduce using rule 60 (expression -> expression BINOR expression .)
    AND             reduce using rule 60 (expression -> expression BINOR expression .)
    OR              reduce using rule 60 (expression -> expression BINOR expression .)
    SEMICOLON       reduce using rule 60 (expression -> expression BINOR expression .)
    RIGHTPAREN      reduce using rule 60 (expression -> expression BINOR expression .)
    COMMA           reduce using rule 60 (expression -> expression BINOR expression .)
    LEFTBRACE       reduce using rule 60 (expression -> expression BINOR expression .)
    RIGHTBRACKET    reduce using rule 60 (expression -> expression BINOR expression .)
    PLUS            shift and go to state 95
    MINUS           shift and go to state 89
    INTO            shift and go to state 99
    DIVIDE          shift and go to state 98
    MOD             shift and go to state 105
    BINAND          shift and go to state 91
    BINXOR          shift and go to state 96
    LT              shift and go to state 94
    GT              shift and go to state 97
    DOUBLEEQ        shift and go to state 84
    NOTEQUAL        shift and go to state 85
    LTE             shift and go to state 100
    GTE             shift and go to state 90
    STREQUAL        shift and go to state 93
    STRNEQUAL       shift and go to state 86
    LSHIFT          shift and go to state 87
    RSHIFT          shift and go to state 88
    URSHIFT         shift and go to state 103

  ! PLUS            [ reduce using rule 60 (expression -> expression BINOR expression .) ]
  ! MINUS           [ reduce using rule 60 (expression -> expression BINOR expression .) ]
  ! INTO            [ reduce using rule 60 (expression -> expression BINOR expression .) ]
  ! DIVIDE          [ reduce using rule 60 (expression -> expression BINOR expression .) ]
  ! MOD             [ reduce using rule 60 (expression -> expression BINOR expression .) ]
  ! BINAND          [ reduce using rule 60 (expression -> expression BINOR expression .) ]
  ! BINXOR          [ reduce using rule 60 (expression -> expression BINOR expression .) ]
  ! LT              [ reduce using rule 60 (expression -> expression BINOR expression .) ]
  ! GT              [ reduce using rule 60 (expression -> expression BINOR expression .) ]
  ! DOUBLEEQ        [ reduce using rule 60 (expression -> expression BINOR expression .) ]
  ! NOTEQUAL        [ reduce using rule 60 (expression -> expression BINOR expression .) ]
  ! LTE             [ reduce using rule 60 (expression -> expression BINOR expression .) ]
  ! GTE             [ reduce using rule 60 (expression -> expression BINOR expression .) ]
  ! STREQUAL        [ reduce using rule 60 (expression -> expression BINOR expression .) ]
  ! STRNEQUAL       [ reduce using rule 60 (expression -> expression BINOR expression .) ]
  ! LSHIFT          [ reduce using rule 60 (expression -> expression BINOR expression .) ]
  ! RSHIFT          [ reduce using rule 60 (expression -> expression BINOR expression .) ]
  ! URSHIFT         [ reduce using rule 60 (expression -> expression BINOR expression .) ]
  ! BINOR           [ shift and go to state 102 ]
  ! AND             [ shift and go to state 101 ]
  ! OR              [ shift and go to state 104 ]


state 158

    (75) expression -> expression URSHIFT expression .
    (52) expression -> expression . PLUS expression
    (53) expression -> expression . MINUS expression
    (54) expression -> expression . INTO expression
    (55) expression -> expression . DIVIDE expression
    (56) expression -> expression . MOD expression
    (59) expression -> expression . BINAND expression
    (60) expression -> expression . BINOR expression
    (61) expression -> expression . BINXOR expression
    (63) expression -> expression . LT expression
    (64) expression -> expression . GT expression
    (65) expression -> expression . DOUBLEEQ expression
    (66) expression -> expression . NOTEQUAL expression
    (67) expression -> expression . LTE expression
    (68) expression -> expression . GTE expression
    (69) expression -> expression . STREQUAL expression
    (70) expression -> expression . STRNEQUAL expression
    (71) expression -> expression . AND expression
    (72) expression -> expression . OR expression
    (73) expression -> expression . LSHIFT expression
    (74) expression -> expression . RSHIFT expression
    (75) expression -> expression . URSHIFT expression

    BINAND          reduce using rule 75 (expression -> expression URSHIFT expression .)
    BINOR           reduce using rule 75 (expression -> expression URSHIFT expression .)
    BINXOR          reduce using rule 75 (expression -> expression URSHIFT expression .)
    LT              reduce using rule 75 (expression -> expression URSHIFT expression .)
    GT              reduce using rule 75 (expression -> expression URSHIFT expression .)
    DOUBLEEQ        reduce using rule 75 (expression -> expression URSHIFT expression .)
    NOTEQUAL        reduce using rule 75 (expression -> expression URSHIFT expression .)
    LTE             reduce using rule 75 (expression -> expression URSHIFT expression .)
    GTE             reduce using rule 75 (expression -> expression URSHIFT expression .)
    STREQUAL        reduce using rule 75 (expression -> expression URSHIFT expression .)
    STRNEQUAL       reduce using rule 75 (expression -> expression URSHIFT expression .)
    AND             reduce using rule 75 (expression -> expression URSHIFT expression .)
    OR              reduce using rule 75 (expression -> expression URSHIFT expression .)
    LSHIFT          reduce using rule 75 (expression -> expression URSHIFT expression .)
    RSHIFT          reduce using rule 75 (expression -> expression URSHIFT expression .)
    URSHIFT         reduce using rule 75 (expression -> expression URSHIFT expression .)
    SEMICOLON       reduce using rule 75 (expression -> expression URSHIFT expression .)
    RIGHTPAREN      reduce using rule 75 (expression -> expression URSHIFT expression .)
    COMMA           reduce using rule 75 (expression -> expression URSHIFT expression .)
    LEFTBRACE       reduce using rule 75 (expression -> expression URSHIFT expression .)
    RIGHTBRACKET    reduce using rule 75 (expression -> expression URSHIFT expression .)
    PLUS            shift and go to state 95
    MINUS           shift and go to state 89
    INTO            shift and go to state 99
    DIVIDE          shift and go to state 98
    MOD             shift and go to state 105

  ! PLUS            [ reduce using rule 75 (expression -> expression URSHIFT expression .) ]
  ! MINUS           [ reduce using rule 75 (expression -> expression URSHIFT expression .) ]
  ! INTO            [ reduce using rule 75 (expression -> expression URSHIFT expression .) ]
  ! DIVIDE          [ reduce using rule 75 (expression -> expression URSHIFT expression .) ]
  ! MOD             [ reduce using rule 75 (expression -> expression URSHIFT expression .) ]
  ! BINAND          [ shift and go to state 91 ]
  ! BINOR           [ shift and go to state 102 ]
  ! BINXOR          [ shift and go to state 96 ]
  ! LT              [ shift and go to state 94 ]
  ! GT              [ shift and go to state 97 ]
  ! DOUBLEEQ        [ shift and go to state 84 ]
  ! NOTEQUAL        [ shift and go to state 85 ]
  ! LTE             [ shift and go to state 100 ]
  ! GTE             [ shift and go to state 90 ]
  ! STREQUAL        [ shift and go to state 93 ]
  ! STRNEQUAL       [ shift and go to state 86 ]
  ! AND             [ shift and go to state 101 ]
  ! OR              [ shift and go to state 104 ]
  ! LSHIFT          [ shift and go to state 87 ]
  ! RSHIFT          [ shift and go to state 88 ]
  ! URSHIFT         [ shift and go to state 103 ]


state 159

    (72) expression -> expression OR expression .
    (52) expression -> expression . PLUS expression
    (53) expression -> expression . MINUS expression
    (54) expression -> expression . INTO expression
    (55) expression -> expression . DIVIDE expression
    (56) expression -> expression . MOD expression
    (59) expression -> expression . BINAND expression
    (60) expression -> expression . BINOR expression
    (61) expression -> expression . BINXOR expression
    (63) expression -> expression . LT expression
    (64) expression -> expression . GT expression
    (65) expression -> expression . DOUBLEEQ expression
    (66) expression -> expression . NOTEQUAL expression
    (67) expression -> expression . LTE expression
    (68) expression -> expression . GTE expression
    (69) expression -> expression . STREQUAL expression
    (70) expression -> expression . STRNEQUAL expression
    (71) expression -> expression . AND expression
    (72) expression -> expression . OR expression
    (73) expression -> expression . LSHIFT expression
    (74) expression -> expression . RSHIFT expression
    (75) expression -> expression . URSHIFT expression

    OR              reduce using rule 72 (expression -> expression OR expression .)
    SEMICOLON       reduce using rule 72 (expression -> expression OR expression .)
    RIGHTPAREN      reduce using rule 72 (expression -> expression OR expression .)
    COMMA           reduce using rule 72 (expression -> expression OR expression .)
    LEFTBRACE       reduce using rule 72 (expression -> expression OR expression .)
    RIGHTBRACKET    reduce using rule 72 (expression -> expression OR expression .)
    PLUS            shift and go to state 95
    MINUS           shift and go to state 89
    INTO            shift and go to state 99
    DIVIDE          shift and go to state 98
    MOD             shift and go to state 105
    BINAND          shift and go to state 91
    BINOR           shift and go to state 102
    BINXOR          shift and go to state 96
    LT              shift and go to state 94
    GT              shift and go to state 97
    DOUBLEEQ        shift and go to state 84
    NOTEQUAL        shift and go to state 85
    LTE             shift and go to state 100
    GTE             shift and go to state 90
    STREQUAL        shift and go to state 93
    STRNEQUAL       shift and go to state 86
    AND             shift and go to state 101
    LSHIFT          shift and go to state 87
    RSHIFT          shift and go to state 88
    URSHIFT         shift and go to state 103

  ! PLUS            [ reduce using rule 72 (expression -> expression OR expression .) ]
  ! MINUS           [ reduce using rule 72 (expression -> expression OR expression .) ]
  ! INTO            [ reduce using rule 72 (expression -> expression OR expression .) ]
  ! DIVIDE          [ reduce using rule 72 (expression -> expression OR expression .) ]
  ! MOD             [ reduce using rule 72 (expression -> expression OR expression .) ]
  ! BINAND          [ reduce using rule 72 (expression -> expression OR expression .) ]
  ! BINOR           [ reduce using rule 72 (expression -> expression OR expression .) ]
  ! BINXOR          [ reduce using rule 72 (expression -> expression OR expression .) ]
  ! LT              [ reduce using rule 72 (expression -> expression OR expression .) ]
  ! GT              [ reduce using rule 72 (expression -> expression OR expression .) ]
  ! DOUBLEEQ        [ reduce using rule 72 (expression -> expression OR expression .) ]
  ! NOTEQUAL        [ reduce using rule 72 (expression -> expression OR expression .) ]
  ! LTE             [ reduce using rule 72 (expression -> expression OR expression .) ]
  ! GTE             [ reduce using rule 72 (expression -> expression OR expression .) ]
  ! STREQUAL        [ reduce using rule 72 (expression -> expression OR expression .) ]
  ! STRNEQUAL       [ reduce using rule 72 (expression -> expression OR expression .) ]
  ! AND             [ reduce using rule 72 (expression -> expression OR expression .) ]
  ! LSHIFT          [ reduce using rule 72 (expression -> expression OR expression .) ]
  ! RSHIFT          [ reduce using rule 72 (expression -> expression OR expression .) ]
  ! URSHIFT         [ reduce using rule 72 (expression -> expression OR expression .) ]
  ! OR              [ shift and go to state 104 ]


state 160

    (56) expression -> expression MOD expression .
    (52) expression -> expression . PLUS expression
    (53) expression -> expression . MINUS expression
    (54) expression -> expression . INTO expression
    (55) expression -> expression . DIVIDE expression
    (56) expression -> expression . MOD expression
    (59) expression -> expression . BINAND expression
    (60) expression -> expression . BINOR expression
    (61) expression -> expression . BINXOR expression
    (63) expression -> expression . LT expression
    (64) expression -> expression . GT expression
    (65) expression -> expression . DOUBLEEQ expression
    (66) expression -> expression . NOTEQUAL expression
    (67) expression -> expression . LTE expression
    (68) expression -> expression . GTE expression
    (69) expression -> expression . STREQUAL expression
    (70) expression -> expression . STRNEQUAL expression
    (71) expression -> expression . AND expression
    (72) expression -> expression . OR expression
    (73) expression -> expression . LSHIFT expression
    (74) expression -> expression . RSHIFT expression
    (75) expression -> expression . URSHIFT expression

    PLUS            reduce using rule 56 (expression -> expression MOD expression .)
    MINUS           reduce using rule 56 (expression -> expression MOD expression .)
    INTO            reduce using rule 56 (expression -> expression MOD expression .)
    DIVIDE          reduce using rule 56 (expression -> expression MOD expression .)
    MOD             reduce using rule 56 (expression -> expression MOD expression .)
    BINAND          reduce using rule 56 (expression -> expression MOD expression .)
    BINOR           reduce using rule 56 (expression -> expression MOD expression .)
    BINXOR          reduce using rule 56 (expression -> expression MOD expression .)
    LT              reduce using rule 56 (expression -> expression MOD expression .)
    GT              reduce using rule 56 (expression -> expression MOD expression .)
    DOUBLEEQ        reduce using rule 56 (expression -> expression MOD expression .)
    NOTEQUAL        reduce using rule 56 (expression -> expression MOD expression .)
    LTE             reduce using rule 56 (expression -> expression MOD expression .)
    GTE             reduce using rule 56 (expression -> expression MOD expression .)
    STREQUAL        reduce using rule 56 (expression -> expression MOD expression .)
    STRNEQUAL       reduce using rule 56 (expression -> expression MOD expression .)
    AND             reduce using rule 56 (expression -> expression MOD expression .)
    OR              reduce using rule 56 (expression -> expression MOD expression .)
    LSHIFT          reduce using rule 56 (expression -> expression MOD expression .)
    RSHIFT          reduce using rule 56 (expression -> expression MOD expression .)
    URSHIFT         reduce using rule 56 (expression -> expression MOD expression .)
    SEMICOLON       reduce using rule 56 (expression -> expression MOD expression .)
    RIGHTPAREN      reduce using rule 56 (expression -> expression MOD expression .)
    COMMA           reduce using rule 56 (expression -> expression MOD expression .)
    LEFTBRACE       reduce using rule 56 (expression -> expression MOD expression .)
    RIGHTBRACKET    reduce using rule 56 (expression -> expression MOD expression .)

  ! PLUS            [ shift and go to state 95 ]
  ! MINUS           [ shift and go to state 89 ]
  ! INTO            [ shift and go to state 99 ]
  ! DIVIDE          [ shift and go to state 98 ]
  ! MOD             [ shift and go to state 105 ]
  ! BINAND          [ shift and go to state 91 ]
  ! BINOR           [ shift and go to state 102 ]
  ! BINXOR          [ shift and go to state 96 ]
  ! LT              [ shift and go to state 94 ]
  ! GT              [ shift and go to state 97 ]
  ! DOUBLEEQ        [ shift and go to state 84 ]
  ! NOTEQUAL        [ shift and go to state 85 ]
  ! LTE             [ shift and go to state 100 ]
  ! GTE             [ shift and go to state 90 ]
  ! STREQUAL        [ shift and go to state 93 ]
  ! STRNEQUAL       [ shift and go to state 86 ]
  ! AND             [ shift and go to state 101 ]
  ! OR              [ shift and go to state 104 ]
  ! LSHIFT          [ shift and go to state 87 ]
  ! RSHIFT          [ shift and go to state 88 ]
  ! URSHIFT         [ shift and go to state 103 ]


state 161

    (117) initialization -> assignment .

    SEMICOLON       reduce using rule 117 (initialization -> assignment .)


state 162

    (110) forloop -> FOR scope_marker LEFTPAREN initialization . SEMICOLON forexpr_marker for_expr forcheck_marker SEMICOLON increment increment_marker RIGHTPAREN forblock endblock_marker

    SEMICOLON       shift and go to state 185


state 163

    (26) assignment -> VAR . assignlist
    (27) assignlist -> . ID EQ expression COMMA assignlist
    (28) assignlist -> . ID EQ expression
    (29) assignlist -> . ID EQ array

    ID              shift and go to state 186

    assignlist                     shift and go to state 57

state 164

    (118) initialization -> reinitialization .

    SEMICOLON       reduce using rule 118 (initialization -> reinitialization .)


state 165

    (119) reinitialization -> reassignment . COMMA reinitialization
    (120) reinitialization -> reassignment .

    COMMA           shift and go to state 187
    SEMICOLON       reduce using rule 120 (reinitialization -> reassignment .)


state 166

    (100) if -> IF expression ifelseblock block . ifblockend
    (102) ifelse -> IF expression ifelseblock block . ELSE elseblock block elseblockend
    (101) ifblockend -> .

    ELSE            shift and go to state 189
    BREAK           reduce using rule 101 (ifblockend -> .)
    CONTINUE        reduce using rule 101 (ifblockend -> .)
    RETURN          reduce using rule 101 (ifblockend -> .)
    CONSOLE         reduce using rule 101 (ifblockend -> .)
    VAR             reduce using rule 101 (ifblockend -> .)
    ID              reduce using rule 101 (ifblockend -> .)
    LEFTPAREN       reduce using rule 101 (ifblockend -> .)
    IF              reduce using rule 101 (ifblockend -> .)
    WHILE           reduce using rule 101 (ifblockend -> .)
    FUNCTION        reduce using rule 101 (ifblockend -> .)
    FOR             reduce using rule 101 (ifblockend -> .)
    $end            reduce using rule 101 (ifblockend -> .)
    RIGHTBRACE      reduce using rule 101 (ifblockend -> .)
    RIGHTPAREN      reduce using rule 101 (ifblockend -> .)

    ifblockend                     shift and go to state 188

state 167

    (128) funcdecl -> FUNCTION ID funcscopedefnormal LEFTPAREN . funcarghead RIGHTPAREN funblock endfunc
    (124) funcarghead -> . funcargList
    (125) funcargList -> . ID COMMA funcargList
    (126) funcargList -> . ID
    (127) funcargList -> .

    ID              shift and go to state 192
    RIGHTPAREN      reduce using rule 127 (funcargList -> .)

    funcarghead                    shift and go to state 190
    funcargList                    shift and go to state 191

state 168

    (20) statement -> CONSOLE DOT LOG LEFTPAREN . printList RIGHTPAREN SEMICOLON
    (21) printList -> . expression COMMA printList
    (22) printList -> . expression
    (52) expression -> . expression PLUS expression
    (53) expression -> . expression MINUS expression
    (54) expression -> . expression INTO expression
    (55) expression -> . expression DIVIDE expression
    (56) expression -> . expression MOD expression
    (57) expression -> . LEFTPAREN expression RIGHTPAREN
    (58) expression -> . NOT expression
    (59) expression -> . expression BINAND expression
    (60) expression -> . expression BINOR expression
    (61) expression -> . expression BINXOR expression
    (62) expression -> . BINNOT expression
    (63) expression -> . expression LT expression
    (64) expression -> . expression GT expression
    (65) expression -> . expression DOUBLEEQ expression
    (66) expression -> . expression NOTEQUAL expression
    (67) expression -> . expression LTE expression
    (68) expression -> . expression GTE expression
    (69) expression -> . expression STREQUAL expression
    (70) expression -> . expression STRNEQUAL expression
    (71) expression -> . expression AND expression
    (72) expression -> . expression OR expression
    (73) expression -> . expression LSHIFT expression
    (74) expression -> . expression RSHIFT expression
    (75) expression -> . expression URSHIFT expression
    (76) expression -> . EVAL LEFTPAREN evalmarker statements evalendmarker RIGHTPAREN
    (77) expression -> . EVAL LEFTPAREN block RIGHTPAREN
    (78) expression -> . EVAL LEFTPAREN expression RIGHTPAREN
    (81) expression -> . basicTypes
    (82) expression -> . ID
    (83) expression -> . TYPEOF expression
    (87) expression -> . arrayCall
    (92) basicTypes -> . NUMBER
    (93) basicTypes -> . BOOLEAN
    (94) basicTypes -> . STRING
    (95) basicTypes -> . UNDEFINED
    (89) arrayCall -> . ID reference

    LEFTPAREN       shift and go to state 37
    NOT             shift and go to state 41
    BINNOT          shift and go to state 43
    EVAL            shift and go to state 31
    ID              shift and go to state 38
    TYPEOF          shift and go to state 36
    NUMBER          shift and go to state 32
    BOOLEAN         shift and go to state 40
    STRING          shift and go to state 35
    UNDEFINED       shift and go to state 33

    printList                      shift and go to state 193
    arrayCall                      shift and go to state 34
    expression                     shift and go to state 194
    basicTypes                     shift and go to state 42

state 169

    (24) declarationList -> ID COMMA declarationList .

    SEMICOLON       reduce using rule 24 (declarationList -> ID COMMA declarationList .)


state 170

    (24) declarationList -> ID . COMMA declarationList
    (25) declarationList -> ID .

    COMMA           shift and go to state 115
    SEMICOLON       reduce using rule 25 (declarationList -> ID .)


state 171

    (29) assignlist -> ID EQ array .

    SEMICOLON       reduce using rule 29 (assignlist -> ID EQ array .)


state 172

    (47) array -> LEFTBRACKET . arrayList RIGHTBRACKET
    (48) arrayList -> . array COMMA arrayList
    (49) arrayList -> . array
    (50) arrayList -> . expression COMMA arrayList
    (51) arrayList -> . expression
    (47) array -> . LEFTBRACKET arrayList RIGHTBRACKET
    (52) expression -> . expression PLUS expression
    (53) expression -> . expression MINUS expression
    (54) expression -> . expression INTO expression
    (55) expression -> . expression DIVIDE expression
    (56) expression -> . expression MOD expression
    (57) expression -> . LEFTPAREN expression RIGHTPAREN
    (58) expression -> . NOT expression
    (59) expression -> . expression BINAND expression
    (60) expression -> . expression BINOR expression
    (61) expression -> . expression BINXOR expression
    (62) expression -> . BINNOT expression
    (63) expression -> . expression LT expression
    (64) expression -> . expression GT expression
    (65) expression -> . expression DOUBLEEQ expression
    (66) expression -> . expression NOTEQUAL expression
    (67) expression -> . expression LTE expression
    (68) expression -> . expression GTE expression
    (69) expression -> . expression STREQUAL expression
    (70) expression -> . expression STRNEQUAL expression
    (71) expression -> . expression AND expression
    (72) expression -> . expression OR expression
    (73) expression -> . expression LSHIFT expression
    (74) expression -> . expression RSHIFT expression
    (75) expression -> . expression URSHIFT expression
    (76) expression -> . EVAL LEFTPAREN evalmarker statements evalendmarker RIGHTPAREN
    (77) expression -> . EVAL LEFTPAREN block RIGHTPAREN
    (78) expression -> . EVAL LEFTPAREN expression RIGHTPAREN
    (81) expression -> . basicTypes
    (82) expression -> . ID
    (83) expression -> . TYPEOF expression
    (87) expression -> . arrayCall
    (92) basicTypes -> . NUMBER
    (93) basicTypes -> . BOOLEAN
    (94) basicTypes -> . STRING
    (95) basicTypes -> . UNDEFINED
    (89) arrayCall -> . ID reference

    LEFTBRACKET     shift and go to state 172
    LEFTPAREN       shift and go to state 37
    NOT             shift and go to state 41
    BINNOT          shift and go to state 43
    EVAL            shift and go to state 31
    ID              shift and go to state 38
    TYPEOF          shift and go to state 36
    NUMBER          shift and go to state 32
    BOOLEAN         shift and go to state 40
    STRING          shift and go to state 35
    UNDEFINED       shift and go to state 33

    arrayList                      shift and go to state 196
    arrayCall                      shift and go to state 34
    array                          shift and go to state 195
    expression                     shift and go to state 197
    basicTypes                     shift and go to state 42

state 173

    (131) funcdecl -> VAR ID EQ FUNCTION . funcscopedef LEFTPAREN funcarghead RIGHTPAREN funblock SEMICOLON endfuncdecl
    (133) funcscopedef -> .

    LEFTPAREN       reduce using rule 133 (funcscopedef -> .)

    funcscopedef                   shift and go to state 198

state 174

    (96) functioncall -> ID . LEFTPAREN argList RIGHTPAREN
    (82) expression -> ID .
    (89) arrayCall -> ID . reference
    (90) reference -> . LEFTBRACKET expression RIGHTBRACKET reference
    (91) reference -> . LEFTBRACKET expression RIGHTBRACKET

    LEFTPAREN       shift and go to state 72
    COMMA           reduce using rule 82 (expression -> ID .)
    PLUS            reduce using rule 82 (expression -> ID .)
    MINUS           reduce using rule 82 (expression -> ID .)
    INTO            reduce using rule 82 (expression -> ID .)
    DIVIDE          reduce using rule 82 (expression -> ID .)
    MOD             reduce using rule 82 (expression -> ID .)
    BINAND          reduce using rule 82 (expression -> ID .)
    BINOR           reduce using rule 82 (expression -> ID .)
    BINXOR          reduce using rule 82 (expression -> ID .)
    LT              reduce using rule 82 (expression -> ID .)
    GT              reduce using rule 82 (expression -> ID .)
    DOUBLEEQ        reduce using rule 82 (expression -> ID .)
    NOTEQUAL        reduce using rule 82 (expression -> ID .)
    LTE             reduce using rule 82 (expression -> ID .)
    GTE             reduce using rule 82 (expression -> ID .)
    STREQUAL        reduce using rule 82 (expression -> ID .)
    STRNEQUAL       reduce using rule 82 (expression -> ID .)
    AND             reduce using rule 82 (expression -> ID .)
    OR              reduce using rule 82 (expression -> ID .)
    LSHIFT          reduce using rule 82 (expression -> ID .)
    RSHIFT          reduce using rule 82 (expression -> ID .)
    URSHIFT         reduce using rule 82 (expression -> ID .)
    SEMICOLON       reduce using rule 82 (expression -> ID .)
    LEFTBRACKET     shift and go to state 68

    reference                      shift and go to state 60

state 175

    (86) funcstmt -> VAR ID EQ functioncall .

    SEMICOLON       reduce using rule 86 (funcstmt -> VAR ID EQ functioncall .)


state 176

    (27) assignlist -> ID EQ expression . COMMA assignlist
    (28) assignlist -> ID EQ expression .
    (52) expression -> expression . PLUS expression
    (53) expression -> expression . MINUS expression
    (54) expression -> expression . INTO expression
    (55) expression -> expression . DIVIDE expression
    (56) expression -> expression . MOD expression
    (59) expression -> expression . BINAND expression
    (60) expression -> expression . BINOR expression
    (61) expression -> expression . BINXOR expression
    (63) expression -> expression . LT expression
    (64) expression -> expression . GT expression
    (65) expression -> expression . DOUBLEEQ expression
    (66) expression -> expression . NOTEQUAL expression
    (67) expression -> expression . LTE expression
    (68) expression -> expression . GTE expression
    (69) expression -> expression . STREQUAL expression
    (70) expression -> expression . STRNEQUAL expression
    (71) expression -> expression . AND expression
    (72) expression -> expression . OR expression
    (73) expression -> expression . LSHIFT expression
    (74) expression -> expression . RSHIFT expression
    (75) expression -> expression . URSHIFT expression

    COMMA           shift and go to state 199
    SEMICOLON       reduce using rule 28 (assignlist -> ID EQ expression .)
    PLUS            shift and go to state 95
    MINUS           shift and go to state 89
    INTO            shift and go to state 99
    DIVIDE          shift and go to state 98
    MOD             shift and go to state 105
    BINAND          shift and go to state 91
    BINOR           shift and go to state 102
    BINXOR          shift and go to state 96
    LT              shift and go to state 94
    GT              shift and go to state 97
    DOUBLEEQ        shift and go to state 84
    NOTEQUAL        shift and go to state 85
    LTE             shift and go to state 100
    GTE             shift and go to state 90
    STREQUAL        shift and go to state 93
    STRNEQUAL       shift and go to state 86
    AND             shift and go to state 101
    OR              shift and go to state 104
    LSHIFT          shift and go to state 87
    RSHIFT          shift and go to state 88
    URSHIFT         shift and go to state 103


state 177

    (90) reference -> LEFTBRACKET expression RIGHTBRACKET . reference
    (91) reference -> LEFTBRACKET expression RIGHTBRACKET .
    (90) reference -> . LEFTBRACKET expression RIGHTBRACKET reference
    (91) reference -> . LEFTBRACKET expression RIGHTBRACKET

    SEMICOLON       reduce using rule 91 (reference -> LEFTBRACKET expression RIGHTBRACKET .)
    PLUS            reduce using rule 91 (reference -> LEFTBRACKET expression RIGHTBRACKET .)
    MINUS           reduce using rule 91 (reference -> LEFTBRACKET expression RIGHTBRACKET .)
    INTO            reduce using rule 91 (reference -> LEFTBRACKET expression RIGHTBRACKET .)
    DIVIDE          reduce using rule 91 (reference -> LEFTBRACKET expression RIGHTBRACKET .)
    MOD             reduce using rule 91 (reference -> LEFTBRACKET expression RIGHTBRACKET .)
    BINAND          reduce using rule 91 (reference -> LEFTBRACKET expression RIGHTBRACKET .)
    BINOR           reduce using rule 91 (reference -> LEFTBRACKET expression RIGHTBRACKET .)
    BINXOR          reduce using rule 91 (reference -> LEFTBRACKET expression RIGHTBRACKET .)
    LT              reduce using rule 91 (reference -> LEFTBRACKET expression RIGHTBRACKET .)
    GT              reduce using rule 91 (reference -> LEFTBRACKET expression RIGHTBRACKET .)
    DOUBLEEQ        reduce using rule 91 (reference -> LEFTBRACKET expression RIGHTBRACKET .)
    NOTEQUAL        reduce using rule 91 (reference -> LEFTBRACKET expression RIGHTBRACKET .)
    LTE             reduce using rule 91 (reference -> LEFTBRACKET expression RIGHTBRACKET .)
    GTE             reduce using rule 91 (reference -> LEFTBRACKET expression RIGHTBRACKET .)
    STREQUAL        reduce using rule 91 (reference -> LEFTBRACKET expression RIGHTBRACKET .)
    STRNEQUAL       reduce using rule 91 (reference -> LEFTBRACKET expression RIGHTBRACKET .)
    AND             reduce using rule 91 (reference -> LEFTBRACKET expression RIGHTBRACKET .)
    OR              reduce using rule 91 (reference -> LEFTBRACKET expression RIGHTBRACKET .)
    LSHIFT          reduce using rule 91 (reference -> LEFTBRACKET expression RIGHTBRACKET .)
    RSHIFT          reduce using rule 91 (reference -> LEFTBRACKET expression RIGHTBRACKET .)
    URSHIFT         reduce using rule 91 (reference -> LEFTBRACKET expression RIGHTBRACKET .)
    LEFTBRACE       reduce using rule 91 (reference -> LEFTBRACKET expression RIGHTBRACKET .)
    RIGHTPAREN      reduce using rule 91 (reference -> LEFTBRACKET expression RIGHTBRACKET .)
    COMMA           reduce using rule 91 (reference -> LEFTBRACKET expression RIGHTBRACKET .)
    RIGHTBRACKET    reduce using rule 91 (reference -> LEFTBRACKET expression RIGHTBRACKET .)
    EQ              reduce using rule 91 (reference -> LEFTBRACKET expression RIGHTBRACKET .)
    LEFTBRACKET     shift and go to state 68

    reference                      shift and go to state 200

state 178

    (96) functioncall -> ID LEFTPAREN argList RIGHTPAREN .

    SEMICOLON       reduce using rule 96 (functioncall -> ID LEFTPAREN argList RIGHTPAREN .)


state 179

    (98) argList -> expression COMMA . argList
    (97) argList -> . expression
    (98) argList -> . expression COMMA argList
    (99) argList -> .
    (52) expression -> . expression PLUS expression
    (53) expression -> . expression MINUS expression
    (54) expression -> . expression INTO expression
    (55) expression -> . expression DIVIDE expression
    (56) expression -> . expression MOD expression
    (57) expression -> . LEFTPAREN expression RIGHTPAREN
    (58) expression -> . NOT expression
    (59) expression -> . expression BINAND expression
    (60) expression -> . expression BINOR expression
    (61) expression -> . expression BINXOR expression
    (62) expression -> . BINNOT expression
    (63) expression -> . expression LT expression
    (64) expression -> . expression GT expression
    (65) expression -> . expression DOUBLEEQ expression
    (66) expression -> . expression NOTEQUAL expression
    (67) expression -> . expression LTE expression
    (68) expression -> . expression GTE expression
    (69) expression -> . expression STREQUAL expression
    (70) expression -> . expression STRNEQUAL expression
    (71) expression -> . expression AND expression
    (72) expression -> . expression OR expression
    (73) expression -> . expression LSHIFT expression
    (74) expression -> . expression RSHIFT expression
    (75) expression -> . expression URSHIFT expression
    (76) expression -> . EVAL LEFTPAREN evalmarker statements evalendmarker RIGHTPAREN
    (77) expression -> . EVAL LEFTPAREN block RIGHTPAREN
    (78) expression -> . EVAL LEFTPAREN expression RIGHTPAREN
    (81) expression -> . basicTypes
    (82) expression -> . ID
    (83) expression -> . TYPEOF expression
    (87) expression -> . arrayCall
    (92) basicTypes -> . NUMBER
    (93) basicTypes -> . BOOLEAN
    (94) basicTypes -> . STRING
    (95) basicTypes -> . UNDEFINED
    (89) arrayCall -> . ID reference

    RIGHTPAREN      reduce using rule 99 (argList -> .)
    LEFTPAREN       shift and go to state 37
    NOT             shift and go to state 41
    BINNOT          shift and go to state 43
    EVAL            shift and go to state 31
    ID              shift and go to state 38
    TYPEOF          shift and go to state 36
    NUMBER          shift and go to state 32
    BOOLEAN         shift and go to state 40
    STRING          shift and go to state 35
    UNDEFINED       shift and go to state 33

    arrayCall                      shift and go to state 34
    argList                        shift and go to state 201
    expression                     shift and go to state 127
    basicTypes                     shift and go to state 42

state 180

    (3) block -> LEFTBRACE blockmarker statements RIGHTBRACE .

    BREAK           reduce using rule 3 (block -> LEFTBRACE blockmarker statements RIGHTBRACE .)
    CONTINUE        reduce using rule 3 (block -> LEFTBRACE blockmarker statements RIGHTBRACE .)
    RETURN          reduce using rule 3 (block -> LEFTBRACE blockmarker statements RIGHTBRACE .)
    CONSOLE         reduce using rule 3 (block -> LEFTBRACE blockmarker statements RIGHTBRACE .)
    VAR             reduce using rule 3 (block -> LEFTBRACE blockmarker statements RIGHTBRACE .)
    ID              reduce using rule 3 (block -> LEFTBRACE blockmarker statements RIGHTBRACE .)
    LEFTPAREN       reduce using rule 3 (block -> LEFTBRACE blockmarker statements RIGHTBRACE .)
    IF              reduce using rule 3 (block -> LEFTBRACE blockmarker statements RIGHTBRACE .)
    WHILE           reduce using rule 3 (block -> LEFTBRACE blockmarker statements RIGHTBRACE .)
    FUNCTION        reduce using rule 3 (block -> LEFTBRACE blockmarker statements RIGHTBRACE .)
    FOR             reduce using rule 3 (block -> LEFTBRACE blockmarker statements RIGHTBRACE .)
    $end            reduce using rule 3 (block -> LEFTBRACE blockmarker statements RIGHTBRACE .)
    RIGHTBRACE      reduce using rule 3 (block -> LEFTBRACE blockmarker statements RIGHTBRACE .)
    RIGHTPAREN      reduce using rule 3 (block -> LEFTBRACE blockmarker statements RIGHTBRACE .)
    ELSE            reduce using rule 3 (block -> LEFTBRACE blockmarker statements RIGHTBRACE .)


state 181

    (106) whileloop -> WHILE whileblockstart LEFTPAREN expression RIGHTPAREN . exprcheck block whileblockend
    (108) exprcheck -> . empty
    (135) empty -> .

    LEFTBRACE       reduce using rule 135 (empty -> .)

    exprcheck                      shift and go to state 202
    empty                          shift and go to state 203

state 182

    (78) expression -> EVAL LEFTPAREN expression RIGHTPAREN .

    PLUS            reduce using rule 78 (expression -> EVAL LEFTPAREN expression RIGHTPAREN .)
    MINUS           reduce using rule 78 (expression -> EVAL LEFTPAREN expression RIGHTPAREN .)
    INTO            reduce using rule 78 (expression -> EVAL LEFTPAREN expression RIGHTPAREN .)
    DIVIDE          reduce using rule 78 (expression -> EVAL LEFTPAREN expression RIGHTPAREN .)
    MOD             reduce using rule 78 (expression -> EVAL LEFTPAREN expression RIGHTPAREN .)
    BINAND          reduce using rule 78 (expression -> EVAL LEFTPAREN expression RIGHTPAREN .)
    BINOR           reduce using rule 78 (expression -> EVAL LEFTPAREN expression RIGHTPAREN .)
    BINXOR          reduce using rule 78 (expression -> EVAL LEFTPAREN expression RIGHTPAREN .)
    LT              reduce using rule 78 (expression -> EVAL LEFTPAREN expression RIGHTPAREN .)
    GT              reduce using rule 78 (expression -> EVAL LEFTPAREN expression RIGHTPAREN .)
    DOUBLEEQ        reduce using rule 78 (expression -> EVAL LEFTPAREN expression RIGHTPAREN .)
    NOTEQUAL        reduce using rule 78 (expression -> EVAL LEFTPAREN expression RIGHTPAREN .)
    LTE             reduce using rule 78 (expression -> EVAL LEFTPAREN expression RIGHTPAREN .)
    GTE             reduce using rule 78 (expression -> EVAL LEFTPAREN expression RIGHTPAREN .)
    STREQUAL        reduce using rule 78 (expression -> EVAL LEFTPAREN expression RIGHTPAREN .)
    STRNEQUAL       reduce using rule 78 (expression -> EVAL LEFTPAREN expression RIGHTPAREN .)
    AND             reduce using rule 78 (expression -> EVAL LEFTPAREN expression RIGHTPAREN .)
    OR              reduce using rule 78 (expression -> EVAL LEFTPAREN expression RIGHTPAREN .)
    LSHIFT          reduce using rule 78 (expression -> EVAL LEFTPAREN expression RIGHTPAREN .)
    RSHIFT          reduce using rule 78 (expression -> EVAL LEFTPAREN expression RIGHTPAREN .)
    URSHIFT         reduce using rule 78 (expression -> EVAL LEFTPAREN expression RIGHTPAREN .)
    SEMICOLON       reduce using rule 78 (expression -> EVAL LEFTPAREN expression RIGHTPAREN .)
    RIGHTPAREN      reduce using rule 78 (expression -> EVAL LEFTPAREN expression RIGHTPAREN .)
    COMMA           reduce using rule 78 (expression -> EVAL LEFTPAREN expression RIGHTPAREN .)
    LEFTBRACE       reduce using rule 78 (expression -> EVAL LEFTPAREN expression RIGHTPAREN .)
    RIGHTBRACKET    reduce using rule 78 (expression -> EVAL LEFTPAREN expression RIGHTPAREN .)


state 183

    (76) expression -> EVAL LEFTPAREN evalmarker statements . evalendmarker RIGHTPAREN
    (80) evalendmarker -> .

    RIGHTPAREN      reduce using rule 80 (evalendmarker -> .)

    evalendmarker                  shift and go to state 204

state 184

    (77) expression -> EVAL LEFTPAREN block RIGHTPAREN .

    PLUS            reduce using rule 77 (expression -> EVAL LEFTPAREN block RIGHTPAREN .)
    MINUS           reduce using rule 77 (expression -> EVAL LEFTPAREN block RIGHTPAREN .)
    INTO            reduce using rule 77 (expression -> EVAL LEFTPAREN block RIGHTPAREN .)
    DIVIDE          reduce using rule 77 (expression -> EVAL LEFTPAREN block RIGHTPAREN .)
    MOD             reduce using rule 77 (expression -> EVAL LEFTPAREN block RIGHTPAREN .)
    BINAND          reduce using rule 77 (expression -> EVAL LEFTPAREN block RIGHTPAREN .)
    BINOR           reduce using rule 77 (expression -> EVAL LEFTPAREN block RIGHTPAREN .)
    BINXOR          reduce using rule 77 (expression -> EVAL LEFTPAREN block RIGHTPAREN .)
    LT              reduce using rule 77 (expression -> EVAL LEFTPAREN block RIGHTPAREN .)
    GT              reduce using rule 77 (expression -> EVAL LEFTPAREN block RIGHTPAREN .)
    DOUBLEEQ        reduce using rule 77 (expression -> EVAL LEFTPAREN block RIGHTPAREN .)
    NOTEQUAL        reduce using rule 77 (expression -> EVAL LEFTPAREN block RIGHTPAREN .)
    LTE             reduce using rule 77 (expression -> EVAL LEFTPAREN block RIGHTPAREN .)
    GTE             reduce using rule 77 (expression -> EVAL LEFTPAREN block RIGHTPAREN .)
    STREQUAL        reduce using rule 77 (expression -> EVAL LEFTPAREN block RIGHTPAREN .)
    STRNEQUAL       reduce using rule 77 (expression -> EVAL LEFTPAREN block RIGHTPAREN .)
    AND             reduce using rule 77 (expression -> EVAL LEFTPAREN block RIGHTPAREN .)
    OR              reduce using rule 77 (expression -> EVAL LEFTPAREN block RIGHTPAREN .)
    LSHIFT          reduce using rule 77 (expression -> EVAL LEFTPAREN block RIGHTPAREN .)
    RSHIFT          reduce using rule 77 (expression -> EVAL LEFTPAREN block RIGHTPAREN .)
    URSHIFT         reduce using rule 77 (expression -> EVAL LEFTPAREN block RIGHTPAREN .)
    SEMICOLON       reduce using rule 77 (expression -> EVAL LEFTPAREN block RIGHTPAREN .)
    RIGHTPAREN      reduce using rule 77 (expression -> EVAL LEFTPAREN block RIGHTPAREN .)
    COMMA           reduce using rule 77 (expression -> EVAL LEFTPAREN block RIGHTPAREN .)
    LEFTBRACE       reduce using rule 77 (expression -> EVAL LEFTPAREN block RIGHTPAREN .)
    RIGHTBRACKET    reduce using rule 77 (expression -> EVAL LEFTPAREN block RIGHTPAREN .)


state 185

    (110) forloop -> FOR scope_marker LEFTPAREN initialization SEMICOLON . forexpr_marker for_expr forcheck_marker SEMICOLON increment increment_marker RIGHTPAREN forblock endblock_marker
    (112) forexpr_marker -> .

    LEFTPAREN       reduce using rule 112 (forexpr_marker -> .)
    NOT             reduce using rule 112 (forexpr_marker -> .)
    BINNOT          reduce using rule 112 (forexpr_marker -> .)
    EVAL            reduce using rule 112 (forexpr_marker -> .)
    ID              reduce using rule 112 (forexpr_marker -> .)
    TYPEOF          reduce using rule 112 (forexpr_marker -> .)
    NUMBER          reduce using rule 112 (forexpr_marker -> .)
    BOOLEAN         reduce using rule 112 (forexpr_marker -> .)
    STRING          reduce using rule 112 (forexpr_marker -> .)
    UNDEFINED       reduce using rule 112 (forexpr_marker -> .)

    forexpr_marker                 shift and go to state 205

state 186

    (27) assignlist -> ID . EQ expression COMMA assignlist
    (28) assignlist -> ID . EQ expression
    (29) assignlist -> ID . EQ array

    EQ              shift and go to state 206


state 187

    (119) reinitialization -> reassignment COMMA . reinitialization
    (119) reinitialization -> . reassignment COMMA reinitialization
    (120) reinitialization -> . reassignment
    (30) reassignment -> . ID EQ expression
    (31) reassignment -> . ID PLUSEQ expression
    (32) reassignment -> . ID MINUSEQ expression
    (33) reassignment -> . ID INTOEQ expression
    (34) reassignment -> . ID DIVEQ expression
    (35) reassignment -> . ID INCR
    (36) reassignment -> . ID DECR
    (37) reassignment -> . ID LSHIFTEQ expression
    (38) reassignment -> . ID RSHIFTEQ expression
    (39) reassignment -> . ID URSHIFTEQ expression
    (40) reassignment -> . ID ANDEQ expression
    (41) reassignment -> . ID OREQ expression
    (42) reassignment -> . ID XOREQ expression
    (43) reassignment -> . ID MODEQ expression
    (44) reassignment -> . LEFTPAREN reassignment RIGHTPAREN

    ID              shift and go to state 55
    LEFTPAREN       shift and go to state 19

    reassignment                   shift and go to state 165
    reinitialization               shift and go to state 207

state 188

    (100) if -> IF expression ifelseblock block ifblockend .

    BREAK           reduce using rule 100 (if -> IF expression ifelseblock block ifblockend .)
    CONTINUE        reduce using rule 100 (if -> IF expression ifelseblock block ifblockend .)
    RETURN          reduce using rule 100 (if -> IF expression ifelseblock block ifblockend .)
    CONSOLE         reduce using rule 100 (if -> IF expression ifelseblock block ifblockend .)
    VAR             reduce using rule 100 (if -> IF expression ifelseblock block ifblockend .)
    ID              reduce using rule 100 (if -> IF expression ifelseblock block ifblockend .)
    LEFTPAREN       reduce using rule 100 (if -> IF expression ifelseblock block ifblockend .)
    IF              reduce using rule 100 (if -> IF expression ifelseblock block ifblockend .)
    WHILE           reduce using rule 100 (if -> IF expression ifelseblock block ifblockend .)
    FUNCTION        reduce using rule 100 (if -> IF expression ifelseblock block ifblockend .)
    FOR             reduce using rule 100 (if -> IF expression ifelseblock block ifblockend .)
    RIGHTBRACE      reduce using rule 100 (if -> IF expression ifelseblock block ifblockend .)
    $end            reduce using rule 100 (if -> IF expression ifelseblock block ifblockend .)
    RIGHTPAREN      reduce using rule 100 (if -> IF expression ifelseblock block ifblockend .)


state 189

    (102) ifelse -> IF expression ifelseblock block ELSE . elseblock block elseblockend
    (104) elseblock -> . empty
    (135) empty -> .

    LEFTBRACE       reduce using rule 135 (empty -> .)

    elseblock                      shift and go to state 208
    empty                          shift and go to state 209

state 190

    (128) funcdecl -> FUNCTION ID funcscopedefnormal LEFTPAREN funcarghead . RIGHTPAREN funblock endfunc

    RIGHTPAREN      shift and go to state 210


state 191

    (124) funcarghead -> funcargList .

    RIGHTPAREN      reduce using rule 124 (funcarghead -> funcargList .)


state 192

    (125) funcargList -> ID . COMMA funcargList
    (126) funcargList -> ID .

    COMMA           shift and go to state 211
    RIGHTPAREN      reduce using rule 126 (funcargList -> ID .)


state 193

    (20) statement -> CONSOLE DOT LOG LEFTPAREN printList . RIGHTPAREN SEMICOLON

    RIGHTPAREN      shift and go to state 212


state 194

    (21) printList -> expression . COMMA printList
    (22) printList -> expression .
    (52) expression -> expression . PLUS expression
    (53) expression -> expression . MINUS expression
    (54) expression -> expression . INTO expression
    (55) expression -> expression . DIVIDE expression
    (56) expression -> expression . MOD expression
    (59) expression -> expression . BINAND expression
    (60) expression -> expression . BINOR expression
    (61) expression -> expression . BINXOR expression
    (63) expression -> expression . LT expression
    (64) expression -> expression . GT expression
    (65) expression -> expression . DOUBLEEQ expression
    (66) expression -> expression . NOTEQUAL expression
    (67) expression -> expression . LTE expression
    (68) expression -> expression . GTE expression
    (69) expression -> expression . STREQUAL expression
    (70) expression -> expression . STRNEQUAL expression
    (71) expression -> expression . AND expression
    (72) expression -> expression . OR expression
    (73) expression -> expression . LSHIFT expression
    (74) expression -> expression . RSHIFT expression
    (75) expression -> expression . URSHIFT expression

    COMMA           shift and go to state 213
    RIGHTPAREN      reduce using rule 22 (printList -> expression .)
    PLUS            shift and go to state 95
    MINUS           shift and go to state 89
    INTO            shift and go to state 99
    DIVIDE          shift and go to state 98
    MOD             shift and go to state 105
    BINAND          shift and go to state 91
    BINOR           shift and go to state 102
    BINXOR          shift and go to state 96
    LT              shift and go to state 94
    GT              shift and go to state 97
    DOUBLEEQ        shift and go to state 84
    NOTEQUAL        shift and go to state 85
    LTE             shift and go to state 100
    GTE             shift and go to state 90
    STREQUAL        shift and go to state 93
    STRNEQUAL       shift and go to state 86
    AND             shift and go to state 101
    OR              shift and go to state 104
    LSHIFT          shift and go to state 87
    RSHIFT          shift and go to state 88
    URSHIFT         shift and go to state 103


state 195

    (48) arrayList -> array . COMMA arrayList
    (49) arrayList -> array .

    COMMA           shift and go to state 214
    RIGHTBRACKET    reduce using rule 49 (arrayList -> array .)


state 196

    (47) array -> LEFTBRACKET arrayList . RIGHTBRACKET

    RIGHTBRACKET    shift and go to state 215


state 197

    (50) arrayList -> expression . COMMA arrayList
    (51) arrayList -> expression .
    (52) expression -> expression . PLUS expression
    (53) expression -> expression . MINUS expression
    (54) expression -> expression . INTO expression
    (55) expression -> expression . DIVIDE expression
    (56) expression -> expression . MOD expression
    (59) expression -> expression . BINAND expression
    (60) expression -> expression . BINOR expression
    (61) expression -> expression . BINXOR expression
    (63) expression -> expression . LT expression
    (64) expression -> expression . GT expression
    (65) expression -> expression . DOUBLEEQ expression
    (66) expression -> expression . NOTEQUAL expression
    (67) expression -> expression . LTE expression
    (68) expression -> expression . GTE expression
    (69) expression -> expression . STREQUAL expression
    (70) expression -> expression . STRNEQUAL expression
    (71) expression -> expression . AND expression
    (72) expression -> expression . OR expression
    (73) expression -> expression . LSHIFT expression
    (74) expression -> expression . RSHIFT expression
    (75) expression -> expression . URSHIFT expression

    COMMA           shift and go to state 216
    RIGHTBRACKET    reduce using rule 51 (arrayList -> expression .)
    PLUS            shift and go to state 95
    MINUS           shift and go to state 89
    INTO            shift and go to state 99
    DIVIDE          shift and go to state 98
    MOD             shift and go to state 105
    BINAND          shift and go to state 91
    BINOR           shift and go to state 102
    BINXOR          shift and go to state 96
    LT              shift and go to state 94
    GT              shift and go to state 97
    DOUBLEEQ        shift and go to state 84
    NOTEQUAL        shift and go to state 85
    LTE             shift and go to state 100
    GTE             shift and go to state 90
    STREQUAL        shift and go to state 93
    STRNEQUAL       shift and go to state 86
    AND             shift and go to state 101
    OR              shift and go to state 104
    LSHIFT          shift and go to state 87
    RSHIFT          shift and go to state 88
    URSHIFT         shift and go to state 103


state 198

    (131) funcdecl -> VAR ID EQ FUNCTION funcscopedef . LEFTPAREN funcarghead RIGHTPAREN funblock SEMICOLON endfuncdecl

    LEFTPAREN       shift and go to state 217


state 199

    (27) assignlist -> ID EQ expression COMMA . assignlist
    (27) assignlist -> . ID EQ expression COMMA assignlist
    (28) assignlist -> . ID EQ expression
    (29) assignlist -> . ID EQ array

    ID              shift and go to state 186

    assignlist                     shift and go to state 218

state 200

    (90) reference -> LEFTBRACKET expression RIGHTBRACKET reference .

    SEMICOLON       reduce using rule 90 (reference -> LEFTBRACKET expression RIGHTBRACKET reference .)
    PLUS            reduce using rule 90 (reference -> LEFTBRACKET expression RIGHTBRACKET reference .)
    MINUS           reduce using rule 90 (reference -> LEFTBRACKET expression RIGHTBRACKET reference .)
    INTO            reduce using rule 90 (reference -> LEFTBRACKET expression RIGHTBRACKET reference .)
    DIVIDE          reduce using rule 90 (reference -> LEFTBRACKET expression RIGHTBRACKET reference .)
    MOD             reduce using rule 90 (reference -> LEFTBRACKET expression RIGHTBRACKET reference .)
    BINAND          reduce using rule 90 (reference -> LEFTBRACKET expression RIGHTBRACKET reference .)
    BINOR           reduce using rule 90 (reference -> LEFTBRACKET expression RIGHTBRACKET reference .)
    BINXOR          reduce using rule 90 (reference -> LEFTBRACKET expression RIGHTBRACKET reference .)
    LT              reduce using rule 90 (reference -> LEFTBRACKET expression RIGHTBRACKET reference .)
    GT              reduce using rule 90 (reference -> LEFTBRACKET expression RIGHTBRACKET reference .)
    DOUBLEEQ        reduce using rule 90 (reference -> LEFTBRACKET expression RIGHTBRACKET reference .)
    NOTEQUAL        reduce using rule 90 (reference -> LEFTBRACKET expression RIGHTBRACKET reference .)
    LTE             reduce using rule 90 (reference -> LEFTBRACKET expression RIGHTBRACKET reference .)
    GTE             reduce using rule 90 (reference -> LEFTBRACKET expression RIGHTBRACKET reference .)
    STREQUAL        reduce using rule 90 (reference -> LEFTBRACKET expression RIGHTBRACKET reference .)
    STRNEQUAL       reduce using rule 90 (reference -> LEFTBRACKET expression RIGHTBRACKET reference .)
    AND             reduce using rule 90 (reference -> LEFTBRACKET expression RIGHTBRACKET reference .)
    OR              reduce using rule 90 (reference -> LEFTBRACKET expression RIGHTBRACKET reference .)
    LSHIFT          reduce using rule 90 (reference -> LEFTBRACKET expression RIGHTBRACKET reference .)
    RSHIFT          reduce using rule 90 (reference -> LEFTBRACKET expression RIGHTBRACKET reference .)
    URSHIFT         reduce using rule 90 (reference -> LEFTBRACKET expression RIGHTBRACKET reference .)
    LEFTBRACE       reduce using rule 90 (reference -> LEFTBRACKET expression RIGHTBRACKET reference .)
    RIGHTPAREN      reduce using rule 90 (reference -> LEFTBRACKET expression RIGHTBRACKET reference .)
    COMMA           reduce using rule 90 (reference -> LEFTBRACKET expression RIGHTBRACKET reference .)
    RIGHTBRACKET    reduce using rule 90 (reference -> LEFTBRACKET expression RIGHTBRACKET reference .)
    EQ              reduce using rule 90 (reference -> LEFTBRACKET expression RIGHTBRACKET reference .)


state 201

    (98) argList -> expression COMMA argList .

    RIGHTPAREN      reduce using rule 98 (argList -> expression COMMA argList .)


state 202

    (106) whileloop -> WHILE whileblockstart LEFTPAREN expression RIGHTPAREN exprcheck . block whileblockend
    (3) block -> . LEFTBRACE blockmarker statements RIGHTBRACE

    LEFTBRACE       shift and go to state 23

    block                          shift and go to state 219

state 203

    (108) exprcheck -> empty .

    LEFTBRACE       reduce using rule 108 (exprcheck -> empty .)


state 204

    (76) expression -> EVAL LEFTPAREN evalmarker statements evalendmarker . RIGHTPAREN

    RIGHTPAREN      shift and go to state 220


state 205

    (110) forloop -> FOR scope_marker LEFTPAREN initialization SEMICOLON forexpr_marker . for_expr forcheck_marker SEMICOLON increment increment_marker RIGHTPAREN forblock endblock_marker
    (121) for_expr -> . expression
    (52) expression -> . expression PLUS expression
    (53) expression -> . expression MINUS expression
    (54) expression -> . expression INTO expression
    (55) expression -> . expression DIVIDE expression
    (56) expression -> . expression MOD expression
    (57) expression -> . LEFTPAREN expression RIGHTPAREN
    (58) expression -> . NOT expression
    (59) expression -> . expression BINAND expression
    (60) expression -> . expression BINOR expression
    (61) expression -> . expression BINXOR expression
    (62) expression -> . BINNOT expression
    (63) expression -> . expression LT expression
    (64) expression -> . expression GT expression
    (65) expression -> . expression DOUBLEEQ expression
    (66) expression -> . expression NOTEQUAL expression
    (67) expression -> . expression LTE expression
    (68) expression -> . expression GTE expression
    (69) expression -> . expression STREQUAL expression
    (70) expression -> . expression STRNEQUAL expression
    (71) expression -> . expression AND expression
    (72) expression -> . expression OR expression
    (73) expression -> . expression LSHIFT expression
    (74) expression -> . expression RSHIFT expression
    (75) expression -> . expression URSHIFT expression
    (76) expression -> . EVAL LEFTPAREN evalmarker statements evalendmarker RIGHTPAREN
    (77) expression -> . EVAL LEFTPAREN block RIGHTPAREN
    (78) expression -> . EVAL LEFTPAREN expression RIGHTPAREN
    (81) expression -> . basicTypes
    (82) expression -> . ID
    (83) expression -> . TYPEOF expression
    (87) expression -> . arrayCall
    (92) basicTypes -> . NUMBER
    (93) basicTypes -> . BOOLEAN
    (94) basicTypes -> . STRING
    (95) basicTypes -> . UNDEFINED
    (89) arrayCall -> . ID reference

    LEFTPAREN       shift and go to state 37
    NOT             shift and go to state 41
    BINNOT          shift and go to state 43
    EVAL            shift and go to state 31
    ID              shift and go to state 38
    TYPEOF          shift and go to state 36
    NUMBER          shift and go to state 32
    BOOLEAN         shift and go to state 40
    STRING          shift and go to state 35
    UNDEFINED       shift and go to state 33

    arrayCall                      shift and go to state 34
    for_expr                       shift and go to state 221
    basicTypes                     shift and go to state 42
    expression                     shift and go to state 222

state 206

    (27) assignlist -> ID EQ . expression COMMA assignlist
    (28) assignlist -> ID EQ . expression
    (29) assignlist -> ID EQ . array
    (52) expression -> . expression PLUS expression
    (53) expression -> . expression MINUS expression
    (54) expression -> . expression INTO expression
    (55) expression -> . expression DIVIDE expression
    (56) expression -> . expression MOD expression
    (57) expression -> . LEFTPAREN expression RIGHTPAREN
    (58) expression -> . NOT expression
    (59) expression -> . expression BINAND expression
    (60) expression -> . expression BINOR expression
    (61) expression -> . expression BINXOR expression
    (62) expression -> . BINNOT expression
    (63) expression -> . expression LT expression
    (64) expression -> . expression GT expression
    (65) expression -> . expression DOUBLEEQ expression
    (66) expression -> . expression NOTEQUAL expression
    (67) expression -> . expression LTE expression
    (68) expression -> . expression GTE expression
    (69) expression -> . expression STREQUAL expression
    (70) expression -> . expression STRNEQUAL expression
    (71) expression -> . expression AND expression
    (72) expression -> . expression OR expression
    (73) expression -> . expression LSHIFT expression
    (74) expression -> . expression RSHIFT expression
    (75) expression -> . expression URSHIFT expression
    (76) expression -> . EVAL LEFTPAREN evalmarker statements evalendmarker RIGHTPAREN
    (77) expression -> . EVAL LEFTPAREN block RIGHTPAREN
    (78) expression -> . EVAL LEFTPAREN expression RIGHTPAREN
    (81) expression -> . basicTypes
    (82) expression -> . ID
    (83) expression -> . TYPEOF expression
    (87) expression -> . arrayCall
    (47) array -> . LEFTBRACKET arrayList RIGHTBRACKET
    (92) basicTypes -> . NUMBER
    (93) basicTypes -> . BOOLEAN
    (94) basicTypes -> . STRING
    (95) basicTypes -> . UNDEFINED
    (89) arrayCall -> . ID reference

    LEFTPAREN       shift and go to state 37
    NOT             shift and go to state 41
    BINNOT          shift and go to state 43
    EVAL            shift and go to state 31
    ID              shift and go to state 38
    TYPEOF          shift and go to state 36
    LEFTBRACKET     shift and go to state 172
    NUMBER          shift and go to state 32
    BOOLEAN         shift and go to state 40
    STRING          shift and go to state 35
    UNDEFINED       shift and go to state 33

    arrayCall                      shift and go to state 34
    array                          shift and go to state 171
    expression                     shift and go to state 176
    basicTypes                     shift and go to state 42

state 207

    (119) reinitialization -> reassignment COMMA reinitialization .

    SEMICOLON       reduce using rule 119 (reinitialization -> reassignment COMMA reinitialization .)


state 208

    (102) ifelse -> IF expression ifelseblock block ELSE elseblock . block elseblockend
    (3) block -> . LEFTBRACE blockmarker statements RIGHTBRACE

    LEFTBRACE       shift and go to state 23

    block                          shift and go to state 223

state 209

    (104) elseblock -> empty .

    LEFTBRACE       reduce using rule 104 (elseblock -> empty .)


state 210

    (128) funcdecl -> FUNCTION ID funcscopedefnormal LEFTPAREN funcarghead RIGHTPAREN . funblock endfunc
    (132) funblock -> . LEFTBRACE statements RIGHTBRACE

    LEFTBRACE       shift and go to state 225

    funblock                       shift and go to state 224

state 211

    (125) funcargList -> ID COMMA . funcargList
    (125) funcargList -> . ID COMMA funcargList
    (126) funcargList -> . ID
    (127) funcargList -> .

    ID              shift and go to state 192
    RIGHTPAREN      reduce using rule 127 (funcargList -> .)

    funcargList                    shift and go to state 226

state 212

    (20) statement -> CONSOLE DOT LOG LEFTPAREN printList RIGHTPAREN . SEMICOLON

    SEMICOLON       shift and go to state 227


state 213

    (21) printList -> expression COMMA . printList
    (21) printList -> . expression COMMA printList
    (22) printList -> . expression
    (52) expression -> . expression PLUS expression
    (53) expression -> . expression MINUS expression
    (54) expression -> . expression INTO expression
    (55) expression -> . expression DIVIDE expression
    (56) expression -> . expression MOD expression
    (57) expression -> . LEFTPAREN expression RIGHTPAREN
    (58) expression -> . NOT expression
    (59) expression -> . expression BINAND expression
    (60) expression -> . expression BINOR expression
    (61) expression -> . expression BINXOR expression
    (62) expression -> . BINNOT expression
    (63) expression -> . expression LT expression
    (64) expression -> . expression GT expression
    (65) expression -> . expression DOUBLEEQ expression
    (66) expression -> . expression NOTEQUAL expression
    (67) expression -> . expression LTE expression
    (68) expression -> . expression GTE expression
    (69) expression -> . expression STREQUAL expression
    (70) expression -> . expression STRNEQUAL expression
    (71) expression -> . expression AND expression
    (72) expression -> . expression OR expression
    (73) expression -> . expression LSHIFT expression
    (74) expression -> . expression RSHIFT expression
    (75) expression -> . expression URSHIFT expression
    (76) expression -> . EVAL LEFTPAREN evalmarker statements evalendmarker RIGHTPAREN
    (77) expression -> . EVAL LEFTPAREN block RIGHTPAREN
    (78) expression -> . EVAL LEFTPAREN expression RIGHTPAREN
    (81) expression -> . basicTypes
    (82) expression -> . ID
    (83) expression -> . TYPEOF expression
    (87) expression -> . arrayCall
    (92) basicTypes -> . NUMBER
    (93) basicTypes -> . BOOLEAN
    (94) basicTypes -> . STRING
    (95) basicTypes -> . UNDEFINED
    (89) arrayCall -> . ID reference

    LEFTPAREN       shift and go to state 37
    NOT             shift and go to state 41
    BINNOT          shift and go to state 43
    EVAL            shift and go to state 31
    ID              shift and go to state 38
    TYPEOF          shift and go to state 36
    NUMBER          shift and go to state 32
    BOOLEAN         shift and go to state 40
    STRING          shift and go to state 35
    UNDEFINED       shift and go to state 33

    printList                      shift and go to state 228
    arrayCall                      shift and go to state 34
    expression                     shift and go to state 194
    basicTypes                     shift and go to state 42

state 214

    (48) arrayList -> array COMMA . arrayList
    (48) arrayList -> . array COMMA arrayList
    (49) arrayList -> . array
    (50) arrayList -> . expression COMMA arrayList
    (51) arrayList -> . expression
    (47) array -> . LEFTBRACKET arrayList RIGHTBRACKET
    (52) expression -> . expression PLUS expression
    (53) expression -> . expression MINUS expression
    (54) expression -> . expression INTO expression
    (55) expression -> . expression DIVIDE expression
    (56) expression -> . expression MOD expression
    (57) expression -> . LEFTPAREN expression RIGHTPAREN
    (58) expression -> . NOT expression
    (59) expression -> . expression BINAND expression
    (60) expression -> . expression BINOR expression
    (61) expression -> . expression BINXOR expression
    (62) expression -> . BINNOT expression
    (63) expression -> . expression LT expression
    (64) expression -> . expression GT expression
    (65) expression -> . expression DOUBLEEQ expression
    (66) expression -> . expression NOTEQUAL expression
    (67) expression -> . expression LTE expression
    (68) expression -> . expression GTE expression
    (69) expression -> . expression STREQUAL expression
    (70) expression -> . expression STRNEQUAL expression
    (71) expression -> . expression AND expression
    (72) expression -> . expression OR expression
    (73) expression -> . expression LSHIFT expression
    (74) expression -> . expression RSHIFT expression
    (75) expression -> . expression URSHIFT expression
    (76) expression -> . EVAL LEFTPAREN evalmarker statements evalendmarker RIGHTPAREN
    (77) expression -> . EVAL LEFTPAREN block RIGHTPAREN
    (78) expression -> . EVAL LEFTPAREN expression RIGHTPAREN
    (81) expression -> . basicTypes
    (82) expression -> . ID
    (83) expression -> . TYPEOF expression
    (87) expression -> . arrayCall
    (92) basicTypes -> . NUMBER
    (93) basicTypes -> . BOOLEAN
    (94) basicTypes -> . STRING
    (95) basicTypes -> . UNDEFINED
    (89) arrayCall -> . ID reference

    LEFTBRACKET     shift and go to state 172
    LEFTPAREN       shift and go to state 37
    NOT             shift and go to state 41
    BINNOT          shift and go to state 43
    EVAL            shift and go to state 31
    ID              shift and go to state 38
    TYPEOF          shift and go to state 36
    NUMBER          shift and go to state 32
    BOOLEAN         shift and go to state 40
    STRING          shift and go to state 35
    UNDEFINED       shift and go to state 33

    arrayList                      shift and go to state 229
    arrayCall                      shift and go to state 34
    array                          shift and go to state 195
    expression                     shift and go to state 197
    basicTypes                     shift and go to state 42

state 215

    (47) array -> LEFTBRACKET arrayList RIGHTBRACKET .

    COMMA           reduce using rule 47 (array -> LEFTBRACKET arrayList RIGHTBRACKET .)
    RIGHTBRACKET    reduce using rule 47 (array -> LEFTBRACKET arrayList RIGHTBRACKET .)
    SEMICOLON       reduce using rule 47 (array -> LEFTBRACKET arrayList RIGHTBRACKET .)


state 216

    (50) arrayList -> expression COMMA . arrayList
    (48) arrayList -> . array COMMA arrayList
    (49) arrayList -> . array
    (50) arrayList -> . expression COMMA arrayList
    (51) arrayList -> . expression
    (47) array -> . LEFTBRACKET arrayList RIGHTBRACKET
    (52) expression -> . expression PLUS expression
    (53) expression -> . expression MINUS expression
    (54) expression -> . expression INTO expression
    (55) expression -> . expression DIVIDE expression
    (56) expression -> . expression MOD expression
    (57) expression -> . LEFTPAREN expression RIGHTPAREN
    (58) expression -> . NOT expression
    (59) expression -> . expression BINAND expression
    (60) expression -> . expression BINOR expression
    (61) expression -> . expression BINXOR expression
    (62) expression -> . BINNOT expression
    (63) expression -> . expression LT expression
    (64) expression -> . expression GT expression
    (65) expression -> . expression DOUBLEEQ expression
    (66) expression -> . expression NOTEQUAL expression
    (67) expression -> . expression LTE expression
    (68) expression -> . expression GTE expression
    (69) expression -> . expression STREQUAL expression
    (70) expression -> . expression STRNEQUAL expression
    (71) expression -> . expression AND expression
    (72) expression -> . expression OR expression
    (73) expression -> . expression LSHIFT expression
    (74) expression -> . expression RSHIFT expression
    (75) expression -> . expression URSHIFT expression
    (76) expression -> . EVAL LEFTPAREN evalmarker statements evalendmarker RIGHTPAREN
    (77) expression -> . EVAL LEFTPAREN block RIGHTPAREN
    (78) expression -> . EVAL LEFTPAREN expression RIGHTPAREN
    (81) expression -> . basicTypes
    (82) expression -> . ID
    (83) expression -> . TYPEOF expression
    (87) expression -> . arrayCall
    (92) basicTypes -> . NUMBER
    (93) basicTypes -> . BOOLEAN
    (94) basicTypes -> . STRING
    (95) basicTypes -> . UNDEFINED
    (89) arrayCall -> . ID reference

    LEFTBRACKET     shift and go to state 172
    LEFTPAREN       shift and go to state 37
    NOT             shift and go to state 41
    BINNOT          shift and go to state 43
    EVAL            shift and go to state 31
    ID              shift and go to state 38
    TYPEOF          shift and go to state 36
    NUMBER          shift and go to state 32
    BOOLEAN         shift and go to state 40
    STRING          shift and go to state 35
    UNDEFINED       shift and go to state 33

    arrayList                      shift and go to state 230
    arrayCall                      shift and go to state 34
    array                          shift and go to state 195
    expression                     shift and go to state 197
    basicTypes                     shift and go to state 42

state 217

    (131) funcdecl -> VAR ID EQ FUNCTION funcscopedef LEFTPAREN . funcarghead RIGHTPAREN funblock SEMICOLON endfuncdecl
    (124) funcarghead -> . funcargList
    (125) funcargList -> . ID COMMA funcargList
    (126) funcargList -> . ID
    (127) funcargList -> .

    ID              shift and go to state 192
    RIGHTPAREN      reduce using rule 127 (funcargList -> .)

    funcarghead                    shift and go to state 231
    funcargList                    shift and go to state 191

state 218

    (27) assignlist -> ID EQ expression COMMA assignlist .

    SEMICOLON       reduce using rule 27 (assignlist -> ID EQ expression COMMA assignlist .)


state 219

    (106) whileloop -> WHILE whileblockstart LEFTPAREN expression RIGHTPAREN exprcheck block . whileblockend
    (109) whileblockend -> . empty
    (135) empty -> .

    BREAK           reduce using rule 135 (empty -> .)
    CONTINUE        reduce using rule 135 (empty -> .)
    RETURN          reduce using rule 135 (empty -> .)
    CONSOLE         reduce using rule 135 (empty -> .)
    VAR             reduce using rule 135 (empty -> .)
    ID              reduce using rule 135 (empty -> .)
    LEFTPAREN       reduce using rule 135 (empty -> .)
    IF              reduce using rule 135 (empty -> .)
    WHILE           reduce using rule 135 (empty -> .)
    FUNCTION        reduce using rule 135 (empty -> .)
    FOR             reduce using rule 135 (empty -> .)
    $end            reduce using rule 135 (empty -> .)
    RIGHTBRACE      reduce using rule 135 (empty -> .)
    RIGHTPAREN      reduce using rule 135 (empty -> .)

    whileblockend                  shift and go to state 232
    empty                          shift and go to state 233

state 220

    (76) expression -> EVAL LEFTPAREN evalmarker statements evalendmarker RIGHTPAREN .

    PLUS            reduce using rule 76 (expression -> EVAL LEFTPAREN evalmarker statements evalendmarker RIGHTPAREN .)
    MINUS           reduce using rule 76 (expression -> EVAL LEFTPAREN evalmarker statements evalendmarker RIGHTPAREN .)
    INTO            reduce using rule 76 (expression -> EVAL LEFTPAREN evalmarker statements evalendmarker RIGHTPAREN .)
    DIVIDE          reduce using rule 76 (expression -> EVAL LEFTPAREN evalmarker statements evalendmarker RIGHTPAREN .)
    MOD             reduce using rule 76 (expression -> EVAL LEFTPAREN evalmarker statements evalendmarker RIGHTPAREN .)
    BINAND          reduce using rule 76 (expression -> EVAL LEFTPAREN evalmarker statements evalendmarker RIGHTPAREN .)
    BINOR           reduce using rule 76 (expression -> EVAL LEFTPAREN evalmarker statements evalendmarker RIGHTPAREN .)
    BINXOR          reduce using rule 76 (expression -> EVAL LEFTPAREN evalmarker statements evalendmarker RIGHTPAREN .)
    LT              reduce using rule 76 (expression -> EVAL LEFTPAREN evalmarker statements evalendmarker RIGHTPAREN .)
    GT              reduce using rule 76 (expression -> EVAL LEFTPAREN evalmarker statements evalendmarker RIGHTPAREN .)
    DOUBLEEQ        reduce using rule 76 (expression -> EVAL LEFTPAREN evalmarker statements evalendmarker RIGHTPAREN .)
    NOTEQUAL        reduce using rule 76 (expression -> EVAL LEFTPAREN evalmarker statements evalendmarker RIGHTPAREN .)
    LTE             reduce using rule 76 (expression -> EVAL LEFTPAREN evalmarker statements evalendmarker RIGHTPAREN .)
    GTE             reduce using rule 76 (expression -> EVAL LEFTPAREN evalmarker statements evalendmarker RIGHTPAREN .)
    STREQUAL        reduce using rule 76 (expression -> EVAL LEFTPAREN evalmarker statements evalendmarker RIGHTPAREN .)
    STRNEQUAL       reduce using rule 76 (expression -> EVAL LEFTPAREN evalmarker statements evalendmarker RIGHTPAREN .)
    AND             reduce using rule 76 (expression -> EVAL LEFTPAREN evalmarker statements evalendmarker RIGHTPAREN .)
    OR              reduce using rule 76 (expression -> EVAL LEFTPAREN evalmarker statements evalendmarker RIGHTPAREN .)
    LSHIFT          reduce using rule 76 (expression -> EVAL LEFTPAREN evalmarker statements evalendmarker RIGHTPAREN .)
    RSHIFT          reduce using rule 76 (expression -> EVAL LEFTPAREN evalmarker statements evalendmarker RIGHTPAREN .)
    URSHIFT         reduce using rule 76 (expression -> EVAL LEFTPAREN evalmarker statements evalendmarker RIGHTPAREN .)
    SEMICOLON       reduce using rule 76 (expression -> EVAL LEFTPAREN evalmarker statements evalendmarker RIGHTPAREN .)
    RIGHTPAREN      reduce using rule 76 (expression -> EVAL LEFTPAREN evalmarker statements evalendmarker RIGHTPAREN .)
    COMMA           reduce using rule 76 (expression -> EVAL LEFTPAREN evalmarker statements evalendmarker RIGHTPAREN .)
    LEFTBRACE       reduce using rule 76 (expression -> EVAL LEFTPAREN evalmarker statements evalendmarker RIGHTPAREN .)
    RIGHTBRACKET    reduce using rule 76 (expression -> EVAL LEFTPAREN evalmarker statements evalendmarker RIGHTPAREN .)


state 221

    (110) forloop -> FOR scope_marker LEFTPAREN initialization SEMICOLON forexpr_marker for_expr . forcheck_marker SEMICOLON increment increment_marker RIGHTPAREN forblock endblock_marker
    (113) forcheck_marker -> .

    SEMICOLON       reduce using rule 113 (forcheck_marker -> .)

    forcheck_marker                shift and go to state 234

state 222

    (121) for_expr -> expression .
    (52) expression -> expression . PLUS expression
    (53) expression -> expression . MINUS expression
    (54) expression -> expression . INTO expression
    (55) expression -> expression . DIVIDE expression
    (56) expression -> expression . MOD expression
    (59) expression -> expression . BINAND expression
    (60) expression -> expression . BINOR expression
    (61) expression -> expression . BINXOR expression
    (63) expression -> expression . LT expression
    (64) expression -> expression . GT expression
    (65) expression -> expression . DOUBLEEQ expression
    (66) expression -> expression . NOTEQUAL expression
    (67) expression -> expression . LTE expression
    (68) expression -> expression . GTE expression
    (69) expression -> expression . STREQUAL expression
    (70) expression -> expression . STRNEQUAL expression
    (71) expression -> expression . AND expression
    (72) expression -> expression . OR expression
    (73) expression -> expression . LSHIFT expression
    (74) expression -> expression . RSHIFT expression
    (75) expression -> expression . URSHIFT expression

    SEMICOLON       reduce using rule 121 (for_expr -> expression .)
    PLUS            shift and go to state 95
    MINUS           shift and go to state 89
    INTO            shift and go to state 99
    DIVIDE          shift and go to state 98
    MOD             shift and go to state 105
    BINAND          shift and go to state 91
    BINOR           shift and go to state 102
    BINXOR          shift and go to state 96
    LT              shift and go to state 94
    GT              shift and go to state 97
    DOUBLEEQ        shift and go to state 84
    NOTEQUAL        shift and go to state 85
    LTE             shift and go to state 100
    GTE             shift and go to state 90
    STREQUAL        shift and go to state 93
    STRNEQUAL       shift and go to state 86
    AND             shift and go to state 101
    OR              shift and go to state 104
    LSHIFT          shift and go to state 87
    RSHIFT          shift and go to state 88
    URSHIFT         shift and go to state 103


state 223

    (102) ifelse -> IF expression ifelseblock block ELSE elseblock block . elseblockend
    (105) elseblockend -> . empty
    (135) empty -> .

    BREAK           reduce using rule 135 (empty -> .)
    CONTINUE        reduce using rule 135 (empty -> .)
    RETURN          reduce using rule 135 (empty -> .)
    CONSOLE         reduce using rule 135 (empty -> .)
    VAR             reduce using rule 135 (empty -> .)
    ID              reduce using rule 135 (empty -> .)
    LEFTPAREN       reduce using rule 135 (empty -> .)
    IF              reduce using rule 135 (empty -> .)
    WHILE           reduce using rule 135 (empty -> .)
    FUNCTION        reduce using rule 135 (empty -> .)
    FOR             reduce using rule 135 (empty -> .)
    $end            reduce using rule 135 (empty -> .)
    RIGHTBRACE      reduce using rule 135 (empty -> .)
    RIGHTPAREN      reduce using rule 135 (empty -> .)

    elseblockend                   shift and go to state 236
    empty                          shift and go to state 235

state 224

    (128) funcdecl -> FUNCTION ID funcscopedefnormal LEFTPAREN funcarghead RIGHTPAREN funblock . endfunc
    (130) endfunc -> . empty
    (135) empty -> .

    BREAK           reduce using rule 135 (empty -> .)
    CONTINUE        reduce using rule 135 (empty -> .)
    RETURN          reduce using rule 135 (empty -> .)
    CONSOLE         reduce using rule 135 (empty -> .)
    VAR             reduce using rule 135 (empty -> .)
    ID              reduce using rule 135 (empty -> .)
    LEFTPAREN       reduce using rule 135 (empty -> .)
    IF              reduce using rule 135 (empty -> .)
    WHILE           reduce using rule 135 (empty -> .)
    FUNCTION        reduce using rule 135 (empty -> .)
    FOR             reduce using rule 135 (empty -> .)
    $end            reduce using rule 135 (empty -> .)
    RIGHTBRACE      reduce using rule 135 (empty -> .)
    RIGHTPAREN      reduce using rule 135 (empty -> .)

    endfunc                        shift and go to state 237
    empty                          shift and go to state 238

state 225

    (132) funblock -> LEFTBRACE . statements RIGHTBRACE
    (5) statements -> . statement statements
    (6) statements -> . statement
    (7) statement -> . assignment SEMICOLON
    (8) statement -> . declaration SEMICOLON
    (9) statement -> . reassignment SEMICOLON
    (10) statement -> . BREAK SEMICOLON
    (11) statement -> . CONTINUE SEMICOLON
    (12) statement -> . funcstmt SEMICOLON
    (13) statement -> . if
    (14) statement -> . ifelse
    (15) statement -> . whileloop
    (16) statement -> . funcdecl
    (17) statement -> . forloop
    (18) statement -> . reassignmentarray SEMICOLON
    (19) statement -> . RETURN expression SEMICOLON
    (20) statement -> . CONSOLE DOT LOG LEFTPAREN printList RIGHTPAREN SEMICOLON
    (26) assignment -> . VAR assignlist
    (23) declaration -> . VAR declarationList
    (30) reassignment -> . ID EQ expression
    (31) reassignment -> . ID PLUSEQ expression
    (32) reassignment -> . ID MINUSEQ expression
    (33) reassignment -> . ID INTOEQ expression
    (34) reassignment -> . ID DIVEQ expression
    (35) reassignment -> . ID INCR
    (36) reassignment -> . ID DECR
    (37) reassignment -> . ID LSHIFTEQ expression
    (38) reassignment -> . ID RSHIFTEQ expression
    (39) reassignment -> . ID URSHIFTEQ expression
    (40) reassignment -> . ID ANDEQ expression
    (41) reassignment -> . ID OREQ expression
    (42) reassignment -> . ID XOREQ expression
    (43) reassignment -> . ID MODEQ expression
    (44) reassignment -> . LEFTPAREN reassignment RIGHTPAREN
    (84) funcstmt -> . ID EQ functioncall
    (85) funcstmt -> . functioncall
    (86) funcstmt -> . VAR ID EQ functioncall
    (100) if -> . IF expression ifelseblock block ifblockend
    (102) ifelse -> . IF expression ifelseblock block ELSE elseblock block elseblockend
    (106) whileloop -> . WHILE whileblockstart LEFTPAREN expression RIGHTPAREN exprcheck block whileblockend
    (128) funcdecl -> . FUNCTION ID funcscopedefnormal LEFTPAREN funcarghead RIGHTPAREN funblock endfunc
    (131) funcdecl -> . VAR ID EQ FUNCTION funcscopedef LEFTPAREN funcarghead RIGHTPAREN funblock SEMICOLON endfuncdecl
    (110) forloop -> . FOR scope_marker LEFTPAREN initialization SEMICOLON forexpr_marker for_expr forcheck_marker SEMICOLON increment increment_marker RIGHTPAREN forblock endblock_marker
    (88) reassignmentarray -> . arrayCall EQ expression
    (96) functioncall -> . ID LEFTPAREN argList RIGHTPAREN
    (89) arrayCall -> . ID reference

    BREAK           shift and go to state 25
    CONTINUE        shift and go to state 26
    RETURN          shift and go to state 3
    CONSOLE         shift and go to state 17
    VAR             shift and go to state 21
    ID              shift and go to state 22
    LEFTPAREN       shift and go to state 19
    IF              shift and go to state 14
    WHILE           shift and go to state 2
    FUNCTION        shift and go to state 15
    FOR             shift and go to state 7

    statements                     shift and go to state 239
    if                             shift and go to state 4
    whileloop                      shift and go to state 5
    funcstmt                       shift and go to state 8
    arrayCall                      shift and go to state 9
    reassignmentarray              shift and go to state 11
    ifelse                         shift and go to state 12
    statement                      shift and go to state 13
    forloop                        shift and go to state 16
    assignment                     shift and go to state 18
    declaration                    shift and go to state 20
    funcdecl                       shift and go to state 24
    reassignment                   shift and go to state 6
    functioncall                   shift and go to state 27

state 226

    (125) funcargList -> ID COMMA funcargList .

    RIGHTPAREN      reduce using rule 125 (funcargList -> ID COMMA funcargList .)


state 227

    (20) statement -> CONSOLE DOT LOG LEFTPAREN printList RIGHTPAREN SEMICOLON .

    BREAK           reduce using rule 20 (statement -> CONSOLE DOT LOG LEFTPAREN printList RIGHTPAREN SEMICOLON .)
    CONTINUE        reduce using rule 20 (statement -> CONSOLE DOT LOG LEFTPAREN printList RIGHTPAREN SEMICOLON .)
    RETURN          reduce using rule 20 (statement -> CONSOLE DOT LOG LEFTPAREN printList RIGHTPAREN SEMICOLON .)
    CONSOLE         reduce using rule 20 (statement -> CONSOLE DOT LOG LEFTPAREN printList RIGHTPAREN SEMICOLON .)
    VAR             reduce using rule 20 (statement -> CONSOLE DOT LOG LEFTPAREN printList RIGHTPAREN SEMICOLON .)
    ID              reduce using rule 20 (statement -> CONSOLE DOT LOG LEFTPAREN printList RIGHTPAREN SEMICOLON .)
    LEFTPAREN       reduce using rule 20 (statement -> CONSOLE DOT LOG LEFTPAREN printList RIGHTPAREN SEMICOLON .)
    IF              reduce using rule 20 (statement -> CONSOLE DOT LOG LEFTPAREN printList RIGHTPAREN SEMICOLON .)
    WHILE           reduce using rule 20 (statement -> CONSOLE DOT LOG LEFTPAREN printList RIGHTPAREN SEMICOLON .)
    FUNCTION        reduce using rule 20 (statement -> CONSOLE DOT LOG LEFTPAREN printList RIGHTPAREN SEMICOLON .)
    FOR             reduce using rule 20 (statement -> CONSOLE DOT LOG LEFTPAREN printList RIGHTPAREN SEMICOLON .)
    RIGHTBRACE      reduce using rule 20 (statement -> CONSOLE DOT LOG LEFTPAREN printList RIGHTPAREN SEMICOLON .)
    $end            reduce using rule 20 (statement -> CONSOLE DOT LOG LEFTPAREN printList RIGHTPAREN SEMICOLON .)
    RIGHTPAREN      reduce using rule 20 (statement -> CONSOLE DOT LOG LEFTPAREN printList RIGHTPAREN SEMICOLON .)


state 228

    (21) printList -> expression COMMA printList .

    RIGHTPAREN      reduce using rule 21 (printList -> expression COMMA printList .)


state 229

    (48) arrayList -> array COMMA arrayList .

    RIGHTBRACKET    reduce using rule 48 (arrayList -> array COMMA arrayList .)


state 230

    (50) arrayList -> expression COMMA arrayList .

    RIGHTBRACKET    reduce using rule 50 (arrayList -> expression COMMA arrayList .)


state 231

    (131) funcdecl -> VAR ID EQ FUNCTION funcscopedef LEFTPAREN funcarghead . RIGHTPAREN funblock SEMICOLON endfuncdecl

    RIGHTPAREN      shift and go to state 240


state 232

    (106) whileloop -> WHILE whileblockstart LEFTPAREN expression RIGHTPAREN exprcheck block whileblockend .

    BREAK           reduce using rule 106 (whileloop -> WHILE whileblockstart LEFTPAREN expression RIGHTPAREN exprcheck block whileblockend .)
    CONTINUE        reduce using rule 106 (whileloop -> WHILE whileblockstart LEFTPAREN expression RIGHTPAREN exprcheck block whileblockend .)
    RETURN          reduce using rule 106 (whileloop -> WHILE whileblockstart LEFTPAREN expression RIGHTPAREN exprcheck block whileblockend .)
    CONSOLE         reduce using rule 106 (whileloop -> WHILE whileblockstart LEFTPAREN expression RIGHTPAREN exprcheck block whileblockend .)
    VAR             reduce using rule 106 (whileloop -> WHILE whileblockstart LEFTPAREN expression RIGHTPAREN exprcheck block whileblockend .)
    ID              reduce using rule 106 (whileloop -> WHILE whileblockstart LEFTPAREN expression RIGHTPAREN exprcheck block whileblockend .)
    LEFTPAREN       reduce using rule 106 (whileloop -> WHILE whileblockstart LEFTPAREN expression RIGHTPAREN exprcheck block whileblockend .)
    IF              reduce using rule 106 (whileloop -> WHILE whileblockstart LEFTPAREN expression RIGHTPAREN exprcheck block whileblockend .)
    WHILE           reduce using rule 106 (whileloop -> WHILE whileblockstart LEFTPAREN expression RIGHTPAREN exprcheck block whileblockend .)
    FUNCTION        reduce using rule 106 (whileloop -> WHILE whileblockstart LEFTPAREN expression RIGHTPAREN exprcheck block whileblockend .)
    FOR             reduce using rule 106 (whileloop -> WHILE whileblockstart LEFTPAREN expression RIGHTPAREN exprcheck block whileblockend .)
    $end            reduce using rule 106 (whileloop -> WHILE whileblockstart LEFTPAREN expression RIGHTPAREN exprcheck block whileblockend .)
    RIGHTBRACE      reduce using rule 106 (whileloop -> WHILE whileblockstart LEFTPAREN expression RIGHTPAREN exprcheck block whileblockend .)
    RIGHTPAREN      reduce using rule 106 (whileloop -> WHILE whileblockstart LEFTPAREN expression RIGHTPAREN exprcheck block whileblockend .)


state 233

    (109) whileblockend -> empty .

    BREAK           reduce using rule 109 (whileblockend -> empty .)
    CONTINUE        reduce using rule 109 (whileblockend -> empty .)
    RETURN          reduce using rule 109 (whileblockend -> empty .)
    CONSOLE         reduce using rule 109 (whileblockend -> empty .)
    VAR             reduce using rule 109 (whileblockend -> empty .)
    ID              reduce using rule 109 (whileblockend -> empty .)
    LEFTPAREN       reduce using rule 109 (whileblockend -> empty .)
    IF              reduce using rule 109 (whileblockend -> empty .)
    WHILE           reduce using rule 109 (whileblockend -> empty .)
    FUNCTION        reduce using rule 109 (whileblockend -> empty .)
    FOR             reduce using rule 109 (whileblockend -> empty .)
    $end            reduce using rule 109 (whileblockend -> empty .)
    RIGHTBRACE      reduce using rule 109 (whileblockend -> empty .)
    RIGHTPAREN      reduce using rule 109 (whileblockend -> empty .)


state 234

    (110) forloop -> FOR scope_marker LEFTPAREN initialization SEMICOLON forexpr_marker for_expr forcheck_marker . SEMICOLON increment increment_marker RIGHTPAREN forblock endblock_marker

    SEMICOLON       shift and go to state 241


state 235

    (105) elseblockend -> empty .

    BREAK           reduce using rule 105 (elseblockend -> empty .)
    CONTINUE        reduce using rule 105 (elseblockend -> empty .)
    RETURN          reduce using rule 105 (elseblockend -> empty .)
    CONSOLE         reduce using rule 105 (elseblockend -> empty .)
    VAR             reduce using rule 105 (elseblockend -> empty .)
    ID              reduce using rule 105 (elseblockend -> empty .)
    LEFTPAREN       reduce using rule 105 (elseblockend -> empty .)
    IF              reduce using rule 105 (elseblockend -> empty .)
    WHILE           reduce using rule 105 (elseblockend -> empty .)
    FUNCTION        reduce using rule 105 (elseblockend -> empty .)
    FOR             reduce using rule 105 (elseblockend -> empty .)
    $end            reduce using rule 105 (elseblockend -> empty .)
    RIGHTBRACE      reduce using rule 105 (elseblockend -> empty .)
    RIGHTPAREN      reduce using rule 105 (elseblockend -> empty .)


state 236

    (102) ifelse -> IF expression ifelseblock block ELSE elseblock block elseblockend .

    BREAK           reduce using rule 102 (ifelse -> IF expression ifelseblock block ELSE elseblock block elseblockend .)
    CONTINUE        reduce using rule 102 (ifelse -> IF expression ifelseblock block ELSE elseblock block elseblockend .)
    RETURN          reduce using rule 102 (ifelse -> IF expression ifelseblock block ELSE elseblock block elseblockend .)
    CONSOLE         reduce using rule 102 (ifelse -> IF expression ifelseblock block ELSE elseblock block elseblockend .)
    VAR             reduce using rule 102 (ifelse -> IF expression ifelseblock block ELSE elseblock block elseblockend .)
    ID              reduce using rule 102 (ifelse -> IF expression ifelseblock block ELSE elseblock block elseblockend .)
    LEFTPAREN       reduce using rule 102 (ifelse -> IF expression ifelseblock block ELSE elseblock block elseblockend .)
    IF              reduce using rule 102 (ifelse -> IF expression ifelseblock block ELSE elseblock block elseblockend .)
    WHILE           reduce using rule 102 (ifelse -> IF expression ifelseblock block ELSE elseblock block elseblockend .)
    FUNCTION        reduce using rule 102 (ifelse -> IF expression ifelseblock block ELSE elseblock block elseblockend .)
    FOR             reduce using rule 102 (ifelse -> IF expression ifelseblock block ELSE elseblock block elseblockend .)
    RIGHTPAREN      reduce using rule 102 (ifelse -> IF expression ifelseblock block ELSE elseblock block elseblockend .)
    RIGHTBRACE      reduce using rule 102 (ifelse -> IF expression ifelseblock block ELSE elseblock block elseblockend .)
    $end            reduce using rule 102 (ifelse -> IF expression ifelseblock block ELSE elseblock block elseblockend .)


state 237

    (128) funcdecl -> FUNCTION ID funcscopedefnormal LEFTPAREN funcarghead RIGHTPAREN funblock endfunc .

    BREAK           reduce using rule 128 (funcdecl -> FUNCTION ID funcscopedefnormal LEFTPAREN funcarghead RIGHTPAREN funblock endfunc .)
    CONTINUE        reduce using rule 128 (funcdecl -> FUNCTION ID funcscopedefnormal LEFTPAREN funcarghead RIGHTPAREN funblock endfunc .)
    RETURN          reduce using rule 128 (funcdecl -> FUNCTION ID funcscopedefnormal LEFTPAREN funcarghead RIGHTPAREN funblock endfunc .)
    CONSOLE         reduce using rule 128 (funcdecl -> FUNCTION ID funcscopedefnormal LEFTPAREN funcarghead RIGHTPAREN funblock endfunc .)
    VAR             reduce using rule 128 (funcdecl -> FUNCTION ID funcscopedefnormal LEFTPAREN funcarghead RIGHTPAREN funblock endfunc .)
    ID              reduce using rule 128 (funcdecl -> FUNCTION ID funcscopedefnormal LEFTPAREN funcarghead RIGHTPAREN funblock endfunc .)
    LEFTPAREN       reduce using rule 128 (funcdecl -> FUNCTION ID funcscopedefnormal LEFTPAREN funcarghead RIGHTPAREN funblock endfunc .)
    IF              reduce using rule 128 (funcdecl -> FUNCTION ID funcscopedefnormal LEFTPAREN funcarghead RIGHTPAREN funblock endfunc .)
    WHILE           reduce using rule 128 (funcdecl -> FUNCTION ID funcscopedefnormal LEFTPAREN funcarghead RIGHTPAREN funblock endfunc .)
    FUNCTION        reduce using rule 128 (funcdecl -> FUNCTION ID funcscopedefnormal LEFTPAREN funcarghead RIGHTPAREN funblock endfunc .)
    FOR             reduce using rule 128 (funcdecl -> FUNCTION ID funcscopedefnormal LEFTPAREN funcarghead RIGHTPAREN funblock endfunc .)
    RIGHTBRACE      reduce using rule 128 (funcdecl -> FUNCTION ID funcscopedefnormal LEFTPAREN funcarghead RIGHTPAREN funblock endfunc .)
    RIGHTPAREN      reduce using rule 128 (funcdecl -> FUNCTION ID funcscopedefnormal LEFTPAREN funcarghead RIGHTPAREN funblock endfunc .)
    $end            reduce using rule 128 (funcdecl -> FUNCTION ID funcscopedefnormal LEFTPAREN funcarghead RIGHTPAREN funblock endfunc .)


state 238

    (130) endfunc -> empty .

    BREAK           reduce using rule 130 (endfunc -> empty .)
    CONTINUE        reduce using rule 130 (endfunc -> empty .)
    RETURN          reduce using rule 130 (endfunc -> empty .)
    CONSOLE         reduce using rule 130 (endfunc -> empty .)
    VAR             reduce using rule 130 (endfunc -> empty .)
    ID              reduce using rule 130 (endfunc -> empty .)
    LEFTPAREN       reduce using rule 130 (endfunc -> empty .)
    IF              reduce using rule 130 (endfunc -> empty .)
    WHILE           reduce using rule 130 (endfunc -> empty .)
    FUNCTION        reduce using rule 130 (endfunc -> empty .)
    FOR             reduce using rule 130 (endfunc -> empty .)
    $end            reduce using rule 130 (endfunc -> empty .)
    RIGHTBRACE      reduce using rule 130 (endfunc -> empty .)
    RIGHTPAREN      reduce using rule 130 (endfunc -> empty .)


state 239

    (132) funblock -> LEFTBRACE statements . RIGHTBRACE

    RIGHTBRACE      shift and go to state 242


state 240

    (131) funcdecl -> VAR ID EQ FUNCTION funcscopedef LEFTPAREN funcarghead RIGHTPAREN . funblock SEMICOLON endfuncdecl
    (132) funblock -> . LEFTBRACE statements RIGHTBRACE

    LEFTBRACE       shift and go to state 225

    funblock                       shift and go to state 243

state 241

    (110) forloop -> FOR scope_marker LEFTPAREN initialization SEMICOLON forexpr_marker for_expr forcheck_marker SEMICOLON . increment increment_marker RIGHTPAREN forblock endblock_marker
    (122) increment -> . reassignment SEMICOLON increment
    (123) increment -> . reassignment
    (30) reassignment -> . ID EQ expression
    (31) reassignment -> . ID PLUSEQ expression
    (32) reassignment -> . ID MINUSEQ expression
    (33) reassignment -> . ID INTOEQ expression
    (34) reassignment -> . ID DIVEQ expression
    (35) reassignment -> . ID INCR
    (36) reassignment -> . ID DECR
    (37) reassignment -> . ID LSHIFTEQ expression
    (38) reassignment -> . ID RSHIFTEQ expression
    (39) reassignment -> . ID URSHIFTEQ expression
    (40) reassignment -> . ID ANDEQ expression
    (41) reassignment -> . ID OREQ expression
    (42) reassignment -> . ID XOREQ expression
    (43) reassignment -> . ID MODEQ expression
    (44) reassignment -> . LEFTPAREN reassignment RIGHTPAREN

    ID              shift and go to state 55
    LEFTPAREN       shift and go to state 19

    reassignment                   shift and go to state 245
    increment                      shift and go to state 244

state 242

    (132) funblock -> LEFTBRACE statements RIGHTBRACE .

    SEMICOLON       reduce using rule 132 (funblock -> LEFTBRACE statements RIGHTBRACE .)
    BREAK           reduce using rule 132 (funblock -> LEFTBRACE statements RIGHTBRACE .)
    CONTINUE        reduce using rule 132 (funblock -> LEFTBRACE statements RIGHTBRACE .)
    RETURN          reduce using rule 132 (funblock -> LEFTBRACE statements RIGHTBRACE .)
    CONSOLE         reduce using rule 132 (funblock -> LEFTBRACE statements RIGHTBRACE .)
    VAR             reduce using rule 132 (funblock -> LEFTBRACE statements RIGHTBRACE .)
    ID              reduce using rule 132 (funblock -> LEFTBRACE statements RIGHTBRACE .)
    LEFTPAREN       reduce using rule 132 (funblock -> LEFTBRACE statements RIGHTBRACE .)
    IF              reduce using rule 132 (funblock -> LEFTBRACE statements RIGHTBRACE .)
    WHILE           reduce using rule 132 (funblock -> LEFTBRACE statements RIGHTBRACE .)
    FUNCTION        reduce using rule 132 (funblock -> LEFTBRACE statements RIGHTBRACE .)
    FOR             reduce using rule 132 (funblock -> LEFTBRACE statements RIGHTBRACE .)
    $end            reduce using rule 132 (funblock -> LEFTBRACE statements RIGHTBRACE .)
    RIGHTBRACE      reduce using rule 132 (funblock -> LEFTBRACE statements RIGHTBRACE .)
    RIGHTPAREN      reduce using rule 132 (funblock -> LEFTBRACE statements RIGHTBRACE .)


state 243

    (131) funcdecl -> VAR ID EQ FUNCTION funcscopedef LEFTPAREN funcarghead RIGHTPAREN funblock . SEMICOLON endfuncdecl

    SEMICOLON       shift and go to state 246


state 244

    (110) forloop -> FOR scope_marker LEFTPAREN initialization SEMICOLON forexpr_marker for_expr forcheck_marker SEMICOLON increment . increment_marker RIGHTPAREN forblock endblock_marker
    (114) increment_marker -> .

    RIGHTPAREN      reduce using rule 114 (increment_marker -> .)

    increment_marker               shift and go to state 247

state 245

    (122) increment -> reassignment . SEMICOLON increment
    (123) increment -> reassignment .

    SEMICOLON       shift and go to state 248
    RIGHTPAREN      reduce using rule 123 (increment -> reassignment .)


state 246

    (131) funcdecl -> VAR ID EQ FUNCTION funcscopedef LEFTPAREN funcarghead RIGHTPAREN funblock SEMICOLON . endfuncdecl
    (134) endfuncdecl -> .

    BREAK           reduce using rule 134 (endfuncdecl -> .)
    CONTINUE        reduce using rule 134 (endfuncdecl -> .)
    RETURN          reduce using rule 134 (endfuncdecl -> .)
    CONSOLE         reduce using rule 134 (endfuncdecl -> .)
    VAR             reduce using rule 134 (endfuncdecl -> .)
    ID              reduce using rule 134 (endfuncdecl -> .)
    LEFTPAREN       reduce using rule 134 (endfuncdecl -> .)
    IF              reduce using rule 134 (endfuncdecl -> .)
    WHILE           reduce using rule 134 (endfuncdecl -> .)
    FUNCTION        reduce using rule 134 (endfuncdecl -> .)
    FOR             reduce using rule 134 (endfuncdecl -> .)
    $end            reduce using rule 134 (endfuncdecl -> .)
    RIGHTBRACE      reduce using rule 134 (endfuncdecl -> .)
    RIGHTPAREN      reduce using rule 134 (endfuncdecl -> .)

    endfuncdecl                    shift and go to state 249

state 247

    (110) forloop -> FOR scope_marker LEFTPAREN initialization SEMICOLON forexpr_marker for_expr forcheck_marker SEMICOLON increment increment_marker . RIGHTPAREN forblock endblock_marker

    RIGHTPAREN      shift and go to state 250


state 248

    (122) increment -> reassignment SEMICOLON . increment
    (122) increment -> . reassignment SEMICOLON increment
    (123) increment -> . reassignment
    (30) reassignment -> . ID EQ expression
    (31) reassignment -> . ID PLUSEQ expression
    (32) reassignment -> . ID MINUSEQ expression
    (33) reassignment -> . ID INTOEQ expression
    (34) reassignment -> . ID DIVEQ expression
    (35) reassignment -> . ID INCR
    (36) reassignment -> . ID DECR
    (37) reassignment -> . ID LSHIFTEQ expression
    (38) reassignment -> . ID RSHIFTEQ expression
    (39) reassignment -> . ID URSHIFTEQ expression
    (40) reassignment -> . ID ANDEQ expression
    (41) reassignment -> . ID OREQ expression
    (42) reassignment -> . ID XOREQ expression
    (43) reassignment -> . ID MODEQ expression
    (44) reassignment -> . LEFTPAREN reassignment RIGHTPAREN

    ID              shift and go to state 55
    LEFTPAREN       shift and go to state 19

    reassignment                   shift and go to state 245
    increment                      shift and go to state 251

state 249

    (131) funcdecl -> VAR ID EQ FUNCTION funcscopedef LEFTPAREN funcarghead RIGHTPAREN funblock SEMICOLON endfuncdecl .

    BREAK           reduce using rule 131 (funcdecl -> VAR ID EQ FUNCTION funcscopedef LEFTPAREN funcarghead RIGHTPAREN funblock SEMICOLON endfuncdecl .)
    CONTINUE        reduce using rule 131 (funcdecl -> VAR ID EQ FUNCTION funcscopedef LEFTPAREN funcarghead RIGHTPAREN funblock SEMICOLON endfuncdecl .)
    RETURN          reduce using rule 131 (funcdecl -> VAR ID EQ FUNCTION funcscopedef LEFTPAREN funcarghead RIGHTPAREN funblock SEMICOLON endfuncdecl .)
    CONSOLE         reduce using rule 131 (funcdecl -> VAR ID EQ FUNCTION funcscopedef LEFTPAREN funcarghead RIGHTPAREN funblock SEMICOLON endfuncdecl .)
    VAR             reduce using rule 131 (funcdecl -> VAR ID EQ FUNCTION funcscopedef LEFTPAREN funcarghead RIGHTPAREN funblock SEMICOLON endfuncdecl .)
    ID              reduce using rule 131 (funcdecl -> VAR ID EQ FUNCTION funcscopedef LEFTPAREN funcarghead RIGHTPAREN funblock SEMICOLON endfuncdecl .)
    LEFTPAREN       reduce using rule 131 (funcdecl -> VAR ID EQ FUNCTION funcscopedef LEFTPAREN funcarghead RIGHTPAREN funblock SEMICOLON endfuncdecl .)
    IF              reduce using rule 131 (funcdecl -> VAR ID EQ FUNCTION funcscopedef LEFTPAREN funcarghead RIGHTPAREN funblock SEMICOLON endfuncdecl .)
    WHILE           reduce using rule 131 (funcdecl -> VAR ID EQ FUNCTION funcscopedef LEFTPAREN funcarghead RIGHTPAREN funblock SEMICOLON endfuncdecl .)
    FUNCTION        reduce using rule 131 (funcdecl -> VAR ID EQ FUNCTION funcscopedef LEFTPAREN funcarghead RIGHTPAREN funblock SEMICOLON endfuncdecl .)
    FOR             reduce using rule 131 (funcdecl -> VAR ID EQ FUNCTION funcscopedef LEFTPAREN funcarghead RIGHTPAREN funblock SEMICOLON endfuncdecl .)
    RIGHTBRACE      reduce using rule 131 (funcdecl -> VAR ID EQ FUNCTION funcscopedef LEFTPAREN funcarghead RIGHTPAREN funblock SEMICOLON endfuncdecl .)
    RIGHTPAREN      reduce using rule 131 (funcdecl -> VAR ID EQ FUNCTION funcscopedef LEFTPAREN funcarghead RIGHTPAREN funblock SEMICOLON endfuncdecl .)
    $end            reduce using rule 131 (funcdecl -> VAR ID EQ FUNCTION funcscopedef LEFTPAREN funcarghead RIGHTPAREN funblock SEMICOLON endfuncdecl .)


state 250

    (110) forloop -> FOR scope_marker LEFTPAREN initialization SEMICOLON forexpr_marker for_expr forcheck_marker SEMICOLON increment increment_marker RIGHTPAREN . forblock endblock_marker
    (116) forblock -> . LEFTBRACE statements RIGHTBRACE

    LEFTBRACE       shift and go to state 252

    forblock                       shift and go to state 253

state 251

    (122) increment -> reassignment SEMICOLON increment .

    RIGHTPAREN      reduce using rule 122 (increment -> reassignment SEMICOLON increment .)


state 252

    (116) forblock -> LEFTBRACE . statements RIGHTBRACE
    (5) statements -> . statement statements
    (6) statements -> . statement
    (7) statement -> . assignment SEMICOLON
    (8) statement -> . declaration SEMICOLON
    (9) statement -> . reassignment SEMICOLON
    (10) statement -> . BREAK SEMICOLON
    (11) statement -> . CONTINUE SEMICOLON
    (12) statement -> . funcstmt SEMICOLON
    (13) statement -> . if
    (14) statement -> . ifelse
    (15) statement -> . whileloop
    (16) statement -> . funcdecl
    (17) statement -> . forloop
    (18) statement -> . reassignmentarray SEMICOLON
    (19) statement -> . RETURN expression SEMICOLON
    (20) statement -> . CONSOLE DOT LOG LEFTPAREN printList RIGHTPAREN SEMICOLON
    (26) assignment -> . VAR assignlist
    (23) declaration -> . VAR declarationList
    (30) reassignment -> . ID EQ expression
    (31) reassignment -> . ID PLUSEQ expression
    (32) reassignment -> . ID MINUSEQ expression
    (33) reassignment -> . ID INTOEQ expression
    (34) reassignment -> . ID DIVEQ expression
    (35) reassignment -> . ID INCR
    (36) reassignment -> . ID DECR
    (37) reassignment -> . ID LSHIFTEQ expression
    (38) reassignment -> . ID RSHIFTEQ expression
    (39) reassignment -> . ID URSHIFTEQ expression
    (40) reassignment -> . ID ANDEQ expression
    (41) reassignment -> . ID OREQ expression
    (42) reassignment -> . ID XOREQ expression
    (43) reassignment -> . ID MODEQ expression
    (44) reassignment -> . LEFTPAREN reassignment RIGHTPAREN
    (84) funcstmt -> . ID EQ functioncall
    (85) funcstmt -> . functioncall
    (86) funcstmt -> . VAR ID EQ functioncall
    (100) if -> . IF expression ifelseblock block ifblockend
    (102) ifelse -> . IF expression ifelseblock block ELSE elseblock block elseblockend
    (106) whileloop -> . WHILE whileblockstart LEFTPAREN expression RIGHTPAREN exprcheck block whileblockend
    (128) funcdecl -> . FUNCTION ID funcscopedefnormal LEFTPAREN funcarghead RIGHTPAREN funblock endfunc
    (131) funcdecl -> . VAR ID EQ FUNCTION funcscopedef LEFTPAREN funcarghead RIGHTPAREN funblock SEMICOLON endfuncdecl
    (110) forloop -> . FOR scope_marker LEFTPAREN initialization SEMICOLON forexpr_marker for_expr forcheck_marker SEMICOLON increment increment_marker RIGHTPAREN forblock endblock_marker
    (88) reassignmentarray -> . arrayCall EQ expression
    (96) functioncall -> . ID LEFTPAREN argList RIGHTPAREN
    (89) arrayCall -> . ID reference

    BREAK           shift and go to state 25
    CONTINUE        shift and go to state 26
    RETURN          shift and go to state 3
    CONSOLE         shift and go to state 17
    VAR             shift and go to state 21
    ID              shift and go to state 22
    LEFTPAREN       shift and go to state 19
    IF              shift and go to state 14
    WHILE           shift and go to state 2
    FUNCTION        shift and go to state 15
    FOR             shift and go to state 7

    statements                     shift and go to state 254
    if                             shift and go to state 4
    whileloop                      shift and go to state 5
    funcstmt                       shift and go to state 8
    arrayCall                      shift and go to state 9
    reassignmentarray              shift and go to state 11
    ifelse                         shift and go to state 12
    statement                      shift and go to state 13
    forloop                        shift and go to state 16
    assignment                     shift and go to state 18
    declaration                    shift and go to state 20
    funcdecl                       shift and go to state 24
    reassignment                   shift and go to state 6
    functioncall                   shift and go to state 27

state 253

    (110) forloop -> FOR scope_marker LEFTPAREN initialization SEMICOLON forexpr_marker for_expr forcheck_marker SEMICOLON increment increment_marker RIGHTPAREN forblock . endblock_marker
    (115) endblock_marker -> .

    BREAK           reduce using rule 115 (endblock_marker -> .)
    CONTINUE        reduce using rule 115 (endblock_marker -> .)
    RETURN          reduce using rule 115 (endblock_marker -> .)
    CONSOLE         reduce using rule 115 (endblock_marker -> .)
    VAR             reduce using rule 115 (endblock_marker -> .)
    ID              reduce using rule 115 (endblock_marker -> .)
    LEFTPAREN       reduce using rule 115 (endblock_marker -> .)
    IF              reduce using rule 115 (endblock_marker -> .)
    WHILE           reduce using rule 115 (endblock_marker -> .)
    FUNCTION        reduce using rule 115 (endblock_marker -> .)
    FOR             reduce using rule 115 (endblock_marker -> .)
    $end            reduce using rule 115 (endblock_marker -> .)
    RIGHTBRACE      reduce using rule 115 (endblock_marker -> .)
    RIGHTPAREN      reduce using rule 115 (endblock_marker -> .)

    endblock_marker                shift and go to state 255

state 254

    (116) forblock -> LEFTBRACE statements . RIGHTBRACE

    RIGHTBRACE      shift and go to state 256


state 255

    (110) forloop -> FOR scope_marker LEFTPAREN initialization SEMICOLON forexpr_marker for_expr forcheck_marker SEMICOLON increment increment_marker RIGHTPAREN forblock endblock_marker .

    BREAK           reduce using rule 110 (forloop -> FOR scope_marker LEFTPAREN initialization SEMICOLON forexpr_marker for_expr forcheck_marker SEMICOLON increment increment_marker RIGHTPAREN forblock endblock_marker .)
    CONTINUE        reduce using rule 110 (forloop -> FOR scope_marker LEFTPAREN initialization SEMICOLON forexpr_marker for_expr forcheck_marker SEMICOLON increment increment_marker RIGHTPAREN forblock endblock_marker .)
    RETURN          reduce using rule 110 (forloop -> FOR scope_marker LEFTPAREN initialization SEMICOLON forexpr_marker for_expr forcheck_marker SEMICOLON increment increment_marker RIGHTPAREN forblock endblock_marker .)
    CONSOLE         reduce using rule 110 (forloop -> FOR scope_marker LEFTPAREN initialization SEMICOLON forexpr_marker for_expr forcheck_marker SEMICOLON increment increment_marker RIGHTPAREN forblock endblock_marker .)
    VAR             reduce using rule 110 (forloop -> FOR scope_marker LEFTPAREN initialization SEMICOLON forexpr_marker for_expr forcheck_marker SEMICOLON increment increment_marker RIGHTPAREN forblock endblock_marker .)
    ID              reduce using rule 110 (forloop -> FOR scope_marker LEFTPAREN initialization SEMICOLON forexpr_marker for_expr forcheck_marker SEMICOLON increment increment_marker RIGHTPAREN forblock endblock_marker .)
    LEFTPAREN       reduce using rule 110 (forloop -> FOR scope_marker LEFTPAREN initialization SEMICOLON forexpr_marker for_expr forcheck_marker SEMICOLON increment increment_marker RIGHTPAREN forblock endblock_marker .)
    IF              reduce using rule 110 (forloop -> FOR scope_marker LEFTPAREN initialization SEMICOLON forexpr_marker for_expr forcheck_marker SEMICOLON increment increment_marker RIGHTPAREN forblock endblock_marker .)
    WHILE           reduce using rule 110 (forloop -> FOR scope_marker LEFTPAREN initialization SEMICOLON forexpr_marker for_expr forcheck_marker SEMICOLON increment increment_marker RIGHTPAREN forblock endblock_marker .)
    FUNCTION        reduce using rule 110 (forloop -> FOR scope_marker LEFTPAREN initialization SEMICOLON forexpr_marker for_expr forcheck_marker SEMICOLON increment increment_marker RIGHTPAREN forblock endblock_marker .)
    FOR             reduce using rule 110 (forloop -> FOR scope_marker LEFTPAREN initialization SEMICOLON forexpr_marker for_expr forcheck_marker SEMICOLON increment increment_marker RIGHTPAREN forblock endblock_marker .)
    $end            reduce using rule 110 (forloop -> FOR scope_marker LEFTPAREN initialization SEMICOLON forexpr_marker for_expr forcheck_marker SEMICOLON increment increment_marker RIGHTPAREN forblock endblock_marker .)
    RIGHTBRACE      reduce using rule 110 (forloop -> FOR scope_marker LEFTPAREN initialization SEMICOLON forexpr_marker for_expr forcheck_marker SEMICOLON increment increment_marker RIGHTPAREN forblock endblock_marker .)
    RIGHTPAREN      reduce using rule 110 (forloop -> FOR scope_marker LEFTPAREN initialization SEMICOLON forexpr_marker for_expr forcheck_marker SEMICOLON increment increment_marker RIGHTPAREN forblock endblock_marker .)


state 256

    (116) forblock -> LEFTBRACE statements RIGHTBRACE .

    BREAK           reduce using rule 116 (forblock -> LEFTBRACE statements RIGHTBRACE .)
    CONTINUE        reduce using rule 116 (forblock -> LEFTBRACE statements RIGHTBRACE .)
    RETURN          reduce using rule 116 (forblock -> LEFTBRACE statements RIGHTBRACE .)
    CONSOLE         reduce using rule 116 (forblock -> LEFTBRACE statements RIGHTBRACE .)
    VAR             reduce using rule 116 (forblock -> LEFTBRACE statements RIGHTBRACE .)
    ID              reduce using rule 116 (forblock -> LEFTBRACE statements RIGHTBRACE .)
    LEFTPAREN       reduce using rule 116 (forblock -> LEFTBRACE statements RIGHTBRACE .)
    IF              reduce using rule 116 (forblock -> LEFTBRACE statements RIGHTBRACE .)
    WHILE           reduce using rule 116 (forblock -> LEFTBRACE statements RIGHTBRACE .)
    FUNCTION        reduce using rule 116 (forblock -> LEFTBRACE statements RIGHTBRACE .)
    FOR             reduce using rule 116 (forblock -> LEFTBRACE statements RIGHTBRACE .)
    $end            reduce using rule 116 (forblock -> LEFTBRACE statements RIGHTBRACE .)
    RIGHTBRACE      reduce using rule 116 (forblock -> LEFTBRACE statements RIGHTBRACE .)
    RIGHTPAREN      reduce using rule 116 (forblock -> LEFTBRACE statements RIGHTBRACE .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for LEFTPAREN in state 81 resolved as shift
WARNING: shift/reduce conflict for ID in state 81 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 82 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 82 resolved as shift
WARNING: shift/reduce conflict for INTO in state 82 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 82 resolved as shift
WARNING: shift/reduce conflict for MOD in state 82 resolved as shift
WARNING: shift/reduce conflict for BINAND in state 82 resolved as shift
WARNING: shift/reduce conflict for BINOR in state 82 resolved as shift
WARNING: shift/reduce conflict for BINXOR in state 82 resolved as shift
WARNING: shift/reduce conflict for LT in state 82 resolved as shift
WARNING: shift/reduce conflict for GT in state 82 resolved as shift
WARNING: shift/reduce conflict for DOUBLEEQ in state 82 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 82 resolved as shift
WARNING: shift/reduce conflict for LTE in state 82 resolved as shift
WARNING: shift/reduce conflict for GTE in state 82 resolved as shift
WARNING: shift/reduce conflict for STREQUAL in state 82 resolved as shift
WARNING: shift/reduce conflict for STRNEQUAL in state 82 resolved as shift
WARNING: shift/reduce conflict for AND in state 82 resolved as shift
WARNING: shift/reduce conflict for OR in state 82 resolved as shift
WARNING: shift/reduce conflict for LSHIFT in state 82 resolved as shift
WARNING: shift/reduce conflict for RSHIFT in state 82 resolved as shift
WARNING: shift/reduce conflict for URSHIFT in state 82 resolved as shift
